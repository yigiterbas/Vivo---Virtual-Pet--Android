package com.game.hy.vivo;

import android.animation.Animator;
import android.animation.AnimatorInflater;
import android.animation.AnimatorSet;
import android.animation.LayoutTransition;
import android.animation.ValueAnimator;
import android.app.ActionBar;
import android.app.Activity;
import android.app.AlarmManager;
import android.app.Notification;
import android.app.NotificationManager;
import android.app.PendingIntent;
import android.app.ProgressDialog;
import android.content.ActivityNotFoundException;
import android.content.ComponentName;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.ServiceConnection;
import android.content.SharedPreferences;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.content.pm.Signature;
import android.content.res.Configuration;
import android.content.res.Resources;

import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.ColorFilter;
import android.graphics.ColorMatrix;
import android.graphics.ColorMatrixColorFilter;
import android.graphics.Matrix;
import android.graphics.Paint;

import android.graphics.Point;
import android.graphics.PorterDuff;
import android.graphics.PorterDuffXfermode;
import android.graphics.Rect;
import android.graphics.RectF;
import android.graphics.Typeface;
import android.graphics.drawable.AnimationDrawable;
import android.graphics.drawable.BitmapDrawable;
import android.graphics.drawable.Drawable;
import android.graphics.drawable.GradientDrawable;
import android.hardware.Sensor;
import android.hardware.SensorEvent;
import android.hardware.SensorEventListener;
import android.hardware.SensorManager;
import android.icu.text.DecimalFormat;
import android.location.Location;
import android.location.LocationManager;
import android.media.AudioAttributes;
import android.media.AudioManager;
import android.media.MediaPlayer;
import android.media.SoundPool;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.net.Uri;
import android.os.Bundle;
import android.os.CountDownTimer;
import android.os.Environment;
import android.os.Handler;
import android.os.IBinder;
import android.os.PowerManager;
import android.os.StrictMode;
import android.os.Vibrator;
import android.provider.Settings;
import android.support.v4.view.MotionEventCompat;
import android.support.v4.view.VelocityTrackerCompat;
import android.support.v7.app.AlertDialog;
import android.support.v7.app.NotificationCompat;
import android.text.Html;
import android.text.format.Time;
import android.util.Base64;
import android.util.DisplayMetrics;
import android.util.Log;
import android.view.Gravity;
import android.view.LayoutInflater;
import android.view.MenuItem;
import android.view.MotionEvent;
import android.view.SoundEffectConstants;
import android.view.View;
import android.view.ViewGroup;
import android.view.Window;
import android.view.WindowManager;
import android.view.animation.AccelerateInterpolator;
import android.view.animation.AlphaAnimation;
import android.view.animation.Animation;
import android.view.animation.AnimationSet;
import android.view.animation.AnimationUtils;
import android.view.animation.DecelerateInterpolator;
import android.view.animation.TranslateAnimation;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.CompoundButton;
import android.widget.EditText;
import android.widget.FrameLayout;
import android.widget.HorizontalScrollView;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.ProgressBar;
import android.widget.RelativeLayout;
import android.widget.ScrollView;
import android.widget.Spinner;
import android.widget.TextView;
import android.animation.ObjectAnimator;

import android.content.ClipData;
import android.view.DragEvent;
import android.widget.LinearLayout;
import android.widget.Toast;
/*
import com.adcolony.sdk.AdColony;
import com.adcolony.sdk.AdColonyInterstitial;
import com.adcolony.sdk.AdColonyInterstitialListener;*/

import com.android.vending.billing.IInAppBillingService;
import com.anjlab.android.iab.v3.BillingProcessor;
import com.anjlab.android.iab.v3.SkuDetails;
import com.anjlab.android.iab.v3.TransactionDetails;

import com.facebook.FacebookSdk;
import com.facebook.AccessToken;
import com.facebook.CallbackManager;
import com.facebook.FacebookCallback;
import com.facebook.FacebookException;
import com.facebook.FacebookSdk;
import com.facebook.ads.Ad;
import com.facebook.ads.AdError;
import com.facebook.ads.AdSettings;
import com.facebook.ads.AdSize;
import com.facebook.appevents.AppEventsLogger;
import com.facebook.applinks.AppLinkData;
import com.facebook.login.LoginManager;
import com.facebook.login.LoginResult;
import com.facebook.share.widget.LikeView;
import com.flurry.android.FlurryAgent;
import com.github.arturogutierrez.Badges;
import com.github.arturogutierrez.BadgesNotSupportedException;
import com.google.android.gms.ads.AdListener;
import com.google.android.gms.ads.AdRequest;

import com.google.android.gms.ads.InterstitialAd;
import com.google.android.gms.ads.MobileAds;
import com.google.android.gms.analytics.GoogleAnalytics;
import com.google.android.gms.analytics.HitBuilders;
import com.google.android.gms.analytics.Tracker;
import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.GoogleApiAvailability;
import com.google.android.gms.common.api.GoogleApiClient;
import com.google.android.gms.common.api.PendingResult;
import com.google.android.gms.common.api.ResultCallback;
import com.google.android.gms.games.Game;
import com.google.android.gms.games.Games;
//import com.google.example.games.basegameutils.BaseGameUtils;



import com.google.android.gms.ads.AdView;
import com.google.android.gms.games.GamesStatusCodes;
import com.google.android.gms.games.Player;
import com.google.android.gms.games.leaderboard.LeaderboardBuffer;
import com.google.android.gms.games.leaderboard.LeaderboardScore;
import com.google.android.gms.games.leaderboard.LeaderboardScoreBuffer;
import com.google.android.gms.games.leaderboard.LeaderboardVariant;
import com.google.android.gms.games.leaderboard.Leaderboards;
import com.google.android.gms.games.request.GameRequest;
import com.google.android.gms.location.LocationServices;
import com.google.android.gms.plus.Plus;
import com.google.android.gms.plus.PlusOneButton;
import com.google.android.gms.plus.model.people.Person;
import com.google.example.games.basegameutils.BaseGameUtils;
import com.google.firebase.analytics.FirebaseAnalytics;
import com.inmobi.ads.InMobiAdRequestStatus;
import com.inmobi.ads.InMobiBanner;
import com.inmobi.ads.InMobiInterstitial;
import com.inmobi.sdk.InMobiSdk;
import com.mopub.common.MoPub;
import com.mopub.common.MoPubReward;
import com.mopub.mobileads.MoPubErrorCode;
import com.mopub.mobileads.MoPubInterstitial;
import com.mopub.mobileads.MoPubRewardedVideoListener;
import com.mopub.mobileads.MoPubView;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.net.HttpURLConnection;
import java.net.InetAddress;
import java.net.MalformedURLException;
import java.net.URL;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Collections;
import java.util.Date;

import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.Locale;
import java.util.Map;
import java.util.Random;
import java.util.Set;
import java.util.TimeZone;
import java.util.Timer;



//xmlns:ads="http://schemas.android.com/apk/res-auto"
public class GameforActivity extends Activity implements
        GoogleApiClient.ConnectionCallbacks,
        GoogleApiClient.OnConnectionFailedListener,BillingProcessor.IBillingHandler,SensorEventListener ,MoPubInterstitial.InterstitialAdListener {
    MoPubInterstitial mobInterstitial;
    MoPubInterstitial mobInterstitial2;
    MoPubInterstitial mobInterstitial3;
    @Override
    public void onInterstitialLoaded(MoPubInterstitial interstitial) {
        if (interstitial.isReady()) {
            mobInterstitialflag = true;
            mobInterstitialflag2 = true;
        } else {
            Log.d("mopub:","errror");
        }
    }

    @Override
    public void onInterstitialFailed(MoPubInterstitial interstitial, MoPubErrorCode errorCode) {mobInterstitialflag = false;mobInterstitialflag2 = false; }

    @Override
    public void onInterstitialShown(MoPubInterstitial interstitial) { Log.d("mopub:","shown");}

    @Override
    public void onInterstitialDismissed(MoPubInterstitial interstitial) {



     }

    @Override
    public void onInterstitialClicked(MoPubInterstitial interstitial) {}

   boolean mobInterstitialflag = false;
    boolean mobInterstitialflag2 = false;
    LinearLayout kitchenlinear;
    LinearLayout hygienelinear;
  boolean mCanShowAd;
    boolean frenchfriesflag=false;
    final int gamewaittime = 1800;

    boolean coinbackpressflag = true;
    private MoPubView moPubView;
    final int SENSORTYPE = SensorManager.SENSOR_DELAY_FASTEST;
    public static String FACEBOOK_URL = "https://www.facebook.com/vivobroshome";
    public static String FACEBOOK_PAGE_ID = "1271859186267679";
    int hungerspeed = 1800;
    int hygienespeed = 1800;

    int wcspeed = 1800;
    int sleepspeed = 1800;
    int lovespeed = 1800;
    Location mLastLocation;
    LocationManager locationManager;
    LinearLayout potionlinear;
    int storearraycount = 0;
    int storearraycount2 = 0;
    int braintimer = 12;
    int braincounter =12000;
    int BILLINGSTATE = 0;
    int PURCHASE1000 = 1000;
    int PURCHASE500 = 500;
    int PURCHASE200 = 200;
    int UNLOCKIQ = 2;
    int PLUS5GAME = 3;
    int MULTCOIN2 = 4;

    TextView heartratet2;


    int speedupcounter =0;

    ImageView heartimage;
    Animation pulse2;
    Animation pulse;
    Animation reset;
    int initialheartrate;
    int i2 = 0;
    int heartbeat = 80;
    int touchcount = 0;




    int try1 = 0;
    int try2 = 0;

    int adcounter = 0;

    Boolean hel;
    boolean washhandflag = false;
    InterstitialAd mInterstitialAd;
   Boolean eyeband1bought= false;
    Boolean eyeband2bought= false;
    Boolean eyeband3bought= false;
    Boolean eyeband4bought= false;
    Boolean eyeband5bought= false;
    Boolean eyeband6bought= false;
    int NOADD = 5;
    Boolean plus5gameflag = false;
    Boolean soapflag = false;
    Boolean drinkflag = false;

    float mLastTouchX;
    float mLastTouchY;

    float mMoveTouchX;
    float mMoveTouchY;
    float beginx;
    float beginy;

    int MARKETEXIT = 11;
    int MENU = 12;
    int MAINSTATE = 13;
    int OPTIONEXIT = 14;
    int STATE = 13;
    int sleepbandpick = 2;

    Boolean notification;
    BillingProcessor bp;
boolean isplustencoin=false;
    int MAXDIRT=41;
    int MAXGAMEPLAY = 3;
    boolean unlockiqflag = false;
    boolean mult2flag = false;
    boolean adflag = false;

    private static int RC_SIGN_IN = 9001;
    IInAppBillingService mService;
    private boolean mResolvingConnectionFailure = false;
    private boolean mAutoStartSignInflow = true;
    private boolean mSignInClicked = false;
    boolean mExplicitSignOut = false;
    AnimatorSet set = null;
boolean animationmouth=false;
    AnimationDrawable rocketAnimation;
    AnimationDrawable rocketAnimation2;
    final int decrementcounter=3;
    boolean mInSignInFlow = false; // set to true when you're in the middle of the
    // sign in flow, to know you should not attempt
    // to connect in onStart()

    Boolean GoodlegO=false;
    Boolean facebookgo=false;
    Boolean videogo=false;
    Boolean instago=false;
    Boolean twittergo = false;


    final String tag = "AccLogger";
    SensorManager sensore=null;
    Boolean sensorflag=false;
    private ImageView ball;
    Context con =this;
    int xa=0;
    int ya=0;
    int loyaltyseconds,loyaltyminutes,loyaltyhours;

    private SoundPool soundPool;
    private SoundPool soundPool2;
    private SoundPool soundPool3;
    private SoundPool soundPool4;
    private SoundPool soundPool5;
    private SoundPool soundPool6;
    private SoundPool soundPoolbubble;
    private SoundPool soundPool7wakeup;
    String location = "";
    int x1store=0;
    int x2store=0;
    int x3store=0;
    int x4store=0;
    int x5store=0;
    int x6store=0;
    int x7store=0;
    int x8store=0;
    int MENUTEXTFONTSIZE = 13;
    int HEADERTEXTSIZE = 25;
    int BUTTIONFONTSIZE = 15;
    private static Set<MediaPlayer> activePlayers = new HashSet<MediaPlayer>();
    Float BSCALE = 1f;
    Float BALPHA = 0.7f;
    int y1store=0;
    int y2store=0;
    int y3store=0;
    int y4store=0;
    int y5store=0;
    int y6store=0;
    int y7store=0;
    Boolean facecoin = false;
    Boolean googlecoin = false;
    Boolean instacoin = false;
    Boolean twitcoin = false;

    String GoogleId = "";
     int BELOW50TIME = 180;
    int ABOVE50TIME = 120;
    int SLIDEANIMDUR=600;


    int BELOW50HUNGER = 240;
    int ABOVE50HUNGER = (int)((double)240 * (double)1.1);
    int ABOVE100HUNGER = (int)((double)240 * (double)1.2);


    int BELOW50HYGIENE = 300;
    int ABOVE50HYGIENE = (int)((double)300 * (double)1.1);
    int ABOVE100HYGIENE = (int)((double)300 * (double)1.2);



    int BELOW50WC = 360;
    int ABOVE50WC = (int)((double)360 * (double)1.1);
    int ABOVE100WC = (int)((double)360 * (double)1.2);

    int BELOW50SLEEP = 330;
    int ABOVE50SLEEP = (int)((double)330 * (double)1.1);
    int ABOVE100SLEEP = (int)((double)330 * (double)1.2);

    int BELOW50NONSLEEP = 60;
    int ABOVE50NONSLEEP = (int)((double)60 * (double)1.1);
    int ABOVE100NONSLEEP = (int)((double)60 * (double)1.2);

    int BELOW50LOVE = 216;
    int ABOVE50SLOVE = (int)((double)216 * (double)1.1);
    int ABOVE100LOVE = (int)((double)216 * (double)1.2);

    String shareyourvivo = "Share your Vivo";

    Boolean optionsound=false;
    int gameincoin;
    int gamereturncoin;
    GoogleApiClient mGoogleApiClient;  // initialized in onCreate
    Intent intent;
    PendingIntent pintent;
    final Context x = this;
    LinearLayout linear1;
    LinearLayout pizzalayout;

    Boolean facebookliked=false;
    Bitmap firstbitmap;

    Typeface brow;
    ImageView pizzaimp;
    Boolean vibration=true;
    Boolean coinok = true;
    Boolean quit = false;
    Boolean googlesigninbtnflg=false;

    int ColorRed = Color.argb(255, 232, 75, 60);
    int ColorWhite = Color.argb(255, 255, 255, 255);
   // int ColorGray = Color.argb(255, 158, 158, 158);
     int ColorGray = Color.argb(255, 83, 93, 100);


    int NONE= 100;
    int ENGLISH = 0;
    int TURKISH =1 ;
    int FRENCH =2;
    int SPANISH =3;
    int RUSSIAN =4;
    int CHINESE =5 ;
    int JAPANESE = 6;
    int PORTUGUESE =7;
    int pluscoinamount=0;

    int gamelang = NONE;


    ImageView watermelonimg;
    ImageView tomatoimg;
    ImageView pumpkinimg;
    ImageView peesimg;
    ImageView kiwiimg;
    ImageView hotdogimg;
    ImageView cornimg;
    ImageView cookieimg;
    ImageView chilisimg;
    ImageView broccoliimg;
    ImageView bananaimg;
    ImageView regional1img;
    ImageView regional2img;
    ImageView regional3img;
    ImageView regional4img;
    ImageView regional5img;
    ImageView regional6img;
    ImageView siskebapimg;

    ImageView drinks1img;
    ImageView drinks2img;
    ImageView drinks3img;
    ImageView drinks4img;
    ImageView drinks5img;
    ImageView drinks6img;

    ImageView desert1img;
    ImageView desert2img;
    ImageView desert3img;
    ImageView desert4img;
    ImageView desert5img;
    ImageView desert6img;



    ImageView hamburgerimg;
    ImageView soap1img;
    ImageView soap2img;
    ImageView greensoapimg;
    ImageView cellspongeimg;
    ImageView darkspongeimg;
    ImageView seaspongeimg;
    Boolean iqplusone=false;
    Boolean zerogamestar=false;

    ImageView sleeppotionimg;
    ImageView hungerpotionimg;
    ImageView hygienepotionimg;
    ImageView lovepotionimg;
    ImageView gamepotionimg;
    ImageView allinpotionimg;
    AnimationDrawable flyanimation;
    AnimationDrawable flyanimation2;
    AnimationDrawable flyanimation3;
    AnimationDrawable flyanimation4;
    AnimationDrawable flyanimation5;


    String sharefreindstext= "Share Vivo with Friends";
    ImageView frenchfriesimg;
    ImageView chickenlegimg;
    ImageView fishimg;
    //private AdView mAdView;
    Bitmap movemouthup,movemouthdown;
    ImageView appleimg,bostonrollimg,carrotimg,frenchtoastimg,meatarmimg, medisaladimg,noodleimg,mixedsaladimg, onionringimg,orangeimg,porkimg,mixedrollimg, salmonsushiimg,soupimg,squidimg,cokeimg,brownieimg,cheesecakeimg,cheeseimg, juiceimg;
    LinearLayout applelayout,bostonrolllayout,carrotlayout,frenchtoastlayout,meatarmlayout, medisaladlayout,noodlelayout,mixedsaladlayout, onionringslayout,orangelayout,porklayout,mixedrolllayout, salmonsushilayout,souplayout,squidlayout,cokelayout,brownielayout,cheesecakelayout,cheeselayout, juicelayout;
    TextView appletext,bostonrolltext,carrottext,frenchtoasttext,meatarmtext, medisaladtext,noodletext,mixedsaladtext, onionringstext,orangetext,porktext,mixedrolltext, salmonsushitext,souptext,squidtext,coketext,brownietext,cheesecaketext,cheesetext, juicetext;
    int gamestar = 3;
    private static final int REQUEST_CODE = 0;
    //app's Google plus page URL
    // private static final String APPURL = "https://play.google.com/store/apps/details?id=YOUR_APPLICATION_PACKAGE_NAME";
    private static final String APPURL = "https://play.google.com/store/apps/developer?id=Facebook&hl=tr";
    final int[] gamestarcounter= {0};

    double db1 = 0;
    double db2 = 0;

    LinearLayout watermelonlayout;
    LinearLayout tomatolayout;
    LinearLayout pumpkinlayout;
    LinearLayout peeslayout;
    LinearLayout kiwilayout;
    LinearLayout hotdoglayout;
    LinearLayout cornlayout;
    LinearLayout cookielayout;
    LinearLayout chilislayout;
    LinearLayout broccolilayout;
    LinearLayout bananalayout;
    LinearLayout regional1layout;
    LinearLayout regional2layout;
    LinearLayout regional3layout;
    LinearLayout regional4layout;
    LinearLayout regional5layout;
    LinearLayout regional6layout;
    LinearLayout siskebaplayout;

    LinearLayout drinks1layout;
    LinearLayout drinks2layout;
    LinearLayout drinks3layout;
    LinearLayout drinks4layout;
    LinearLayout drinks5layout;
    LinearLayout drinks6layout;

    LinearLayout desert1layout;
    LinearLayout desert2layout;
    LinearLayout desert3layout;
    LinearLayout desert4layout;
    LinearLayout desert5layout;
    LinearLayout desert6layout;

    LinearLayout soap1layout;
    LinearLayout soap2layout;
    LinearLayout hamburgerlayout;
    LinearLayout greensoaplayout;
    LinearLayout cellspongelayout;
    LinearLayout darkspongelayout;
    LinearLayout seaspongelayout;

    LinearLayout sleeppotionlayout;
    LinearLayout hungerpotionlayout;
    LinearLayout hygienepotionlayout;
    LinearLayout lovepotionlayout;
    LinearLayout gamepotionlayout;
    LinearLayout allinpotionlayout;

    LinearLayout frenchfireslayout;
    LinearLayout chickenleglayout;
    LinearLayout fishlayout;
    final Boolean[] mutestate = {false};

    TextView watermelontext;
    TextView tomatotext;
    TextView pumpkintext;
    TextView peestext;
    TextView kiwitext;
    TextView hotdogtext;
    TextView corntext;
    TextView cookietext;
    TextView chilistext;
    TextView broccolitext;
    TextView bananatext;
    TextView regional1text;
    TextView regional2text;
    TextView regional3text;
    TextView regional4text;
    TextView regional5text;
    TextView regional6text;
    TextView siskebaptext;

    TextView drinks1text;
    TextView drinks2text;
    TextView drinks3text;
    TextView drinks4text;
    TextView drinks5text;
    TextView drinks6text;

    TextView desert1text;
    TextView desert2text;
    TextView desert3text;
    TextView desert4text;
    TextView desert5text;
    TextView desert6text;

    TextView soap1text;
    TextView soap2text;
    TextView hamburgertext;
    TextView greensoaptext;
    TextView cellspongetext;
    TextView darkspongetext;
    TextView seaspongetext;
    TextView frenchfriestext;
    TextView chcikenlegtext;
    TextView fishtext;

    TextView sleeppotiontext;
    TextView hungerpotiontext;
    TextView hygienepotiontext;
    TextView lovepotiontext;
    TextView gamepotiontext;
    TextView allinpotiontext;


    LikeView likeView;
    CallbackManager callbackManager;
    Button rel;
    Boolean submitscore=false;

    PlusOneButton mPbutton_standard;
    int hamburgerindex =3;
    int frenchfriesindex =4;
    int chickenlegindex =5;
    int fishindex = 6;
    int appleindex= 7;
    int bostonrollindex=8;
    int carrotindex = 9;
    int frenchtoastindex=10;
    int meatarmindex=11;
    int medisaladindex=12;
    int noodleindex=13;
    int mixedsaladindex=14;
    int onionringsindex=15;
    int orangeindex=16;
    int porkindex=17;
    int mixedrollindex=18;
    int salmonsushiindex=19;
    int soupindex=20;
    int squidindex=21;
    int cokeindex=22;
    int brownieindex=23;
    int cheesecakeindex=24;
    int cheeseindex=25;
    int juiceindex=26;
    int greensoapindex = 27;
    int cellspongeindex=28;
    int darkspongeindex=29;
    int seaspongeindex=30;
    int sleeppotionindex=31;
    int hungerpotionindex = 32;
    int hygienepotionindex=33;
    int lovepotionindex=34;
    int gamepotionindex=35;
    int alarmId = 11;
    int watermelonindex=36;
    int tomatoindex=37;
    int pumpkinindex=38;
    int peesindex=39;
    int kiwiindex=40;
    int hotdogindex=41;
    int cornindex=42;
    int cookieindex=43;
    int chilisindex=44;
    int broccoliindex=45;
    int bananaindex=46;
    int regional1index=47;
    int regional2index=48;
    int regional3index=49;
    int regional4index=50;
    int regional5index=51;
    int regional6index=53;
    int siskebapindex=54;
    int firststart = 0;
    int drinks1index=55;
    int drinks2index=56;
    int drinks3index=57;
    int drinks4index=58;
    int drinks5index=59;
    int drinks6index=60;

    int desert1index=61;
    int desert2index=62;
    int desert3index=63;
    int desert4index=64;
    int desert5index=65;
    int desert6index=66;

    int soap1index=67;
    int soap2index=68;
    int allinpotionindex=69;

    boolean gonconnected =false;
    int difference = 0;
    Button btnStartProgress;
    ProgressDialog progressBar;
    private int progressBarStatus = 0;
    private Handler progressBarHandler = new Handler();
    final boolean sleepbuttonpressed[] = {false};
    private long fileSize = 0;
    final int frameheight=450;
    FrameLayout  veggie,lin,r1;
    final int[] mProgressStatus = {0};
    Resources res;
    final Random r = new Random();
     FrameLayout f,fbottom,fr;
    int meatcount=0;
    int mealcounter=100;
    int meatcounter=0;
    int coincount = 300;
    int meatindex =1;
    int vegetableindex =3;

    int [] gamestarcounter2 = {0};
    int pizzaindex =2;
    int[] marketarray = new int[200];
    int[] marketarraystore = new int[200];
    int[] marketarraystore2 = new int[200];
    TextView textmeat;
    TextView textpizza;
    final int[] mode= {1};
    int vegetablecount=0;
    int pizzacount=0;

    boolean gamestarflag = false;







   // final VunglePub vunglePub = VunglePub.getInstance();
    final int i1 = (r.nextInt(3) + 0);
    final int heart_speed[] = {1000};
    final int sleep[] = {70};
    float width1,height1;
    //final int heart_count[] = {}
    int firstlevel[] = {0, 0};
    int bladderlevel[] = {0, 0};
    int hygienelevel[] = {0, 0};
    int iq = 0;
    final int[] process = {50,50,50,50,50,50};
    private int soundID;
    private int soundID2;
    private int soundID3;
    private int soundID4;
    private int soundID5;
    private int soundID6;
    private int soundID7;
    private int soundID8;
    int wakeupcount = 0;
    int RPM = heart_speed[0] / 1000 * 80;
    private ImageView button_sbm;
     ImageView meaticonimg;
    private ImageButton button_sbm2;
    private ImageButton button_sbm3;
    private Button button_sbm4;
    private ImageView button_sbm5;
    final boolean eatbtnpressed[] = {false};
    final boolean sleepfinished[] = {false};
    private int SleepStatus = 0;
    int GreenColor = R.color.circular_progress_default_progress;
    final int coin[] = {30};
    int COLORGAME_REQUEST = 1001;
    int   MEMORY_REQUEST = 10002;
    int SIMPGAME_REQUEST = 10003;
    int SORTING_REQUEST = 10006;
    int PICKCOLOR_REQUEST = 100007;
    private static final String TAG = "BeGenerous";
    final int kitchencount = 1;
    final int sleepcnt =2;
    final int kidneycount=3;
    final int hygienecount =4;
    final int gamecount=5;
    Boolean mainsignin = false;
    int REQUEST_LEADERBOARD=100111;
    BitmapFactory.Options options;
    int pupilleftxstore=0;
    int pupilleftystore=0;
    int pupilleftx1store=0;
    int pupillefty1store=0;
    int pupilrightxstore=0;
    int pupilrightystore=0;
    int pupilrighty1store=0;
    int pupilrightx1store=0;
    int mouthxstore =0;
    int mouthystore =0;
    int mouthx1store=0;
    int mouthy1store=0;
    int lefteyexstore =0;
    int lefteyeystore = 0;
    int lefteyex1store = 0;
    int lefteyey1store = 0;
    int    pupilerror;
    int righteyexstore = 0;
    int righteyeystore = 0;
    int righteyex1store = 0;
    int righteyey1store = 0;
    int originalcounter= 0;

    int originalcounterhunger= 0;
    int originalcounterhygiene= 0;
    int originalcounterwc= 0;
    int originalcountersleep= 0;
    int originalcounterlove= 0;



    Bitmap pupilleftsensor,pupilrightsensor,resizedBitmapsensor;
    int pupilleftxstore2=0;
    int pupilleftystore2=0;
    int pupilleftx1store2=0;
    int pupillefty1store2=0;
    int pupilrightxstore2=0;
    int pupilrightystore2=0;
    int pupilrighty1store2=0;
    int pupilrightx1store2=0;

    int chinxstore=0;
    int chinx1store=0;
    int chinystore=0;
    int chiny1store=0;

    Bitmap use1 = null;
    Bitmap use2 = null;
    Bitmap use3 = null;
    Bitmap use4 = null;
    MediaPlayer optionaudio;
    String CharacterName;
    int newgame;
    //com.lylc.widget.circularprogressbar.R.styleable.cpb_progressColor = R.color.circular_progress_default_progress_green;

    private PowerManager.WakeLock mWakeLock;



    public String getFacebookPageURL(Context context) {
        PackageManager packageManager = context.getPackageManager();
        try {
            int versionCode = packageManager.getPackageInfo("com.facebook.katana", 0).versionCode;
            if (versionCode >= 3002850) { //newer versions of fb app
                return "fb://facewebmodal/f?href=" + FACEBOOK_URL;
            } else { //older versions of fb app
                return "fb://page/" + FACEBOOK_PAGE_ID;
            }
        } catch (PackageManager.NameNotFoundException e) {
            return FACEBOOK_URL; //normal web url
        }
    }

  /*  private final com.vungle.publisher.EventListener vungleListener = new com.vungle.publisher.EventListener(){

        @Deprecated
        @Override
        public void onVideoView(boolean isCompletedView, int watchedMillis, int videoDurationMillis) {
            // This method is deprecated and will be removed. Please do not use it.
            // Please use onAdEnd instead.
        }
        @Override
        public void onAdStart() {
            // Called before playing an ad
        }

        @Override
        public void onAdEnd(boolean wasSuccessfulView, boolean wasCallToActionClicked) {
            // Called when the user leaves the ad and control is returned to your application
            // if wasSuccessfulView is true, the user watched the ad and should be rewarded
            // (if this was a rewarded ad).
// if wasCallToActionClicked is true, the user clicked the call to action
            // button in the ad.
        }

        @Override
        public void onAdPlayableChanged(boolean isAdPlayable) {
            // Called when the playability state changes. if isAdPlayable is true, you can now
            // play an ad.
            // If false, you cannot yet play an ad.
        }

        @Override
        public void onAdUnavailable(String reason) {
            adcolonytext = reason;
            // Called when VunglePub.playAd() was called, but no ad was available to play
        }

    };*/


    @Override
    protected void onStart() {
        super.onStart();
      //  MoPub.onStart(this);
        FlurryAgent.onStartSession(this);
        // fetch and prepare ad for this ad space. won’t render one yet
       // mFlurryAdBanner.fetchAd();

        SharedPreferences shared1 = getSharedPreferences("info", MODE_PRIVATE);
        //interstitialnew.load();
        mainsignin=shared1.getBoolean("mainsignin",mainsignin);

        if (!mInSignInFlow && !mExplicitSignOut && mainsignin==true && !mGoogleApiClient.isConnected() ) {
             //auto sign in
            mGoogleApiClient.connect();


        }

    }

    private void requestNewInterstitial() {
        AdRequest adRequest = new AdRequest.Builder()
                .addTestDevice("SEE_YOUR_LOGCAT_TO_GET_YOUR_DEVICE_ID")
                .build();

     //   mInterstitialAd.loadAd(adRequest);
    }



    @Override
    public void onBillingInitialized() {

    }

    @Override
    public void onProductPurchased(String productId, TransactionDetails details) {
        SharedPreferences pref;
        pref = getSharedPreferences("info", MODE_PRIVATE);
        final SharedPreferences.Editor editor = pref.edit();
        final Button questionplus5game = (Button) findViewById(R.id.questionplus5);
        final Button questionunlockiq = (Button) findViewById(R.id.questionunlock );
        final Button questionnodd = (Button) findViewById(R.id.questionnoadd);
        final Button questionmult2 = (Button) findViewById(R.id.questionmult2);
        final TextView textquestion = (TextView) findViewById(R.id.textView872);






       if (BILLINGSTATE == PURCHASE1000 || productId == "coin1000") {
           final TextView tcoin = (TextView) findViewById(R.id.textcoin);
           coin[0] = coin[0] + 10000;
           coinflip();
           tcoin.setText(Integer.toString(coin[0]));

           bp.consumePurchase("coin1000");
           editor.putInt("coin",coin[0]);
           editor.commit();
           final MediaPlayer clickaudio = MediaPlayer.create(getApplicationContext(), R.raw.coinabove10);
           if (!mutestate[0]) {
               clickaudio.start();
               clickaudio.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                   public void onCompletion(MediaPlayer mp) {
                       clickaudio.release();

                   }

                   ;
               });
           }
           BILLINGSTATE = 0;
       }

        if (BILLINGSTATE == PURCHASE500 || productId == "coin500") {
            final TextView tcoin = (TextView) findViewById(R.id.textcoin);
            coin[0] = coin[0] + 5000;
            coinflip();
            tcoin.setText(Integer.toString(coin[0]));
            bp.consumePurchase("coin500");
            editor.putInt("coin",coin[0]);
            editor.commit();
            final MediaPlayer clickaudio = MediaPlayer.create(getApplicationContext(), R.raw.coinabove10);
            if (!mutestate[0]) {
                clickaudio.start();
                clickaudio.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                    public void onCompletion(MediaPlayer mp) {
                        clickaudio.release();

                    }

                    ;
                });
            }
            BILLINGSTATE = 0;
        }

        if (BILLINGSTATE == PURCHASE200 || productId == "coin200") {
            final TextView tcoin = (TextView) findViewById(R.id.textcoin);
            coin[0] = coin[0] + 2000;

            bp.consumePurchase("coin200");
            coinflip();
            tcoin.setText(Integer.toString(coin[0]));
            editor.putInt("coin",coin[0]);
            editor.commit();
            final MediaPlayer clickaudio = MediaPlayer.create(getApplicationContext(), R.raw.coinabove10);
            if (!mutestate[0]) {
                clickaudio.start();
                clickaudio.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                    public void onCompletion(MediaPlayer mp) {
                        clickaudio.release();

                    }

                    ;
                });
            }
            BILLINGSTATE = 0;
        }


        if (BILLINGSTATE == MULTCOIN2 || productId == "mult2") {

            final RelativeLayout mult2layout = (RelativeLayout) findViewById(R.id.mult2);
            final Button mult2image = (Button) findViewById(R.id.imagemult2);
            final Button mult2button = (Button) findViewById(R.id.mult2button);
            final RelativeLayout mult2layout2 = (RelativeLayout) findViewById(R.id.mult22);
            mult2flag=true;
            //lock();
            showalert(MULTCOIN2);

            editor.putBoolean("mult2flag", true);
            editor.commit();
            mult2layout2.setEnabled(false);
            mult2button.setEnabled(false);
           mult2image.setEnabled(false);

            mult2layout2.setAlpha(0.33f);
            mult2button.setAlpha(0.33f);
            mult2image.setAlpha(0.33f);
            questionmult2.setAlpha(0.33f);
            questionmult2.setEnabled(false);
        }



        if (BILLINGSTATE == UNLOCKIQ || productId == "unluckiq") {

            final RelativeLayout unlcokiqlayout = (RelativeLayout) findViewById(R.id.unlockiq);
            final Button unlcokiqimage = (Button) findViewById(R.id.imageunlockiq);
            final Button unlockiqbutton = (Button) findViewById(R.id.unlockiqbutton);
            final RelativeLayout unlockiqlayout2 = (RelativeLayout) findViewById(R.id.unlockiq2);
            unlockiqflag=true;
            lock();
            showalert(UNLOCKIQ);

            editor.putBoolean("unlockiqflag", true);
            editor.commit();
            unlockiqlayout2.setEnabled(false);
            unlockiqbutton.setEnabled(false);
            unlcokiqimage.setEnabled(false);

            unlockiqlayout2.setAlpha(0.33f);
            unlockiqbutton.setAlpha(0.33f);
            unlcokiqimage.setAlpha(0.33f);
            questionunlockiq.setAlpha(0.33f);
            questionunlockiq.setEnabled(false);
        }

        if (BILLINGSTATE == PLUS5GAME || productId == "plus5game")
        {

            final RelativeLayout plusgame = (RelativeLayout) findViewById(R.id.plusgamerel);


            final RelativeLayout plusgamelayout = (RelativeLayout) findViewById(R.id.coinlayoutplus5game);
            final Button plusgamel1 = (Button) findViewById(R.id.plusgameimg);
            final Button plusgamel2 = (Button) findViewById(R.id.plusgamebutton);
            MAXGAMEPLAY = 5;
            gamestar=5;
            plus5gameflag = true;
            showalert(PLUS5GAME);

            editor.putBoolean("plus5gameflag", plus5gameflag);
            editor.putInt("gamestar", gamestar);
            editor.putInt("MAXGAMEPLAY", MAXGAMEPLAY);
            editor.commit();
            plusgame.setEnabled(false);
            plusgamel1.setEnabled(false);
            plusgamel2.setEnabled(false);
            plusgame.setAlpha(0.33f);
            plusgamel1.setAlpha(0.33f);
            plusgamel2.setAlpha(0.33f);
            questionplus5game.setAlpha(0.33f);
            questionplus5game.setEnabled(false);

        }

        if (BILLINGSTATE == NOADD || productId == "noadd") {

            final RelativeLayout coin10 = (RelativeLayout) findViewById(R.id.coin10rel);


            final RelativeLayout coin10layout = (RelativeLayout) findViewById(R.id.coinlayoutcoin10);
            final Button coin10l1 = (Button) findViewById(R.id.coin10img);
            final Button coin10l2 = (Button) findViewById(R.id.coin10button);
            adflag = true;






            showalert(NOADD);

            editor.putBoolean("adflag", true);
            editor.commit();

            addfunction();
            coin10.setEnabled(false);
            coin10l1.setEnabled(false);
            coin10l2.setEnabled(false);
            coin10.setAlpha(0.33f);
            coin10l1.setAlpha(0.33f);
            coin10l2.setAlpha(0.33f);
            questionnodd.setAlpha(0.33f);
            questionnodd.setEnabled(false);
        }





    }

    @Override
    public void onBillingError(int errorCode, Throwable error) {

    }

    @Override
    public void onPurchaseHistoryRestored() {


    }
    ServiceConnection mServiceConn = new ServiceConnection() {
        @Override
        public void onServiceDisconnected(ComponentName name) {
            mService = null;
        }

        @Override
        public void onServiceConnected(ComponentName name,
                                       IBinder service) {
            mService = IInAppBillingService.Stub.asInterface(service);
        }
    };


    String base64EncodedPublicKey = "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAoAGY3CL6BvTO/cwRLZ4D3O5w5B21ZO/ThlQNeJz7Cfj8vLC8+NzUxcO82JbHsuxAj1Wg0tTmuCdHUld0gt84enT+rjOqFuFC+7wFbCyWuM+grrM0DZUTP2wJF2IhGbZqFVDHbVBp2eutw8yaPzspvr3kadtUteMCLcNSdgMgKo+X/zEJ9z1rVhTVV+TmB3egpC7UVHkOW09oChFGe9e+kYXNAeDh5MWNgdbdvlDgFCY15nIaLDGRs8pLqaYYrtyod+1mXp0NGnHcvOpUJrWiHVfnFwSl0ZnXKGr3L8CQxLuL7LBoTqeR6HQ8ITKLCVdEbAqm87rFMYmwwK9WpQSI0wIDAQAB";


    @Override
    public void onConnected(Bundle connectionHint) {
        Log.d(TAG, "onConnected() called. Sign in successful!");
        //showSignOutBar();
        //checkPlayerStats();
        gonconnected = true;
       // mLastLocation = LocationServices.FusedLocationApi.getLastLocation(
        //        mGoogleApiClient);
        if (connectionHint != null) {
            ArrayList<GameRequest> requests;
            // Do we have any requests pending? (getGameRequestsFromBundle never returns null
            requests = Games.Requests.getGameRequestsFromBundle(connectionHint);
            if (!requests.isEmpty()) {
                // We have requests in onConnected's connectionHint.
                Log.d(TAG, "onConnected: connection hint has " + requests.size() + " request(s)");
            }
            Log.d(TAG, "===========\nRequests count " + requests.size());
            // Use regular handler
            //handleRequests(requests);
        }
        findViewById(R.id.sign_in_button).setVisibility(View.INVISIBLE);
        findViewById(R.id.buttongooglesign).setVisibility(View.INVISIBLE);
        findViewById(R.id.testImagebrain).setVisibility(View.INVISIBLE);

        // findViewById(R.id.sign_out_button).setVisibility(View.VISIBLE);
        // findViewById(R.id.buttongooglesignout).setVisibility(View.VISIBLE);

        findViewById(R.id.button29).setVisibility(View.VISIBLE);
        findViewById(R.id.buttongoogleleader).setVisibility(View.VISIBLE);
        findViewById(R.id.testImagebrain2).setVisibility(View.VISIBLE);
        final TextView edittext13 = (TextView) findViewById(R.id.editText13);

        SharedPreferences shared = getSharedPreferences("info", MODE_PRIVATE);

        submitscore=shared.getBoolean("submitscore", submitscore);

        iq = shared.getInt("iq", iq);
        Games.Leaderboards.submitScore(mGoogleApiClient, getString(R.string.leaderboard_id), iq);
        submitscore=true;



       // String ranking= Games.Leaderboards.
        // Our sample displays the request counts.
        //updateRequestCounts();
        final String accountName = Plus.AccountApi.getAccountName(mGoogleApiClient);
        Log.i(TAG, "#onConnected - GoogleApiClient accountName=" + accountName);



        Person me = Plus.PeopleApi.getCurrentPerson(mGoogleApiClient);
        SharedPreferences pref;
        pref = getSharedPreferences("info", MODE_PRIVATE);
//Using putXXX - with XXX is type data you want to write like: putString, putInt...   from      Editor object
        SharedPreferences.Editor editor = pref.edit();

/*        if(me.isDataValid()) {
            if (me.getName() != null) {

                Person.Name name = me.getName();
                String given = name.getGivenName();
                String family = name.getFamilyName();


                Log.d(TAG, "Given: " + given + ", Family: " + family);


                editor.putString("chname", given + family);
            }

        }*/


       /* Games.Leaderboards.loadCurrentPlayerLeaderboardScore(mGoogleApiClient, getResources().getString(R.string.leaderboard_id), LeaderboardVariant.TIME_SPAN_ALL_TIME, LeaderboardVariant.COLLECTION_PUBLIC).setResultCallback(new ResultCallback<Leaderboards.LoadPlayerScoreResult>() {
            @Override
            public void onResult(final Leaderboards.LoadPlayerScoreResult scoreResult) {

                int rank = (int) scoreResult.getScore().getRank();

                GoogleId = GoogleId + " (" + Long.toString(rank) + ")";
                //rank1[0]=rank;
                //debug2.setText(Long.toString(rank));
                edittext13.setText(GoogleId);
            }
        });*/





    /*    new CountDownTimer(4000, 10) {
            public void onTick(long milsec) {

            }

            public void onFinish() {
if(mGoogleApiClient.isConnected()){

    Games.Leaderboards.loadCurrentPlayerLeaderboardScore(mGoogleApiClient, getResources().getString(R.string.leaderboard_id), LeaderboardVariant.TIME_SPAN_ALL_TIME, LeaderboardVariant.COLLECTION_PUBLIC).setResultCallback(new ResultCallback<Leaderboards.LoadPlayerScoreResult>() {
        @Override
        public void onResult(final Leaderboards.LoadPlayerScoreResult scoreResult) {


            if(scoreResult.getScore()!=null)
            {
                int rank = (int) scoreResult.getScore().getRank();

                GoogleId = GoogleId + " (" + Long.toString(rank) + ")";
                //rank1[0]=rank;
                //debug2.setText(Long.toString(rank));
                edittext13.setText(GoogleId);}
        }
    });
               }
            }
        }.start();*/



        Player p = Games.Players.getCurrentPlayer(mGoogleApiClient);
        String displayName= p.getDisplayName();

        GoogleId=displayName;

        edittext13.setText(GoogleId);

        editor.putBoolean("submitscore", submitscore);
        editor.putString("lastname", displayName);
        TextView name2 = (TextView) findViewById(R.id.name);
        //CharacterName=given + " " + family;
        //name2.setText(CharacterName);
        final TextView debug2 = (TextView) findViewById(R.id.textView132);

        final int[] rank1 = {0};


        Games.Leaderboards.loadCurrentPlayerLeaderboardScore(mGoogleApiClient, getResources().getString(R.string.leaderboard_id), LeaderboardVariant.TIME_SPAN_ALL_TIME, LeaderboardVariant.COLLECTION_PUBLIC).setResultCallback(new ResultCallback<Leaderboards.LoadPlayerScoreResult>() {
            @Override
            public void onResult(final Leaderboards.LoadPlayerScoreResult scoreResult) {


                if(scoreResult.getScore()!=null)
                {
                    int rank = (int) scoreResult.getScore().getRank();

                    if (rank > 0 )
                    {GoogleId = GoogleId + " (" + Long.toString(rank) + ")";
                    //rank1[0]=rank;
                    //debug2.setText(Long.toString(rank));
                    edittext13.setText(GoogleId);}}
            }
        });


         editor.commit();

        if(mGoogleApiClient.isConnected()) {
            if (googlesigninbtnflg == true) {
                startActivityForResult(Games.Leaderboards.getLeaderboardIntent(mGoogleApiClient,
                        getString(R.string.leaderboard_id)), REQUEST_LEADERBOARD);
                googlesigninbtnflg = false;
            }
        }
    }

    @Override
    public void onConnectionSuspended(int i) {
        // Attempt to reconnect
        mGoogleApiClient.connect();
    }
    @Override
    public void onConnectionFailed(ConnectionResult connectionResult) {

        Log.d(TAG, "onConnectionFailed() called, result: " + connectionResult);

        if (mResolvingConnectionFailure) {
            Log.d(TAG, "onConnectionFailed() ignoring connection failure; already resolving.");
            return;
        }

        // If the sign in button was clicked or if auto sign-in is enabled,
        // launch the sign-in flow
        if (mSignInClicked || mAutoStartSignInflow) {
            mAutoStartSignInflow = false;
            mSignInClicked = false;
            mResolvingConnectionFailure = true;

            // Attempt to resolve the connection failure using BaseGameUtils.
            // The R.string.signin_other_error value should reference a generic
            // error string in your strings.xml file, such as "There was
            // an issue with sign in, please try again later."
            if (!BaseGameUtils.resolveConnectionFailure(this,
                    mGoogleApiClient, connectionResult,
                    RC_SIGN_IN, "signerorr")) {
                mResolvingConnectionFailure = false;
            }
        }



        mSignInClicked = true;
        mGoogleApiClient.connect();

        // Put code here to display the sign-in button
    }

    void disablevieww()

    {
       final FrameLayout r1 = (FrameLayout) findViewById(R.id.yigit);
        final HorizontalScrollView kitchenhor = (HorizontalScrollView) findViewById(R.id.kitchenlayoutscroll);
        final RelativeLayout sleeplayout = (RelativeLayout) findViewById(R.id.bedroomlayout);

        r1.setEnabled(false);
        kitchenhor.setEnabled(false);
        sleeplayout.setEnabled(false);

        for (int i = 0; i < r1.getChildCount(); i++) {
            View child = r1.getChildAt(i);
            child.setEnabled(false);
        }

        for (int i = 0; i < kitchenhor.getChildCount(); i++) {
            View child = kitchenhor.getChildAt(i);
            child.setEnabled(false);
        }
        for (int i = 0; i < sleeplayout.getChildCount(); i++) {
            View child = sleeplayout.getChildAt(i);
            child.setEnabled(false);
        }


    }








    final private String TAG2 = "AdColonyDemo";


    @Override
    protected void onResume()

    {
        //bp = new BillingProcessor(this, "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAoAGY3CL6BvTO/cwRLZ4D3O5w5B21ZO/ThlQNeJz7Cfj8vLC8+NzUxcO82JbHsuxAj1Wg0tTmuCdHUld0gt84enT+rjOqFuFC+7wFbCyWuM+grrM0DZUTP2wJF2IhGbZqFVDHbVBp2eutw8yaPzspvr3kadtUteMCLcNSdgMgKo+X/zEJ9z1rVhTVV+TmB3egpC7UVHkOW09oChFGe9e+kYXNAeDh5MWNgdbdvlDgFCY15nIaLDGRs8pLqaYYrtyod+1mXp0NGnHcvOpUJrWiHVfnFwSl0ZnXKGr3L8CQxLuL7LBoTqeR6HQ8ITKLCVdEbAqm87rFMYmwwK9WpQSI0wIDAQAB", this);

       // bp.consumePurchase("android.test.purchased");

        mWakeLock.acquire();
        final Button sharepicture = (Button) findViewById(R.id.button8);
        sharepicture.setEnabled(true);

      //  getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,
        //        WindowManager.LayoutParams.FLAG_FULLSCREEN);

        getWindow().addFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN);


        getWindow().getDecorView().setSystemUiVisibility(
                //        View.SYSTEM_UI_FLAG_LAYOUT_STABLE
                View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION
                        //View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN
                        | View.SYSTEM_UI_FLAG_HIDE_NAVIGATION // hide nav bar
                        | View.SYSTEM_UI_FLAG_FULLSCREEN // hide status bar
                        | View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY);

       /* if (mAdView != null) {
        mAdView.resume();
    }*/
        super.onResume();



       /* if (ad2 == null || ad2.isExpired())
        {



            AdColony.requestInterstitial( ZONE_ID2, listener2, ad_options2 );
        }*/


     //   vunglePub.onResume();
        //interstitialnew.load();

        fly();
        setVolumeControlStream(AudioManager.STREAM_MUSIC);
//        set.playSequentially();
  //      set.start();
      //  mPbutton_standard.initialize(APPURL, REQUEST_CODE);
        SharedPreferences shared1 = getSharedPreferences("info", MODE_PRIVATE);
        newgame=shared1.getInt("newgame",0);
        coin[0]=shared1.getInt("coin",coin[0]);

        TextView t = (TextView) findViewById(R.id.textcoin);
        t.setText(Integer.toString(coin[0]));


    //    if(newgame ==1) {    if(newgame ==1) {
            intent = new Intent(this, MyService.class);
            pintent = PendingIntent
                    .getBroadcast(this, 10, intent, 0);

        cancelalarm();

        final CircularProgressBar c1 = (CircularProgressBar) findViewById(R.id.circularprogressbar1);
            final CircularProgressBar c2 = (CircularProgressBar) findViewById(R.id.circularprogressbar2);
            final CircularProgressBar c3 = (CircularProgressBar) findViewById(R.id.circularprogressbar3);
        final CircularProgressBar cfour = (CircularProgressBar) findViewById(R.id.circularprogressbarfour);

        //csix control for love
        final CircularProgressBar csix = (CircularProgressBar) findViewById(R.id.circularprogressbar6);

        //// Dynamically assign alarm ids for multiple alarms
        Intent service = new Intent(this, MyService.class);  //your Intent localIntent = new Intent("com.test.sample");
        //intent.putExtra("alarmId", alarmId); // So we can catch the id on BroadcastReceiver
        PendingIntent alarmIntent;
        alarmIntent = PendingIntent.getBroadcast(this,
                alarmId, service,
                0);
        AlarmManager am = (AlarmManager) this.getSystemService(Context.ALARM_SERVICE);

        am.cancel(alarmIntent);

          Intent intentnew =  new Intent(this, MyService.class);intentnew.setAction("STOP");

          //  stopService(intentnew);

          //  this.stopService(new Intent(getBaseContext(), alarmService.class));
        SharedPreferences shared = getSharedPreferences("info", MODE_PRIVATE);
//Using getXXX- with XX is type date you wrote to file "name_file"
       /* process[0] = shared.getInt("procss0key", 101);
        process[1] = shared.getInt("procss1key", 101);
        process[2] = shared.getInt("procss2key", 101);
        process[3] = shared.getInt("procss3key", 101);
        process[4] = shared.getInt("procss4key", 101);*/
            iqplusone = shared.getBoolean("iqplusone", false);
            //isplustencoin=shared.getBoolean("isplustencoin", false);

          //  process[5] = shared.getInt("procss5key", 101);
            //gamestar = shared.getInt("gamestar", gamestar);
            MAXGAMEPLAY = shared.getInt("MAXGAMEPLAY", MAXGAMEPLAY);
            TextView maxigameplay = ( TextView) findViewById(R.id.textviewgamepotion);
            maxigameplay.setText(Integer.toString(MAXGAMEPLAY));
            TextView t1t = (TextView) findViewById(R.id.textView13);

            final TextView debug = (TextView) findViewById(R.id.textView131);
            final TextView debug2 = (TextView) findViewById(R.id.textView132);

           // debug.setText(Integer.toString(gamestar));

            //debug.setText(Integer.toString(gamestar));

            iq = shared.getInt("iq", iq);
            final TextView iqnum = (TextView) findViewById(R.id.textiq);
            iqnum.setText(Integer.toString(iq));

            boolean sl= shared.getBoolean("sleep",false);
            sleepbuttonpressed[0]=   sl;

            long timeservice=0;

            timeservice = shared.getLong("time", timeservice);
            Long timeservice2 = shared.getLong("time2", 0);
            facebookgo = shared.getBoolean("facebookgo", facebookgo);
            GoodlegO = shared.getBoolean("GoodlegO", GoodlegO);
            instago = shared.getBoolean("instago", instago);
            twittergo = shared.getBoolean("twittergo", instago);
        facecoin = shared.getBoolean("facecoin", facecoin);
        googlecoin = shared.getBoolean("googlecoin", googlecoin);
        instacoin = shared.getBoolean("instacoin", instacoin);
        twitcoin = shared.getBoolean("twitcoin", twitcoin);
        gamestarflag = shared.getBoolean("gamestarflag", gamestarflag);
        videogo = shared.getBoolean("videogo", videogo);
        unlockiqflag = shared.getBoolean("unlockiqflag", unlockiqflag);
        mult2flag = shared.getBoolean("mult2flag", mult2flag);
        plus5gameflag = shared.getBoolean("plus5gameflag", plus5gameflag);
        adflag = shared.getBoolean("adflag", adflag);

        SharedPreferences pref;
        pref = getSharedPreferences("info", MODE_PRIVATE);
//Using putXXX - with XXX is type data you want to write like: putString, putInt...   from      Editor object
        final SharedPreferences.Editor editor = pref.edit();


        final FrameLayout disableallchild = (FrameLayout) findViewById(R.id.draglayout);
        final RelativeLayout pluscoinlayout = (RelativeLayout) findViewById(R.id.pluscoinlayout2);

        final RelativeLayout coinwarning = (RelativeLayout) findViewById(R.id.coinwarning);




                if (GoodlegO || instago || facebookgo ||twittergo) {




                    TextView tcoinamount = (TextView) findViewById(R.id.coinamount2);

                    pluscoinlayout.setVisibility(View.VISIBLE);
                    tcoinamount.setText("+" + Integer.toString(50));

                    final Animation shake = AnimationUtils.loadAnimation(GameforActivity.this, R.anim.lefttoright);
                    coinbackpressflag = false;
                    final MediaPlayer clickaudio2 = MediaPlayer.create(getApplicationContext(), R.raw.popupsound);
                    if (!mutestate[0]) {
                        clickaudio2.start();
                        clickaudio2.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                            public void onCompletion(MediaPlayer mp) {
                                clickaudio2.release();

                            }

                            ;
                        });
                    }
                    shake.setDuration(SLIDEANIMDUR);
                    disableallchild.setVisibility(View.VISIBLE);
                    pluscoinlayout.setAnimation(shake);


                }




                final long time1[] = {10000};

                time1[0] = System.currentTimeMillis();

                time1[0] = time1[0] / 1000;
                gamestarcounter[0] = shared.getInt("gamestarcounter", gamestarcounter[0]);
                long diff2 = time1[0] - timeservice2 + gamestarcounter[0];


                long diff = time1[0] - timeservice;
                originalcounter = shared.getInt("originalcounter", originalcounter);

                originalcounter = originalcounter + (int) diff;
                if (mProgressStatus[0] > 50) hygienespeed = ABOVE50TIME;
                else hygienespeed = BELOW50TIME;
                final float density1 = Resources.getSystem().getDisplayMetrics().density;
                final RelativeLayout headermenu = (RelativeLayout) findViewById(R.id.Heading);
                headermenu.getLayoutParams().height = (int) (density1*50);


                double div = diff / hygienespeed;
                int div1 = (int) div;

          /*  process[0]= process[0]-div1;
            process[1]= process[1]-div1;
            process[2]= process[2]-div1;
            if (sleepbuttonpressed[0]==true ) process[3] = process[3] + div1;
            else process[3] = process[3] - div1;
            process[4]= process[4]-div1;
            process[5]= process[5]-div1;*/

                double gamdiv = (double) diff2 / (double) gamewaittime;
                int div2 = (int) gamdiv;
                double gamdiv2 = (double) diff2 % (double) gamewaittime;

                int div3 = (int) gamdiv2;
                if (!mutestate[0] && optionsound) {
                    optionaudio.start();
                    optionaudio.setLooping(true);
                }
                Sensor Accel = sensore.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);
                // register this class as a listener for the orientation and accelerometer sensors
                sensore.registerListener((SensorEventListener) this, Accel, SENSORTYPE);

        //disableallchild.setVisibility(View.INVISIBLE);
        enablegamebtns();

                // db1 = gamdiv;
                //db2 = diff2;
/*
            TextView debug3 = (TextView) findViewById(R.id.textView133);
            TextView debug4 = (TextView) findViewById(R.id.textView134);

            debug3.setText(Double.toString(gamdiv));
            debug4.setText(Double.toString(diff2));*/



          /*  gamestarcounter[0]= (int) diff2;

            if((gamestar+div2) <=MAXGAMEPLAY)
                gamestar = gamestar+div2;
            else gamestar=MAXGAMEPLAY;*/

                // editor.putInt("gamestar", gamestar);
                // editor.commit();
         /*   speedincrement2(c2, process[1] + 1, process[1], 1);
            speedincrement3(c3, process[2] + 1, process[2], 2);
            speedincrement5(csix, process[5] + 1, process[5], 5);
            speedincrement(c1, process[0] + 1, process[0], 0);
            speedincrement4(cfour, process[3] + 1, process[3], 3);



        checkoverall();*/


    }
    public boolean isServerReachable()
    // To check if server is reachable
    {
        String customURL = "https://play.google.com/store";
        try {
            HttpURLConnection.setFollowRedirects(false);
            HttpURLConnection con =  (HttpURLConnection) new URL(customURL).openConnection();
            con.setRequestMethod("HEAD");
            return (con.getResponseCode() == HttpURLConnection.HTTP_OK);
        }
        catch (Exception e) {
            e.printStackTrace();
            return false;
        }
    }

    void noadsalert()

    {
        AlertDialog alertDialog = new AlertDialog.Builder(GameforActivity.this).create();
        String warningtext = "";
        String messagetext = "";
        String oktext = "";

        if (gamelang == ENGLISH) {
            warningtext = "Warning";
            messagetext = "Ads are not available";
            oktext = "OK";

        } else if (gamelang == TURKISH) {
            warningtext = "UYARI";
            messagetext = "Reklamlar şu an gösterilemiyor.";
            oktext = "TAMAM";

        } else if (gamelang == FRENCH) {
            warningtext = "ATTENTION";
            messagetext = "Les annonces ne sont pas disponibles.";
            oktext = "D'accord";

        } else if (gamelang == SPANISH) {
            warningtext = "ADVERTENCIA";
            messagetext = "Los anuncios no están disponibles";
            oktext = "BUENO";

        } else if (gamelang == RUSSIAN) {
            warningtext = "ПРЕДУПРЕЖДЕНИЕ";
            messagetext = "объявления не доступны";
            oktext = "ХОРОШО";

        } else if (gamelang == CHINESE) {
            warningtext = "警告";
            messagetext = "广告不可用";
            oktext = "好";

        } else if (gamelang == JAPANESE) {
            warningtext = "警告";
            messagetext = "広告は利用できません";
            oktext = "はい";

        } else if (gamelang == PORTUGUESE) {
            warningtext = "ATENÇÃO";
            messagetext = "Os anúncios não estão disponíveis";
            oktext = "OK";

        } else {
            warningtext = "Warning";
            messagetext = "Ads are not available";
            oktext = "OK";

        }
        alertDialog.setTitle(warningtext);
        alertDialog.setMessage(messagetext);
        alertDialog.setButton(AlertDialog.BUTTON_NEUTRAL, oktext,
                new DialogInterface.OnClickListener() {
                    public void onClick(DialogInterface dialog, int which) {
                        dialog.dismiss();
                    }
                });
        alertDialog.show();
    }

    /**
     * Listener for receiving notifications during the lifecycle of an interstitial.
     */

    void alertbox()

    {
        AlertDialog alertDialog = new AlertDialog.Builder(GameforActivity.this).create();
        String warningtext = "";
        String messagetext = "";
        String oktext = "";

        if (gamelang == ENGLISH) {
                    warningtext = "Warning";
                    messagetext = "No Internet Connection";
                    oktext = "OK";

        }

        else if (gamelang == TURKISH) {
            warningtext = "UYARI";
            messagetext = "İnternet bağlantısı yok";
            oktext = "TAMAM";

        }
        else if (gamelang == FRENCH) {
            warningtext = "ATTENTION";
            messagetext = "Pas de connexion Internet";
            oktext = "D'accord";

        }
        else if (gamelang == SPANISH) {
            warningtext = "ADVERTENCIA";
            messagetext = "Sin conexión a Internet";
            oktext = "BUENO";

        }
        else if (gamelang == RUSSIAN) {
            warningtext = "ПРЕДУПРЕЖДЕНИЕ";
            messagetext = "Нет соединения с интернетом";
            oktext = "ХОРОШО";

        }
        else if (gamelang == CHINESE) {
            warningtext = "警告";
            messagetext = "沒有網絡連接";
            oktext = "好";

        }
        else if (gamelang == JAPANESE) {
            warningtext = "警告";
            messagetext = "インターネットに接続していない";
            oktext = "はい";

        }
        else if (gamelang == PORTUGUESE) {
            warningtext = "ATENÇÃO";
            messagetext = "Sem ligação à Internet";
            oktext = "OK";

        }
        else{
            warningtext = "Warning";
            messagetext = "No Internet Connection";
            oktext = "OK";

        }


        alertDialog.setTitle(warningtext);
        alertDialog.setMessage(messagetext);
        alertDialog.setButton(AlertDialog.BUTTON_NEUTRAL, oktext,
                new DialogInterface.OnClickListener() {
                    public void onClick(DialogInterface dialog, int which) {
                        dialog.dismiss();
                    }
                });
        alertDialog.show();
    }
   // private final MediatedAdViewController mediatedAdViewController;

    public interface BannerAdListener {
        /**
         * Called to notify that an ad was successfully loaded.
         *
         * @param ad
         */
        public void onAdLoadSucceeded(InMobiBanner ad);
        /**
         * Called to notify that a request to load an ad failed.
         *
         * @param ad
         * @param status
         */
        public void onAdLoadFailed(InMobiBanner ad, InMobiAdRequestStatus status);

        /**
         * Called to notify that the banner ad was displayed
         *
         * @param ad
         */
        public void onAdDisplayed(InMobiBanner ad);
        /**
         * Called to notify that the User is about to return to the application
         * after closing the ad.
         *
         * @param ad
         */
        public void onAdDismissed(InMobiBanner ad);
        /**
         * Called to notify that the user interacted with the ad.
         *
         * @param ad
         * @param params
         */
        public void onAdInteraction(InMobiBanner ad, Map<Object, Object> params);
        /**
         * Called to notify that the user is about to leave the application as a
         * result of interacting with the ad.
         *
         * @param ad
         */
        public void onUserLeftApplication(InMobiBanner ad);
        /**
         * Called to notify that an action for an incentivised ad was completed.
         *
         * @param ad
         * @param rewards
         */
        public void onAdRewardActionCompleted(InMobiBanner ad, Map<Object, Object> rewards);
    }

    public void onConnectSuccess()
    {
        //The SDK is now connected.
        //We can start preloading our placements now that we are connected
       // TJPlacementListener placementListener = myPlacementListener;
    //    TJPlacement p = new TJPlacement(this, "MyPlacementName", placementListener);
    }


    void showad3()
    {

        if(mobInterstitial3.isReady() ) mobInterstitial3.show();
        else mobInterstitial3.load();

    }





    void showad2()
    {

        if(mobInterstitial2.isReady() ) mobInterstitial2.show();
        else mobInterstitial2.load();

    }

    void showad()
    {
       if(mobInterstitial.isReady() ) mobInterstitial.show();
        else mobInterstitial.load();
    }



    //InMobiInterstitial interstitialAd;
    void init2() {
        // interstitialAd = new InMobiInterstitial(GameforActivity.this, 1483042341761L, mInterstitialListener);
    }
    /*void prepareGameLevel() {
        interstitialAd.load();
    }
    void handleGameLevelCompleted() {
        if (mCanShowAd) interstitialAd.show();
    }
    void checkgoogleplaystore()
    {


    }*/
    AudioManager   audioManager;
    float actVolume,maxVolume,volume;

    public void onAccuracyChanged(Sensor sensor, int accuracy) {
        //Log.d(tag,"onAccuracyChanged: " + sensor + ", accuracy: " + accuracy);
    }


void reload()
{



}
    private RelativeLayout mBanner;
    //private FlurryAdBanner mFlurryAdBanner = null;
    private String mAdSpaceName = "vivo2";
    InMobiInterstitial interstitialnew;



    InMobiBanner bannerAd2;
    boolean adviewflag = false;
    private com.facebook.ads.AdView adViewface;

   /* private void userClickedToWatchAd() {

      if(MoPub.hasRewardedVideo("382d75a874a1489fac2fa11ee2f68357"));

        MoPub.showRewardedVideo("382d75a874a1489fac2fa11ee2f68357");
    }
    private void loadRewardedVideo() {
        MoPub.loadRewardedVideo("382d75a874a1489fac2fa11ee2f68357");
    }*/
   void speedup()

   {
       pulse2.reset();
       pulse.reset();


       reset.reset();
       heartimage.clearAnimation();
       heartimage.setAnimation(null);



       pulse2 = AnimationUtils.loadAnimation(GameforActivity.this, R.anim.scale2);
       //pulse2.setRepeatCount(5);

       printspeedupheartbeat();
       if( heartbeat<201 &&  heartbeat>= 80 ) pulse2.setDuration(400);
       else if( heartbeat<80 &&  heartbeat>= 70 ) pulse2.setDuration(500);
       else if( heartbeat<70 &&  heartbeat>= 60 ) pulse2.setDuration(650);
       else  if( heartbeat<60 &&  heartbeat>= 50 ) pulse2.setDuration(800);
       else  pulse2.setDuration(1000);




       pulse2.setAnimationListener(new Animation.AnimationListener() {
           @Override
           public void onAnimationStart(Animation animation) {
               speedupcounter++;


           }

           @Override
           public void onAnimationEnd(Animation animation) {
               //t = (ImageView) findViewById(R.id.imageView);



               slowdown();




           }

           @Override
           public void onAnimationRepeat(Animation animation) {
               // printspeedupheartbeat();

           }
       });

       heartimage.startAnimation(pulse2);

   }



    void slowdown()

    {

        heartimage.clearAnimation();
        heartimage.setAnimation(null);
        reset = AnimationUtils.loadAnimation(GameforActivity.this, R.anim.slowdown);


        if( heartbeat<201 &&  heartbeat>= 80 ) reset.setDuration(400);
        else if( heartbeat<80 &&  heartbeat>= 70 ) reset.setDuration(500);
        else if( heartbeat<70 &&  heartbeat>= 60 ) reset.setDuration(650);
        else  if( heartbeat<60 &&  heartbeat>= 50 ) reset.setDuration(800);
        else  pulse.setDuration(1000);

        heartimage.startAnimation(reset);



        reset.setAnimationListener(new Animation.AnimationListener() {
            @Override
            public void onAnimationStart(Animation animation) {

                printslowdownheartbeat();

            }

            @Override
            public void onAnimationEnd(Animation animation) {




                if (heartbeat <= initialheartrate) heartbeat();
                else slowdown();



                // heartbeat();
            }

            @Override
            public void onAnimationRepeat(Animation animation) {

                //  printslowdownheartbeat();
            }
        });

    }




    void heartbeat()
    {

        heartimage.clearAnimation();
        heartimage.setAnimation(null);


        if( heartbeat<201 &&  heartbeat>= 80 ) pulse.setDuration(400);
        else if( heartbeat<80 &&  heartbeat>= 70 ) pulse.setDuration(500);
        else if( heartbeat<70 &&  heartbeat>= 60 ) pulse.setDuration(650);
        else  if( heartbeat<60 &&  heartbeat>= 50 ) pulse.setDuration(800);
        else  pulse.setDuration(1000);







        pulse.setAnimationListener(new Animation.AnimationListener() {
            @Override
            public void onAnimationStart(Animation animation) {

                printheartbeat();

            }

            @Override
            public void onAnimationEnd(Animation animation) {




                if( heartbeat<201 &&  heartbeat>= 80 ) pulse.setDuration(400);
                else if( heartbeat<80 &&  heartbeat>= 70 ) pulse.setDuration(500);
                else if( heartbeat<70 &&  heartbeat>= 60 ) pulse.setDuration(650);
                else  if( heartbeat<60 &&  heartbeat>= 50 ) pulse.setDuration(800);
                else  pulse.setDuration(1000);



                heartimage.startAnimation(pulse);
            }

            @Override
            public void onAnimationRepeat(Animation animation) {

                //printheartbeat();
            }
        });

        heartimage.startAnimation(pulse);

    }

    int randomi3 = 1;
    void printheartbeat()

    {


        if( mProgressStatus[0]<201 &&  mProgressStatus[0]>= 98 ) heartbeat = 80 + randomi3;
        else if( mProgressStatus[0]<98 &&  mProgressStatus[0]>= 95 ) heartbeat = 79 + randomi3;
        else if( mProgressStatus[0]<95 &&  mProgressStatus[0]>= 92 ) heartbeat = 78 + randomi3;
        else if( mProgressStatus[0]<92 &&  mProgressStatus[0]>= 89 ) heartbeat = 77 + randomi3;
        else if( mProgressStatus[0]<89 &&  mProgressStatus[0]>= 86 ) heartbeat = 76 + randomi3;
        else if( mProgressStatus[0]<86 &&  mProgressStatus[0]>= 83 ) heartbeat = 75 + randomi3;
        else if( mProgressStatus[0]<83 &&  mProgressStatus[0]>= 80 ) heartbeat = 74 + randomi3;
        else if( mProgressStatus[0]<80 &&  mProgressStatus[0]>= 77 ) heartbeat = 73 + randomi3;
        else if( mProgressStatus[0]<77 &&  mProgressStatus[0]>= 74 ) heartbeat = 72 + randomi3;
        else if( mProgressStatus[0]<74 &&  mProgressStatus[0]>= 71 ) heartbeat = 71 + randomi3;
        else if( mProgressStatus[0]<71 &&  mProgressStatus[0]>= 68 ) heartbeat = 70 + randomi3;
        else if( mProgressStatus[0]<68 &&  mProgressStatus[0]>= 65 ) heartbeat = 69 + randomi3;
        else if( mProgressStatus[0]<65 &&  mProgressStatus[0]>= 62 ) heartbeat = 68 + randomi3;
        else if( mProgressStatus[0]<62 &&  mProgressStatus[0]>= 59 ) heartbeat = 67 + randomi3;
        else if( mProgressStatus[0]<59 &&  mProgressStatus[0]>= 56 ) heartbeat = 66 + randomi3;
        else if( mProgressStatus[0]<56 &&  mProgressStatus[0]>= 53 ) heartbeat = 65 + randomi3;
        else if( mProgressStatus[0]<53 &&  mProgressStatus[0]>= 50 ) heartbeat = 64 + randomi3;

        else  heartbeat = 63 + randomi3;


        initialheartrate = heartbeat;
        SharedPreferences pref;
        pref = getSharedPreferences("info", MODE_PRIVATE);
//Using putXXX - with XXX is type data you want to write like: putString, putInt...   from      Editor object
        final SharedPreferences.Editor editor = pref.edit();


        editor.putInt("heartbeatrate",heartbeat);
        editor.commit();

        heartratet2.setText(Integer.toString(heartbeat));

    }

    void printspeedupheartbeat()
    {
        Random r = new Random();
        int i3 = (r.nextInt(3) + 1);


        heartbeat = heartbeat + i3;

        if (heartbeat >= 120) heartbeat = 120;

        heartratet2.setText(Integer.toString(heartbeat));
        touchcount =  touchcount + 1 ;
        SharedPreferences pref;
        pref = getSharedPreferences("info", MODE_PRIVATE);
//Using putXXX - with XXX is type data you want to write like: putString, putInt...   from      Editor object
        final SharedPreferences.Editor editor = pref.edit();
        editor.putInt("heartbeatrate",heartbeat);
        editor.commit();
    }

    void printslowdownheartbeat()
    {

        Random r = new Random();
        int i3 = (r.nextInt(3) + 2);


        heartbeat = heartbeat- 1;

        heartratet2.setText(Integer.toString(heartbeat));
        SharedPreferences pref;
        pref = getSharedPreferences("info", MODE_PRIVATE);
//Using putXXX - with XXX is type data you want to write like: putString, putInt...   from      Editor object
        final SharedPreferences.Editor editor = pref.edit();
        editor.putInt("heartbeatrate",heartbeat);
        editor.commit();

    }
    int margin = 0;
    boolean rateflag = true;
    public void showRateDialogForRate(final Context context) {


        SharedPreferences shared = getSharedPreferences("info", MODE_PRIVATE);
        gamelang = shared.getInt("gamelang", NONE);
        // Inflate and set the layout for the dialog
        // Pass null as the parent view because its going in the dialog
        // layout

        String message = "<font color='#000000'>Please, rate Vivo at Google Play Store</font>";
        String title = "<font color='#000000'>Rate Vivo</font>";
        String rate = "RATE NOW";
        String thanks = "NO, THANKS";
        String later = "RATE LATER";

  if (gamelang == ENGLISH) {
       message = "<font color='#000000'>If you like Vivo, please encourage us for creating new games.</font>";
       title = "<font color='#000000'>Vivo</font>";
       rate = "Rate";
       thanks = "No, Thanks";
       later = "Later";
      margin = 140;
  }
      else  if (gamelang == TURKISH) {
            message = "<font color='#000000'>Eğer Vivo'yu sevdiysen, bizi yeni oyunlar yaratmak için cesaretlendirin.</font>";
            title = "<font color='#000000'>Vivo</font>";
            rate = "Oyla";
            thanks = "Hayır, Teşekkürler";
            later = "Sonra";
            margin = 0;
        }

  else  if (gamelang == FRENCH) {
      message = "<font color='#000000'>Si vous aimez Vivo, encouragez-nous à créer de nouveaux jeux.</font>";
      title = "<font color='#000000'>Vivo</font>";
      rate = "Évaluer";
      thanks = "Non, Mercı";
      later = "Plus Tard";
      margin = 35;
  }
  else  if (gamelang == SPANISH) {
      message = "<font color='#000000'>Si te gusta Vivo, nos animan a crear nuevos juegos por favor.</font>";
      title = "<font color='#000000'>Vivo</font>";
      rate = "CLASIFICAR";
      thanks = "NO, GRACIAS";
      later = "MÁS TARDE";
      margin = 0;
  }

  else  if (gamelang == RUSSIAN) {
      message = "<font color='#000000'>Если вы любите Vivo, пожалуйста, побуждают нас к созданию новых игр.</font>";
      title = "<font color='#000000'>Vivo</font>";
      rate = "OЦЕНИВАТЬ";
      thanks = "НЕТ, CCПАСИБО";
      later = "ПОЗЖЕ";
      margin = 0;
  }

  else  if (gamelang == CHINESE) {
      message = "<font color='#000000'>如果你喜欢Vivo，请鼓励我们创建新游戏.</font>";
      title = "<font color='#000000'>Vivo</font>";
      rate = "估价";
      thanks = "不用了，谢谢";
      later = "后来";
      margin = 90;
  }

  else  if (gamelang == JAPANESE) {
      message = "<font color='#000000'>Vivoが好きな人は、新しいゲームを作成するようにお勧めします.</font>";
      title = "<font color='#000000'>Vivoを評価する</font>";
      rate = "レートする";
      thanks = "結構です";
      later = "後で";
      margin = 160;
  }

  else  if (gamelang == PORTUGUESE) {
      message = "<font color='#000000'>Se você gosta do Vivo, por favor incentive-nos a criar novos jogos.</font>";
      title = "<font color='#000000'>Vivo</font>";
      rate = "AVALIAR";
      thanks = "NÃO, OBRIGADO";
      later = "MAIS TARDE";
      margin = 0;
  }
       else {
      message = "<font color='#000000'>If you like Vivo, please encourage us for creating new games.</font>";
      title = "<font color='#000000'>Vivo</font>";
      rate = "Rate";
      thanks = "No, Thanks";
      later = "Later";
      margin = 140;
  }


        SharedPreferences pref;
        pref = getSharedPreferences("info", MODE_PRIVATE);
        final SharedPreferences.Editor editor = pref.edit();



        AlertDialog.Builder builder = new AlertDialog.Builder(context)

                .setMessage(Html.fromHtml(message))

                .setTitle(Html.fromHtml(title))
                .setIcon(R.mipmap.vivoentsmall2)
                .setPositiveButton(rate, new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        if (context != null) {
                            ////////////////////////////////
                            Uri uri = Uri.parse("market://details?id=" + context.getPackageName());
                            Intent goToMarket = new Intent(Intent.ACTION_VIEW, uri);
                            rateflag = false;
                            showrateflag = false;
                            editor.putBoolean("rateflag",rateflag);
                            editor.commit();
                            // To count with Play market backstack, After pressing back button,
                            // to taken back to our application, we need to add following flags to intent.
                            goToMarket.addFlags(Intent.FLAG_ACTIVITY_NO_HISTORY |
                                    Intent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET |
                                    Intent.FLAG_ACTIVITY_MULTIPLE_TASK);
                            try {
                                context.startActivity(goToMarket);
                            } catch (ActivityNotFoundException e) {
                                context.startActivity(new Intent(Intent.ACTION_VIEW,
                                        Uri.parse("http://play.google.com/store/apps/details?id=" + context.getPackageName())));
                            }


                        }
                    }
                })
                .setNegativeButton(later, new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialogInterface, int i) {
                                showrateflag = false;
                    }
                })
                .setNeutralButton(thanks,new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialogInterface, int i) {
                        rateflag = false;
                        showrateflag = false;
                        editor.putBoolean("rateflag",rateflag);
                        editor.commit();
                    }
                });

       // builder.show();


        AlertDialog dialog = builder.create();

// Make some UI changes for AlertDialog
        dialog.setOnShowListener(new DialogInterface.OnShowListener() {
            @Override
            public void onShow(final DialogInterface dialog) {

                // Add or create your own background drawable for AlertDialog window
                Window view = ((AlertDialog)dialog).getWindow();
                view.setBackgroundDrawableResource(R.mipmap.whiterect);






                // Customize POSITIVE, NEGATIVE and NEUTRAL buttons.
                Button positiveButton = ((AlertDialog)dialog).getButton(DialogInterface.BUTTON_POSITIVE);
                Button negativeButton = ((AlertDialog)dialog).getButton(DialogInterface.BUTTON_NEGATIVE);
                Button neutralButton = ((AlertDialog)dialog).getButton(DialogInterface.BUTTON_NEUTRAL);
                //positiveButton.setTextColor(Color.BLUE);



                positiveButton.setTypeface(Typeface.DEFAULT_BOLD);

                positiveButton.invalidate();



               // negativeButton.setTextColor(Color.BLUE);
                negativeButton.setTypeface(Typeface.DEFAULT_BOLD);
                LinearLayout.LayoutParams negativeButtonLL = (LinearLayout.LayoutParams) negativeButton.getLayoutParams();
                negativeButtonLL.rightMargin = margin;

                negativeButton.setLayoutParams(negativeButtonLL);
                negativeButton.invalidate();


               // neutralButton.setTextColor(Color.BLUE);
                neutralButton.setTypeface(Typeface.DEFAULT_BOLD);
                neutralButton.invalidate();
            }
        });


dialog.show();

        }
    String photoPatheyes = "";
    boolean ratetimeflag = true;
   int ratecount = 0;
    boolean showrateflag = false;
    private FirebaseAnalytics mFirebaseAnalytics;


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        this.requestWindowFeature(Window.FEATURE_NO_TITLE);

        mFirebaseAnalytics = FirebaseAnalytics.getInstance(this);

        mFirebaseAnalytics.setAnalyticsCollectionEnabled(true);
        mFirebaseAnalytics.setMinimumSessionDuration(20000);







        final SharedPreferences shared1 = getSharedPreferences("info", MODE_PRIVATE);
        newgame = shared1.getInt("newgame", 0);
        gamelang = shared1.getInt("gamelang", NONE);
        mGoogleApiClient = new GoogleApiClient.Builder(this)
                .addConnectionCallbacks(this)
                .addOnConnectionFailedListener(this)
                .addApi(Plus.API).addScope(Plus.SCOPE_PLUS_LOGIN)
                .addApi(Games.API).addScope(Games.SCOPE_GAMES)
                .build();

        new FlurryAgent.Builder()
                .withLogEnabled(true)
                //.withListener(flurryListener)
                .build(this, "9ZKCJ88J5KM8TYNRB29P");

       // FacebookSdk.sdkInitialize(getApplicationContext());
        AppEventsLogger.activateApp(this);


      /*  Bundle params = new Bundle();
        params.putString("image_name", "gameactivity");
        params.putString("full_text", "gameactivity");
        mFirebaseAnalytics.logEvent("gameactivity", params);*/





// App.setAppLinkData(appLinkData);


/*
        FlurryAdBannerListener bannerAdListener2 = new FlurryAdBannerListener() {

            @Override
            public void onClicked(FlurryAdBanner adBanner) {

            }

            //This method will be called when the user dismisses the current Ad for the provided Ad Space name.
            @Override
            public void onCloseFullscreen(FlurryAdBanner adBanner) {

            }

            //This method will be called when the ad has been received from the server
            @Override
            public void onFetched(FlurryAdBanner adBanner) {
                adBanner.displayAd();
            }

            //This method will be called when ad is successfully rendered.
            @Override
            public void onRendered(FlurryAdBanner adBanner) {

            }

            //This method will be called when the user has opened the ad.
            @Override
            public void onShowFullscreen(FlurryAdBanner adBanner) {

            }

            //This method will be called when the user is leaving the application after following
            //events associated with the current Ad in the provided Ad Space name.
            @Override
            public void onAppExit(FlurryAdBanner adBanner) {

            }


            //This method will be called when fetch, render or click failed.
            @Override
            public void onError(FlurryAdBanner adBanner, FlurryAdErrorType adErrorType, int errorCode) {

                Log.d("InMobi", Integer.toString(errorCode ));
                adBanner.destroy();
            }
            @Override
            public void onVideoCompleted(FlurryAdBanner adBanner){}
            //..
            //the remainder of the listener callback methods
        };

*/
        String tapjoySDKKey= "Y7QPE0jKSr-riU6hmAwW7QECzCjnIJMzlMaz8XEmeP1l1ac6H9BvR1MhDYOP";

       // MoPub.initializeRewardedVideo(this);
       // loadRewardedVideo();
      //  userClickedToWatchAd();
   /*    Hashtable<String, Object> connectFlags = new Hashtable<String, Object>();
        connectFlags.put(TapjoyConnectFlag.ENABLE_LOGGING, "true");
        Tapjoy.connect(getApplicationContext(), tapjoySDKKey, connectFlags, new TJConnectListener() {
            @Override
            public void onConnectSuccess() {
                onConnectSuccess();
            }

            @Override
            public void onConnectFailure() {
              //  onConnectFail();
            }
        });*/



     /*   InMobiSdk.init(GameforActivity.this, "d41341fdb5ae437c8e112cb06b20f294");
        InMobiSdk.setAge(18);
        InMobiSdk.setLogLevel(InMobiSdk.LogLevel.DEBUG);
        InMobiSdk.setIncome(10000);
       // InMobiSdk.setEthnicity(InMobiSdk.kIMSDKEthnicityAfricanAmerican);
// ‘this’ is used to specify context, replace it with the appropriate context as needed.
         // interstitialnew = new InMobiInterstitial(this, 1483042341761L, new InMobiInterstitial.InterstitialAdListener() {
        interstitialnew = new InMobiInterstitial(this, 2483042341761L, new InMobiInterstitial.InterstitialAdListener() {
            @Override
            public void onAdRewardActionCompleted(InMobiInterstitial ad, Map rewards) {}
            @Override
            public void onAdDisplayed(InMobiInterstitial ad) {}
            @Override
            public void onAdDismissed(InMobiInterstitial ad) {}
            @Override
            public void onAdInteraction(InMobiInterstitial ad, Map params) {}
            @Override
            public void onAdLoadSucceeded(final InMobiInterstitial ad) {}
            @Override
            public void onAdLoadFailed(InMobiInterstitial ad, InMobiAdRequestStatus requestStatus) {



            }
            @Override
            public void onUserLeftApplication(InMobiInterstitial ad){}
        });
        interstitialnew.load();
      //   bannerAd2 = new InMobiBanner(GameforActivity.this, 1482077181481L);

        bannerAd2 = new InMobiBanner(GameforActivity.this, 2282077181481L);*/


       // InMobiInterstitial interstitialAd = new InMobiInterstitial(GameforActivity.this, 1483042341761, mInterstitialAdListener2);
       // prepareGameLevel();

     /*   getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,
                WindowManager.LayoutParams.FLAG_FULLSCREEN);*/
        getWindow().addFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN);

        getWindow().getDecorView().setSystemUiVisibility(
                //        View.SYSTEM_UI_FLAG_LAYOUT_STABLE
                View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION
                        //View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN
                        | View.SYSTEM_UI_FLAG_HIDE_NAVIGATION // hide nav bar
                        | View.SYSTEM_UI_FLAG_FULLSCREEN // hide status bar
                        | View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY);


        super.onCreate(savedInstanceState);











      /*  AppRate.with(this)
                .setInstallDays(0) // default 10, 0 means install day.
                .setLaunchTimes(0) // default 10
                .setRemindInterval(2) // default 1
                .setShowLaterButton(true) // default true
                .setDebug(false) // default false
                .setOnClickButtonListener(new OnClickButtonListener() { // callback listener.
                    @Override
                    public void onClickButton(int which) {
                        Log.d(MainActivity.class.getName(), Integer.toString(which));
                    }
                })
                .monitor();

        // Show a dialog if meets conditions
        AppRate.showRateDialogIfMeetsConditions(this);
*/


   /*     View decorView = getWindow().getDecorView();
        decorView.setOnSystemUiVisibilityChangeListener
                (new View.OnSystemUiVisibilityChangeListener() {
                    @Override
                    public void onSystemUiVisibilityChange(int visibility) {
                        // Note that system bars will only be "visible" if none of the
                        // LOW_PROFILE, HIDE_NAVIGATION, or FULLSCREEN flags are set.
                        if ((visibility & View.SYSTEM_UI_FLAG_FULLSCREEN) == 0) {
                            getWindow().getDecorView().setSystemUiVisibility(
                                    //        View.SYSTEM_UI_FLAG_LAYOUT_STABLE
                                    View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION
                                            //View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN
                                            | View.SYSTEM_UI_FLAG_HIDE_NAVIGATION // hide nav bar
                                            | View.SYSTEM_UI_FLAG_FULLSCREEN // hide status bar
                                            | View.SYSTEM_UI_FLAG_IMMERSIVE);
                        } else {
                             getWindow().getDecorView().setSystemUiVisibility(
                                    //        View.SYSTEM_UI_FLAG_LAYOUT_STABLE
                                    View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION
                                            //View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN
                                            | View.SYSTEM_UI_FLAG_HIDE_NAVIGATION // hide nav bar
                                            | View.SYSTEM_UI_FLAG_FULLSCREEN // hide status bar
                                            | View.SYSTEM_UI_FLAG_IMMERSIVE);
                        }
                    }
                });



        new CountDownTimer(30000, 2000) {

            public void onTick(long millisUntilFinished) {
                getWindow().getDecorView().setSystemUiVisibility(
                        //        View.SYSTEM_UI_FLAG_LAYOUT_STABLE
                        View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION
                                //View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN
                                | View.SYSTEM_UI_FLAG_HIDE_NAVIGATION // hide nav bar
                                | View.SYSTEM_UI_FLAG_FULLSCREEN // hide status bar
                                | View.SYSTEM_UI_FLAG_IMMERSIVE);
            }

            public void onFinish() {

            }

        }.start();*/


        new CountDownTimer(30000, 3000) {

            public void onTick(long millisUntilFinished) {
                getWindow().getDecorView().setSystemUiVisibility(
                        //        View.SYSTEM_UI_FLAG_LAYOUT_STABLE
                        View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION
                                //View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN
                                | View.SYSTEM_UI_FLAG_HIDE_NAVIGATION // hide nav bar
                                | View.SYSTEM_UI_FLAG_FULLSCREEN // hide status bar
                                | View.SYSTEM_UI_FLAG_IMMERSIVE);
            }

            public void onFinish() {

            }

        }.start();


        PowerManager pm = (PowerManager)getSystemService(Context.POWER_SERVICE);
        mWakeLock = pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK , "Partil Wake Lock");

        new CountDownTimer(1000000000, 5000) {

            public void onTick(long millisUntilFinished) {
                if (isOnline())
                    loadaddds();
            }

            public void onFinish() {


            }

        }.start();


           audioManager = (AudioManager) getSystemService(AUDIO_SERVICE);

          actVolume = (float) audioManager.getStreamVolume(AudioManager.STREAM_MUSIC);

          maxVolume = (float) audioManager.getStreamMaxVolume(AudioManager.STREAM_MUSIC);

          volume = actVolume / maxVolume;



        soundPoolbubble = new SoundPool(10, AudioManager.STREAM_MUSIC, 0);

        soundPoolbubble.setOnLoadCompleteListener(new SoundPool.OnLoadCompleteListener() {

            @Override

            public void onLoadComplete(SoundPool soundPool, int sampleId, int status) {



            }

        });

        soundPool = new SoundPool(10, AudioManager.STREAM_MUSIC, 0);

        soundPool.setOnLoadCompleteListener(new SoundPool.OnLoadCompleteListener() {

            @Override

            public void onLoadComplete(SoundPool soundPool, int sampleId, int status) {



            }

        });
        soundPool2 = new SoundPool(10, AudioManager.STREAM_MUSIC, 0);

        soundPool2.setOnLoadCompleteListener(new SoundPool.OnLoadCompleteListener() {

            @Override

            public void onLoadComplete(SoundPool soundPool2, int sampleId, int status) {



            }

        });

        soundPool3 = new SoundPool(10, AudioManager.STREAM_MUSIC, 0);

        soundPool3.setOnLoadCompleteListener(new SoundPool.OnLoadCompleteListener() {

            @Override

            public void onLoadComplete(SoundPool soundPool2, int sampleId, int status) {



            }

        });

        soundPool4 = new SoundPool(10, AudioManager.STREAM_MUSIC, 0);

        soundPool4.setOnLoadCompleteListener(new SoundPool.OnLoadCompleteListener() {

            @Override

            public void onLoadComplete(SoundPool soundPool2, int sampleId, int status) {



            }

        });

        soundPool5 = new SoundPool(10, AudioManager.STREAM_MUSIC, 0);

        soundPool5.setOnLoadCompleteListener(new SoundPool.OnLoadCompleteListener() {

            @Override

            public void onLoadComplete(SoundPool soundPool2, int sampleId, int status) {



            }

        });
        soundPool6 = new SoundPool(10, AudioManager.STREAM_MUSIC, 0);

        soundPool6.setOnLoadCompleteListener(new SoundPool.OnLoadCompleteListener() {

            @Override

            public void onLoadComplete(SoundPool soundPool2, int sampleId, int status) {



            }

        });

        soundPool7wakeup = new SoundPool(10, AudioManager.STREAM_MUSIC, 0);

        soundPool7wakeup.setOnLoadCompleteListener(new SoundPool.OnLoadCompleteListener() {

            @Override

            public void onLoadComplete(SoundPool soundPool2, int sampleId, int status) {



            }

        });

        soundID = soundPool.load(this, R.raw.click2017, 1);
        soundID2 = soundPool2.load(this, R.raw.washhand, 1);
        soundID3 = soundPool3.load(this, R.raw.kiss, 1);
        soundID4 = soundPool4.load(this, R.raw.flush, 1);
        soundID6 = soundPool6.load(this, R.raw.coinbelow10, 1);
        soundID7 = soundPool7wakeup.load(this, R.raw.wakeup, 1);
        soundID8 = soundPoolbubble.load(this, R.raw.bubbles, 1);
        SharedPreferences shared6 = getSharedPreferences("info", MODE_PRIVATE);
        setVolumeControlStream(AudioManager.STREAM_MUSIC);
        mainsignin = shared6.getBoolean("mainsignin", mainsignin);
        wakeupcount = shared6.getInt("wakeupcount",wakeupcount);
        meaticonimg = new ImageView(this);
        //int id1= onCreateView.generateViewId();
        meaticonimg.setId(R.id.layout1);

        //appleimg,bostonrollimg,carrotimg,frenchtoastimg,meatarmimg, medisaladimg,noodleimg,mixedsaladimg, onionringsv,orangeimg,porkimg,mixedrollimg, salmonsushiimg,soupimg,squidimg,cokeimg,brownieimg,cheesecakeimg,cheeseimg, juiceimg;

        appleimg = new ImageView(this);
        bostonrollimg = new ImageView(this);
        carrotimg = new ImageView(this);
        frenchtoastimg = new ImageView(this);
        meatarmimg = new ImageView(this);
        medisaladimg = new ImageView(this);
        noodleimg = new ImageView(this);
        mixedsaladimg = new ImageView(this);
        onionringimg = new ImageView(this);
        orangeimg = new ImageView(this);
        porkimg = new ImageView(this);
        mixedrollimg = new ImageView(this);
        salmonsushiimg = new ImageView(this);
        soupimg = new ImageView(this);
        squidimg = new ImageView(this);
        cokeimg = new ImageView(this);
        brownieimg = new ImageView(this);
        cheesecakeimg = new ImageView(this);
        cheeseimg = new ImageView(this);
        juiceimg = new ImageView(this);

        applelayout = new LinearLayout(this);
        bostonrolllayout = new LinearLayout(this);
        carrotlayout = new LinearLayout(this);
        frenchtoastlayout = new LinearLayout(this);
        meatarmlayout = new LinearLayout(this);
        medisaladlayout = new LinearLayout(this);
        noodlelayout = new LinearLayout(this);
        mixedsaladlayout = new LinearLayout(this);
        onionringslayout = new LinearLayout(this);
        orangelayout = new LinearLayout(this);
        porklayout = new LinearLayout(this);
        mixedrolllayout = new LinearLayout(this);
        salmonsushilayout = new LinearLayout(this);
        souplayout = new LinearLayout(this);
        squidlayout = new LinearLayout(this);
        cokelayout = new LinearLayout(this);
        brownielayout = new LinearLayout(this);
        cheesecakelayout = new LinearLayout(this);
        cheeselayout = new LinearLayout(this);
        juicelayout = new LinearLayout(this);


        appletext = new TextView(this);
        bostonrolltext = new TextView(this);
        carrottext = new TextView(this);
        frenchtoasttext = new TextView(this);
        meatarmtext = new TextView(this);
        medisaladtext = new TextView(this);
        noodletext = new TextView(this);
        mixedsaladtext = new TextView(this);
        onionringstext = new TextView(this);
        orangetext = new TextView(this);
        porktext = new TextView(this);
        mixedrolltext = new TextView(this);
        salmonsushitext = new TextView(this);
        souptext = new TextView(this);
        squidtext = new TextView(this);
        coketext = new TextView(this);
        brownietext = new TextView(this);
        cheesecaketext = new TextView(this);
        cheesetext = new TextView(this);
        juicetext = new TextView(this);


        appleimg.setId(R.id.layout7);
        bostonrollimg.setId(R.id.layout8);
        carrotimg.setId(R.id.layout9);
        frenchtoastimg.setId(R.id.layout10);
        meatarmimg.setId(R.id.layout11);
        medisaladimg.setId(R.id.layout12);
        noodleimg.setId(R.id.layout13);
        mixedsaladimg.setId(R.id.layout14);
        onionringimg.setId(R.id.layout15);
        orangeimg.setId(R.id.layout16);
        porkimg.setId(R.id.layout17);
        mixedrollimg.setId(R.id.layout18);
        salmonsushiimg.setId(R.id.layout19);
        soupimg.setId(R.id.layout20);
        squidimg.setId(R.id.layout21);
        cokeimg.setId(R.id.layout22);
        brownieimg.setId(R.id.layout23);
        cheesecakeimg.setId(R.id.layout24);
        cheeseimg.setId(R.id.layout25);
        juiceimg.setId(R.id.layout26);


        linear1 = new LinearLayout(x);
        textmeat = new TextView(this);
        textpizza = new TextView(this);
        pizzalayout = new LinearLayout(x);
        pizzaimp = new ImageView(this);

        watermelonimg = new ImageView(this);
        tomatoimg = new ImageView(this);
        pumpkinimg = new ImageView(this);
        peesimg = new ImageView(this);
        kiwiimg = new ImageView(this);
        hotdogimg = new ImageView(this);
        cornimg = new ImageView(this);
        cookieimg = new ImageView(this);
        chilisimg = new ImageView(this);
        broccoliimg = new ImageView(this);
        bananaimg = new ImageView(this);
        regional1img = new ImageView(this);
        regional2img = new ImageView(this);
        regional3img = new ImageView(this);
        regional4img = new ImageView(this);
        regional5img = new ImageView(this);
        regional6img = new ImageView(this);
        siskebapimg = new ImageView(this);

        drinks1img = new ImageView(this);
        drinks2img = new ImageView(this);
        drinks3img = new ImageView(this);
        drinks4img = new ImageView(this);
        drinks5img = new ImageView(this);
        drinks6img = new ImageView(this);

        desert1img = new ImageView(this);
        desert2img = new ImageView(this);
        desert3img = new ImageView(this);
        desert4img = new ImageView(this);
        desert5img = new ImageView(this);
        desert6img = new ImageView(this);


        hamburgerimg = new ImageView(this);
        greensoapimg = new ImageView(this);
        cellspongeimg = new ImageView(this);
        darkspongeimg = new ImageView(this);
        seaspongeimg = new ImageView(this);
        soap1img = new ImageView(this);
        soap2img = new ImageView(this);
        sleeppotionimg = new ImageView(this);
        hungerpotionimg = new ImageView(this);
        hygienepotionimg = new ImageView(this);
        lovepotionimg = new ImageView(this);
        gamepotionimg = new ImageView(this);
        allinpotionimg = new ImageView(this);
        frenchfriesimg = new ImageView(this);
        chickenlegimg = new ImageView(this);
        fishimg = new ImageView(this);


        watermelonlayout = new LinearLayout(x);
        tomatolayout = new LinearLayout(x);
        pumpkinlayout = new LinearLayout(x);
        peeslayout = new LinearLayout(x);
        kiwilayout = new LinearLayout(x);
        hotdoglayout = new LinearLayout(x);
        cornlayout = new LinearLayout(x);
        cookielayout = new LinearLayout(x);
        chilislayout = new LinearLayout(x);
        broccolilayout = new LinearLayout(x);
        bananalayout = new LinearLayout(x);
        regional1layout = new LinearLayout(x);
        regional2layout = new LinearLayout(x);
        regional3layout = new LinearLayout(x);
        regional4layout = new LinearLayout(x);
        regional5layout = new LinearLayout(x);
        regional6layout = new LinearLayout(x);
        siskebaplayout = new LinearLayout(x);

        drinks1layout = new LinearLayout(x);
        drinks2layout = new LinearLayout(x);
        drinks3layout = new LinearLayout(x);
        drinks4layout = new LinearLayout(x);
        drinks5layout = new LinearLayout(x);
        drinks6layout = new LinearLayout(x);

        desert1layout = new LinearLayout(x);
        desert2layout = new LinearLayout(x);
        desert3layout = new LinearLayout(x);
        desert4layout = new LinearLayout(x);
        desert5layout = new LinearLayout(x);
        desert6layout = new LinearLayout(x);


        hamburgerlayout = new LinearLayout(x);

        sleeppotionlayout = new LinearLayout(x);
        hungerpotionlayout = new LinearLayout(x);
        hygienepotionlayout = new LinearLayout(x);
        lovepotionlayout = new LinearLayout(x);
        gamepotionlayout = new LinearLayout(x);
        allinpotionlayout = new LinearLayout(x);


        greensoaplayout = new LinearLayout(x);
        cellspongelayout = new LinearLayout(x);
        darkspongelayout = new LinearLayout(x);
        seaspongelayout = new LinearLayout(x);
        soap1layout = new LinearLayout(x);
        soap2layout = new LinearLayout(x);
        frenchfireslayout = new LinearLayout(x);
        chickenleglayout = new LinearLayout(x);
        fishlayout = new LinearLayout(x);
        ;


        watermelontext = new TextView(this);
        tomatotext = new TextView(this);
        pumpkintext = new TextView(this);
        peestext = new TextView(this);
        kiwitext = new TextView(this);
        hotdogtext = new TextView(this);
        corntext = new TextView(this);
        cookietext = new TextView(this);
        chilistext = new TextView(this);
        broccolitext = new TextView(this);
        bananatext = new TextView(this);
        regional1text = new TextView(this);
        regional2text = new TextView(this);
        regional3text = new TextView(this);
        regional4text = new TextView(this);
        regional5text = new TextView(this);
        regional6text = new TextView(this);
        siskebaptext = new TextView(this);

        drinks1text = new TextView(this);
        drinks2text = new TextView(this);
        drinks3text = new TextView(this);
        drinks4text = new TextView(this);
        drinks5text = new TextView(this);
        drinks6text = new TextView(this);

        desert1text = new TextView(this);
        desert2text = new TextView(this);
        desert3text = new TextView(this);
        desert4text = new TextView(this);
        desert5text = new TextView(this);
        desert6text = new TextView(this);


        hamburgertext = new TextView(this);
        greensoaptext = new TextView(this);
        cellspongetext = new TextView(this);
        darkspongetext = new TextView(this);
        seaspongetext = new TextView(this);
        soap1text = new TextView(this);
        soap2text = new TextView(this);
        sleeppotiontext = new TextView(this);
        hungerpotiontext = new TextView(this);
        hygienepotiontext = new TextView(this);
        lovepotiontext = new TextView(this);
        gamepotiontext = new TextView(this);
        allinpotiontext = new TextView(this);

        frenchfriestext = new TextView(this);
        chcikenlegtext = new TextView(this);
        fishtext = new TextView(this);


        watermelonimg.setId(R.id.layout36);
        tomatoimg.setId(R.id.layout37);
        pumpkinimg.setId(R.id.layout38);
        peesimg.setId(R.id.layout39);
        kiwiimg.setId(R.id.layout40);
        hotdogimg.setId(R.id.layout41);
        cornimg.setId(R.id.layout42);
        cookieimg.setId(R.id.layout43);
        chilisimg.setId(R.id.layout44);
        broccoliimg.setId(R.id.layout45);
        bananaimg.setId(R.id.layout46);
        regional1img.setId(R.id.layout47);
        regional2img.setId(R.id.layout48);
        regional3img.setId(R.id.layout49);
        regional4img.setId(R.id.layout50);
        regional5img.setId(R.id.layout51);
        regional6img.setId(R.id.layout52);
        siskebapimg.setId(R.id.layout53);

        drinks1img.setId(R.id.layout54);
        drinks2img.setId(R.id.layout55);
        drinks3img.setId(R.id.layout56);
        drinks4img.setId(R.id.layout57);
        drinks5img.setId(R.id.layout58);
        drinks6img.setId(R.id.layout59);

        desert1img.setId(R.id.layout60);
        desert2img.setId(R.id.layout61);
        desert3img.setId(R.id.layout62);
        desert4img.setId(R.id.layout63);
        desert5img.setId(R.id.layout64);
        desert6img.setId(R.id.layout65);


        hamburgerimg.setId(R.id.layout2);
        greensoapimg.setId(R.id.layout27);
        cellspongeimg.setId(R.id.layout28);
        darkspongeimg.setId(R.id.layout29);
        seaspongeimg.setId(R.id.layout30);

        soap1img.setId(R.id.layout67);
        soap2img.setId(R.id.layout68);



        sleeppotionimg.setId(R.id.layout31);
        hungerpotionimg.setId(R.id.layout32);
        hygienepotionimg.setId(R.id.layout33);
        lovepotionimg.setId(R.id.layout34);
        gamepotionimg.setId(R.id.layout35);
        allinpotionimg.setId(R.id.layout69);

        frenchfriesimg.setId(R.id.layout3);
        chickenlegimg.setId(R.id.layout4);
        fishimg.setId(R.id.layout5);


        if (base64EncodedPublicKey.contains("CONSTRUCT_YOUR")) {
            throw new RuntimeException("Please put your app's public key in MainActivity.java. See README.");
        }
        if (getPackageName().startsWith("com.example")) {
            throw new RuntimeException("Please change the sample's package name! See README.");
        }

        options = new BitmapFactory.Options();
        //options.inJustDecodeBounds = true;
        // options.inSampleSize = 2; options.inPreferredConfig =  Bitmap.Config.RGB_565;
/*
        if(
        Log.d(TAG, "Sign-in button clicked");
        mSignInClicked = true;
        mGoogleApiClient.connect();
*/

        int lefteyex, lefteyey, lefteyey1, lefteyex1, righteyex, righteyey, righteyey1, righteyex1;

        lefteyex = 0;
        lefteyey = 0;
        lefteyex1 = 0;
        lefteyey1 = 0;

        righteyex = 0;
        righteyey = 0;
        righteyex1 = 0;
        righteyey1 = 0;
        int pupilleftx = 0;
        int pupillefty = 0;
        int pupilleftx1 = 0;
        int pupillefty1 = 0;
        int pupilrightx = 0;
        int pupilrighty = 0;
        int pupilrighty1 = 0;
        int pupilrightx1 = 0;
        int mouthx = 0;
        int mouthy = 0;
        int mouthx1 = 0;
        int mouthy1 = 0;
        int chinx = 0;
        int chiny = 0;
        int chinx1 = 0;
        int chiny1 = 0;


        intent = new Intent(this, MyService.class);
        pintent = PendingIntent
                .getBroadcast(this, 10, intent, 0);


        cancelalarm();
        //// Dynamically assign alarm ids for multiple alarms
        Intent service = new Intent(this, MyService.class);  //your Intent localIntent = new Intent("com.test.sample");
        //intent.putExtra("alarmId", alarmId); // So we can catch the id on BroadcastReceiver
        PendingIntent alarmIntent;
        alarmIntent = PendingIntent.getBroadcast(this,
                alarmId, service,
                0);
        AlarmManager am = (AlarmManager) this.getSystemService(Context.ALARM_SERVICE);

        am.cancel(alarmIntent);
        Intent intentnew =  new Intent(this, MyService.class);

        intentnew.setAction("STOP");

       // stopService(intentnew);
        //this.stopService(new Intent(getBaseContext(), MyService.class));
      //  this.stopService(new Intent(getBaseContext(), alarmService.class));

        FacebookSdk.sdkInitialize(getApplicationContext());


       /* process[0] = 101;
        process[1] = 101;
        process[2] = 101;
        process[3] = 101;
        process[4] = 101;
        process[5] = 101;*/

       // Bundle extras = getIntent().getExtras();
        //if (extras != null) {


           // newgame = extras.getInt("newgame");

            newgame = shared1.getInt("newgame", 0);

        facecoin = shared1.getBoolean("facecoin", facecoin);
        googlecoin = shared1.getBoolean("googlecoin", googlecoin);
        instacoin = shared1.getBoolean("instacoin", instacoin);
        twitcoin = shared1.getBoolean("twitcoin", twitcoin);
        sleepbandpick = shared1.getInt("sleepbandpick", sleepbandpick);
        notification = shared1.getBoolean("notification", true);
        vibration = shared1.getBoolean("vibration", true);
        iqplusone = shared1.getBoolean("iqplusone", false);
        CharacterName = shared1.getString("charactername", "");


        SharedPreferences shared = getSharedPreferences("info", MODE_PRIVATE);
//Using getXXX- with XX is type date you wrote to file "name_file"
                process[0] = shared.getInt("procss0key", 50);
                process[1] = shared.getInt("procss1key", 50);
                process[2] = shared.getInt("procss2key", 50);
                process[3] = shared.getInt("procss3key", 50);
                process[4] = shared.getInt("procss4key", 50);
                process[5] = shared.getInt("procss5key", 50);
                originalcounter=shared.getInt("originalcounter", originalcounter);
        originalcounterhunger=shared.getInt("originalcounterhunger", originalcounterhunger);
        originalcounterhygiene=shared.getInt("originalcounterhygiene", originalcounterhygiene);
        originalcounterwc=shared.getInt("originalcounterwc", originalcounterwc);
        originalcountersleep=shared.getInt("originalcountersleep", originalcountersleep);
        originalcounterlove=shared.getInt("originalcounterlove", originalcounterlove);


                CharacterName = shared.getString("charactername", "");
                iqplusone = shared.getBoolean("iqplusone", false);
                iq = shared.getInt("iq", iq);
                coin[0] = shared.getInt("coin", coin[0]);
                heart_speed[0] = shared.getInt("heartspeed", heart_speed[0]);
                sleepbuttonpressed[0] = shared.getBoolean("sleep", false);


                boolean sl = shared.getBoolean("sleep", false);
                notification = shared.getBoolean("notification", true);
                vibration = shared.getBoolean("vibration", true);
                sleepbuttonpressed[0] = sl;

               // isplustencoin = shared.getBoolean("isplustencoin", false);
                loyaltyhours=shared.getInt("loyaltyhours", 0);
                loyaltyminutes=shared.getInt("loyaltyminutes", 0);
                loyaltyseconds=shared.getInt("loyaltyseconds", 0);
                washhandflag=shared.getBoolean("washhandflag", false);
                marketarray[watermelonindex] = shared.getInt("watermeloncount", 0);
                marketarray[tomatoindex] = shared.getInt("tomatocount", 0);
                marketarray[pumpkinindex] = shared.getInt("pumpkincount", 0);
                marketarray[peesindex] = shared.getInt("peescount", 0);
                marketarray[kiwiindex] = shared.getInt("kiwicount", 0);
                marketarray[hotdogindex] = shared.getInt("hotdogcount", 0);
                marketarray[cornindex] = shared.getInt("corncount", 0);
                marketarray[cookieindex] = shared.getInt("cookiecount", 0);
                marketarray[chilisindex] = shared.getInt("chiliscount", 0);
                marketarray[broccoliindex] = shared.getInt("broccolicount", 0);
                marketarray[bananaindex] = shared.getInt("bananacount", 0);
                marketarray[regional1index] = shared.getInt("regional1count", 0);
                marketarray[regional2index] = shared.getInt("regional2count", 0);
                marketarray[regional3index] = shared.getInt("regional3count", 0);
                marketarray[regional4index] = shared.getInt("regional4count", 0);
                marketarray[regional5index] = shared.getInt("regional5count", 0);
                marketarray[regional6index] = shared.getInt("regional6count", 0);
                marketarray[siskebapindex] = shared.getInt("siskebapcount", 0);
                marketarray[drinks1index] = shared.getInt("drinks1count", 0);
                marketarray[drinks2index] = shared.getInt("drinks2count", 0);
                marketarray[drinks3index] = shared.getInt("drinks3count", 0);
                marketarray[drinks4index] = shared.getInt("drinks4count", 0);
                marketarray[drinks5index] = shared.getInt("drinks5count", 0);
                marketarray[drinks6index] = shared.getInt("drinks6count", 0);
                marketarray[desert1index] = shared.getInt("desert1count", 0);
                marketarray[desert2index] = shared.getInt("desert2count", 0);
                marketarray[desert3index] = shared.getInt("desert3count", 0);
                marketarray[desert4index] = shared.getInt("desert4count", 0);
                marketarray[desert5index] = shared.getInt("desert5count", 0);
                marketarray[desert6index] = shared.getInt("desert6count", 0);


                marketarray[meatindex] = shared.getInt("meatcount", 0);
                marketarray[pizzaindex] = shared.getInt("pizzacount", 0);
                marketarray[hamburgerindex] = shared.getInt("hamburgercount", 0);
                marketarray[frenchfriesindex] = shared.getInt("frenchfriewscount", 0);
                marketarray[chickenlegindex] = shared.getInt("chickenlegcount", 0);
                marketarray[fishindex] = shared.getInt("fishcount", 0);
                marketarray[appleindex] = shared.getInt("applecount", 0);
                marketarray[bostonrollindex] = shared.getInt("bostronrollcount", 0);
                marketarray[carrotindex] = shared.getInt("carrotcount", 0);
                marketarray[frenchtoastindex] = shared.getInt("frenchtoastcount", 0);
                marketarray[meatarmindex] = shared.getInt("meatarmcount", 0);
                marketarray[medisaladindex] = shared.getInt("mediasaladcount", 0);
                marketarray[noodleindex] = shared.getInt("noodlecount", 0);
                marketarray[mixedsaladindex] = shared.getInt("mixedsaladcount", 0);
                marketarray[onionringsindex] = shared.getInt("onionringscount", 0);
                marketarray[orangeindex] = shared.getInt("orangecount", 0);
                marketarray[porkindex] = shared.getInt("porkcount", 0);
                marketarray[mixedrollindex] = shared.getInt("mixedrollcount", 0);
                marketarray[salmonsushiindex] = shared.getInt("salmonsushicount", 0);
                marketarray[soupindex] = shared.getInt("soupcount", 0);
                marketarray[squidindex] = shared.getInt("squidcount", 0);
                marketarray[cokeindex] = shared.getInt("cokecount", 0);
                marketarray[brownieindex] = shared.getInt("browniecount", 0);
                marketarray[cheeseindex] = shared.getInt("cheesecount", 0);
                marketarray[cheesecakeindex] = shared.getInt("cheesecakecount", 0);
                marketarray[juiceindex] = shared.getInt("juicecount", 0);

                marketarray[greensoapindex] = shared.getInt("greensoapcount", 0);
                marketarray[darkspongeindex] = shared.getInt("darkspongecount", 0);
                marketarray[cellspongeindex] = shared.getInt("cellspongecount", 0);
                marketarray[seaspongeindex] = shared.getInt("seaspongecount", 0);
                marketarray[soap1index] = shared.getInt("soap1count", 0);
                marketarray[soap2index] = shared.getInt("soap2count", 0);

                marketarray[sleeppotionindex] = shared.getInt("sleeppotioncount", 0);
                marketarray[hungerpotionindex] = shared.getInt("hungerpotioncount", 0);
                marketarray[hygienepotionindex] = shared.getInt("hygienepotioncount", 0);
                marketarray[lovepotionindex] = shared.getInt("lovepotioncount", 0);
                marketarray[gamepotionindex] = shared.getInt("gamepotioncount", 0);
                marketarray[allinpotionindex] = shared.getInt("allinpotioncount", 0);



        eyeband1bought = shared.getBoolean("eyeband1bought",eyeband1bought);
        eyeband2bought = shared.getBoolean("eyeband2bought",eyeband2bought);
        eyeband3bought = shared.getBoolean("eyeband3bought",eyeband3bought);
        eyeband4bought = shared.getBoolean("eyeband4bought",eyeband4bought);
        eyeband5bought = shared.getBoolean("eyeband5bought",eyeband5bought);
        eyeband6bought = shared.getBoolean("eyeband6bought",eyeband6bought);



        gamestar = shared.getInt("gamestar", gamestar);
        MAXGAMEPLAY = shared.getInt("MAXGAMEPLAY", MAXGAMEPLAY);
        unlockiqflag = shared.getBoolean("unlockiqflag", unlockiqflag);
        mult2flag = shared.getBoolean("mult2flag", mult2flag);
        plus5gameflag = shared.getBoolean("plus5gameflag", plus5gameflag);
        adflag = shared.getBoolean("adflag", adflag);


                Boolean mute = false;
                long timeservice = 0;
                long timeservice2 = 0;
                timeservice = shared.getLong("time", timeservice);
                timeservice2 = shared.getLong("time2", timeservice2);
                final long time1[] = {10000};
                final long lastplaytime = shared.getLong("lastplaytime", 0);

                final long lastplaytimehours = shared.getLong("lastplaytimehours", 0);

                final long utcOffset = TimeZone.getDefault().getOffset(System.currentTimeMillis());
                final long DAY_IN_MILLIS = 24 * 60 * 60;
                final long DAY_IN_MILLIS2 = 24 * 60 * 60;

                long value = System.currentTimeMillis()/1000;

                 loyaltyhours=shared.getInt("loyaltyhours", 0);
                loyaltyminutes=shared.getInt("loyaltyminutes", 0);
                loyaltyseconds=shared.getInt("loyaltyseconds", 0);






                int hour = Calendar.getInstance().get(Calendar.HOUR_OF_DAY);
                int minutes = Calendar.getInstance().get(Calendar.MINUTE);
                int sec = Calendar.getInstance().get(Calendar.SECOND);


                int now = hour*10000+minutes*100+sec;
                int last = loyaltyhours*10000+loyaltyminutes*100+loyaltyseconds;






                difference = (int)(value-lastplaytime);


                difference = difference / 3600;


                double yesterdayaftere =  value - (hour*60*60 + minutes*60 + sec);
                double  yesterdaybefore =    yesterdayaftere - 24*60*60;



                if (lastplaytime <= yesterdayaftere && lastplaytime >= yesterdaybefore )
                    isplustencoin=true;

        try1= (int)yesterdayaftere;
        try2=  (int)yesterdayaftere;
        difference =  (int) lastplaytime;
/*
                if (difference <= 24 && difference >=0 ) //&& value > lastplaytime

                {

                    if(last> now) isplustencoin=true;
                }*/


        ratecount = shared1.getInt("ratecount", 0);
        rateflag = shared1.getBoolean("rateflag", rateflag);
        if (lastplaytime <= yesterdayaftere && ratecount > 0 && rateflag)
            showrateflag = true;



        ratecount++;
        SharedPreferences pref111;
        pref111 = getSharedPreferences("info", MODE_PRIVATE);
        final SharedPreferences.Editor editorlast = pref111.edit();
        editorlast.putInt("ratecount",ratecount);
        editorlast.commit();

                long tt1 = System.currentTimeMillis();

                long tt2 = tt1 / 1000;

                int gmstarcount = shared.getInt("gamestarcounter", gamestarcounter[0]);

                gamestarcounter[0] = gmstarcount;
                long diff2 = gamestarcounter[0] + (tt2 - timeservice2) ;
                if (diff2 < 0)
                {
                    diff2 = diff2 * -1;

                }

                long diff = tt2 - timeservice;




              //  double y12 =(double) process[0] * (0.35) + (double) process[1] * (0.1) + (double) process[3] * (0.35) +(double)  process[2] * (0.1)  +(double)  process[5] * (0.1);

               // if(y12> 50) hygienespeed = ABOVE50TIME;
               // else hygienespeed = BELOW50TIME;

                if(iq<51) hungerspeed = BELOW50HUNGER;
                else if(iq>50  && iq<101) hungerspeed = ABOVE50HUNGER;
                else hungerspeed = ABOVE100HUNGER;

                if(iq<51) hygienespeed = BELOW50HYGIENE;
                else if(iq>50  && iq<101) hygienespeed = ABOVE50HYGIENE;
                else hygienespeed = ABOVE100HYGIENE;


                if(iq<51) wcspeed = BELOW50WC;
                else if(iq>50  && iq<101) wcspeed = ABOVE50WC;
                else wcspeed = ABOVE100WC;


               if(sleepbuttonpressed[0] == false) {
                   if (iq < 51) sleepspeed = BELOW50SLEEP;
                   else if (iq > 50 && iq < 101) sleepspeed = ABOVE50SLEEP;
                   else sleepspeed = ABOVE100SLEEP;
               }
                else
               {
                   if (iq < 51) sleepspeed = BELOW50NONSLEEP;
                   else if (iq > 50 && iq < 101) sleepspeed = ABOVE50NONSLEEP;
                   else sleepspeed = ABOVE100NONSLEEP;
               }


                if(iq<51) lovespeed = BELOW50LOVE;
                 else if(iq>50  && iq<101) lovespeed = ABOVE50SLOVE;
                else lovespeed = ABOVE100LOVE;







                double div = (double) diff / (double) hygienespeed;

                double div5 = (double) diff % (double) hygienespeed;

        double div5hunger = (double) diff % (double) hungerspeed;
        double div5hygiene = (double) diff % (double) hygienespeed;
        double div5wc = (double) diff % (double) wcspeed;
        double div5sleep = (double) diff % (double) sleepspeed;
        double div5love = (double) diff % (double) lovespeed;



                double divhunger = (double) diff / (double) hungerspeed;
                double divhygiene = (double) diff / (double) hygienespeed;
                double divwc = (double) diff / (double) wcspeed;
                double divsleep = (double) diff / (double) sleepspeed;
                double divlove = (double) diff / (double) lovespeed;

                int div1 = 0;
                int div1hunger = 0;
                int div1hygiene = 0;
                int div1wc = 0;
                int div1sleep = 0;
                int div1love = 0;


                if (timeservice != 0) {

                    div1 = (int) div;
                    div1hunger = (int) divhunger;
                    div1hygiene =  (int) divhygiene;
                    div1wc = (int) divwc;
                    div1sleep = (int) divsleep;
                    div1love =   (int) divlove;
                }

                originalcounter= (int) div5;

        originalcounterhunger= (int) div5hunger;
        originalcounterhygiene= (int) div5hygiene;
        originalcounterwc= (int) div5wc;
        originalcountersleep= (int) div5sleep;
        originalcounterlove= (int) div5love;




                if(process[0] - div1hunger < 0) process[0]=0;
                else process[0] = process[0] - div1hunger;


                if(process[1] - div1hygiene<0)process[1]=0;
                else process[1] = process[1] - div1hygiene;

                if(process[2] - div1wc<0)process[2]=0;
                else process[2] = process[2] - div1wc;

                if (sleepbuttonpressed[0] == true)

                {

                        process[3] = process[3] + div1sleep;
                        if(process[3]>=100) process[3]=100;

                }
                else {process[3] = process[3] - div1sleep;
                    if(process[3]<=0) process[3]=0;

                }


                if(process[5] - div1love<0)process[5]=0;
                else process[5] = process[5] - div1love;

                iqplusone = shared.getBoolean("iqplusone", false);
                double gamdiv = (double) diff2 / (double)gamewaittime;
                double gamdiv2 = (double) diff2 % (double)gamewaittime;

                int div3 = (int) gamdiv2;
                SharedPreferences pref;
                pref = getSharedPreferences("info", MODE_PRIVATE);
//Using putXXX - with XXX is type data you want to write like: putString, putInt...   from      Editor object
                final SharedPreferences.Editor editor = pref.edit();
                gamestarcounter[0] = div3;




                int div2 = (int) gamdiv;
                db1 = div2;
                db2 = diff2;

                if ((gamestar + div2) <= MAXGAMEPLAY)
                    gamestar = gamestar + div2;

                else gamestar = MAXGAMEPLAY;

                editor.putInt("gamestar", gamestar);
                 editor.putInt("gamestarcounter",  gamestarcounter[0]);
                    editor.commit();
                //gamestar = gamestar + 1;






if (newgame == 1){

                pupilleftx = shared.getInt("pupilleftxstore", pupilleftx);



            pupillefty = shared.getInt("pupilleftystore", pupillefty);
            pupilleftx1 = shared.getInt("pupilleftx1store", pupilleftx1);
            pupillefty1 = shared.getInt("pupillefty1store", pupillefty1);

                pupilrightx = shared.getInt("pupilrightxstore", pupilrightx);
                pupilrighty = shared.getInt("pupilrightystore", pupilrighty);
                pupilrightx1 = shared.getInt("pupilrightx1store", pupilrightx1);
                pupilrighty1 = shared.getInt("pupilrighty1store", pupilrighty1);


                lefteyex = shared.getInt("lefteyexstore", lefteyex);
                lefteyey = shared.getInt("lefteyeystore", lefteyey);
                lefteyex1 = shared.getInt("lefteyex1store", lefteyex1);
                lefteyey1 = shared.getInt("lefteyey1store", lefteyey1);

                righteyex = shared.getInt("righteyexstore", righteyex);
                righteyey = shared.getInt("righteyeystore", righteyey);
                righteyex1 = shared.getInt("righteyex1store", righteyex1);
                righteyey1 = shared.getInt("righteyey1store", righteyey1);

                mouthx = shared.getInt("mouthx", mouthx);
                mouthy = shared.getInt("mouthy", mouthy);
                mouthx1 = shared.getInt("mouthx1", mouthx1);
                mouthy1 = shared.getInt("mouthy1", mouthy1);


                chinx = shared.getInt("chinx", chinx);
                chinx1 = shared.getInt("chinx1", chinx1);
                chiny = shared.getInt("chiny", chiny);
                chiny1 = shared.getInt("chiny1", chiny1);

                //width1= shared.getFloat("width1", width1);
                ///height1= shared.getFloat("height1", height1);
                pupilleftxstore = pupilleftx;
                pupilleftystore = pupillefty;
                pupilleftx1store = pupilleftx1;
                pupillefty1store = pupillefty1;
                pupilrightxstore = pupilrightx;
                pupilrightystore = pupilrighty;
                pupilrighty1store = pupilrighty1;
                pupilrightx1store = pupilrightx1;
                mouthxstore = mouthx;
                mouthystore = mouthy;
                mouthx1store = mouthx1;
                mouthy1store = mouthy1;
                lefteyexstore = lefteyex;
                lefteyeystore = lefteyey;
                lefteyex1store = lefteyex1;
                lefteyey1store = lefteyey1;

                righteyexstore = righteyex;
                righteyeystore = righteyey;
                righteyex1store = righteyex1;
                righteyey1store = righteyey1;
                chinxstore = chinx;
                chinx1store = chinx1;
                chinystore = chiny;
                chiny1store = chiny1;


            }

       // }
        final boolean other[] = {false};


        final boolean heartbutton[] = {false};
        int counter = 1;
        final int theend = 0;
        super.onCreate(savedInstanceState);


        setContentView(R.layout.activity_gamefor);
       // mBanner = (RelativeLayout)findViewById(R.id.banner2);
      //  AdSettings.addTestDevice("809c1ea112a6d822e2d5133bec46ee82");
    //    adViewface = new com.facebook.ads.AdView(this, "1286605408052815_1287671531279536", AdSize.BANNER_HEIGHT_50);
      /*  adViewface.setAdListener(new com.facebook.ads.AdListener() {
            @Override
            public void onError(Ad ad, AdError adError) {
                // Ad error callback
                Toast.makeText(GameforActivity.this, "Error: " + adError.getErrorMessage(),
                        Toast.LENGTH_LONG).show();
            }

            @Override
            public void onAdLoaded(Ad ad) {
               Log.d("facebookbbo","loaded");
            }

            @Override
            public void onAdClicked(Ad ad) {
                // Ad clicked callback
            }
        });
        // Find the Ad Container
        RelativeLayout adContainer2 = (RelativeLayout) findViewById(R.id.containerview);

        // Add the ad view to your activity layout
        adContainer2.addView(adViewface);
        adViewface.loadAd();*/
        // Request an ad

        mobInterstitial3 = new MoPubInterstitial(this, "9b74fe645544445c99ffcd75600aee83");
        mobInterstitial3.setInterstitialAdListener(this);
        if(!adflag)  mobInterstitial3.setInterstitialAdListener(new MoPubInterstitial.InterstitialAdListener() {
            @Override
            public void onInterstitialLoaded(MoPubInterstitial interstitial) {
                if (interstitial.isReady()) {

                    mobInterstitialflag2 = true;
                } else {
                    Log.d("mopub:","errror");
                }
            }

            @Override
            public void onInterstitialFailed(MoPubInterstitial interstitial, MoPubErrorCode errorCode) { }

            @Override
            public void onInterstitialShown(MoPubInterstitial interstitial) { Log.d("mopub:","shown");}

            @Override
            public void onInterstitialDismissed(MoPubInterstitial interstitial) {
                final RelativeLayout coinwarning = (RelativeLayout) findViewById(R.id.coinwarning);
                final FrameLayout disableallchild = (FrameLayout) findViewById(R.id.draglayout);




                    final Animation shake = AnimationUtils.loadAnimation(x, R.anim.righttoleft);
                    disableallchild.setVisibility(View.INVISIBLE);
                    shake.setDuration(SLIDEANIMDUR);
                    coinwarning.setAnimation(shake);
                    plusonelife();

                coinbackpressflag = true;

                mobInterstitial3.load();
            }

            @Override
            public void onInterstitialClicked(MoPubInterstitial interstitial) {}
        });
        mobInterstitial3.load();




        mobInterstitial = new MoPubInterstitial(this, "e3deeee7b8d946978ad960b6c0f5c4c7");
        mobInterstitial.setInterstitialAdListener(this);
      if(!adflag)  mobInterstitial.load();

        mobInterstitial2 = new MoPubInterstitial(this, "dcc632abe6224b77b6509e8588e4cc81");
        mobInterstitial2.setInterstitialAdListener(new MoPubInterstitial.InterstitialAdListener() {
            @Override
            public void onInterstitialLoaded(MoPubInterstitial interstitial) {
                if (interstitial.isReady()) {

                    mobInterstitialflag2 = true;
                } else {
                    Log.d("mopub:","errror");
                }
            }

            @Override
            public void onInterstitialFailed(MoPubInterstitial interstitial, MoPubErrorCode errorCode) {mobInterstitialflag2 = false; }

            @Override
            public void onInterstitialShown(MoPubInterstitial interstitial) {  final FrameLayout disableallchild = (FrameLayout) findViewById(R.id.draglayout);
                final RelativeLayout pluscoinlayout = (RelativeLayout) findViewById(R.id.pluscoinlayout2);

                final RelativeLayout coinwarning = (RelativeLayout) findViewById(R.id.coinwarning);

                if(videogo) {
/*
                    pluscoinlayout.setVisibility(View.VISIBLE);
                    TextView tcoinamount = (TextView) findViewById(R.id.coinamount2);


                    tcoinamount.setText("+" + Integer.toString(20));

                    final Animation shake = AnimationUtils.loadAnimation(GameforActivity.this, R.anim.lefttoright);

                    final MediaPlayer clickaudio2 = MediaPlayer.create(getApplicationContext(), R.raw.popupsound);
                    if (!mutestate[0]) {
                        clickaudio2.start();
                        clickaudio2.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                            public void onCompletion(MediaPlayer mp) {
                                clickaudio2.release();

                            }

                            ;
                        });
                    }
                    shake.setDuration(SLIDEANIMDUR);
                    disableallchild.setVisibility(View.VISIBLE);
                    pluscoinlayout.setAnimation(shake);*/
                }

                //AdColony.requestInterstitial( ZONE_ID, listener, ad_options );


            }

            @Override
            public void onInterstitialDismissed(MoPubInterstitial interstitial) {



                mobInterstitial2.load();
            }

            @Override
            public void onInterstitialClicked(MoPubInterstitial interstitial) {}
        });
        mobInterstitial2.load();

        SharedPreferences shared5 = getSharedPreferences("info", MODE_PRIVATE);

        final SwitchButton vibrationswitch = (SwitchButton) findViewById(R.id.switch3);
        Boolean mute2 = shared5.getBoolean("mutestate", false);
        mutestate[0] = mute2;

        if (vibration == true) {
            vibrationswitch.setChecked(true);

        } else vibrationswitch.setChecked(false);

        final RelativeLayout coinwarning = (RelativeLayout) findViewById(R.id.coinwarning);
        final SwitchButton sound = (SwitchButton) findViewById(R.id.switch2);


        if (mutestate[0] == true) sound.setChecked(false);
        else sound.setChecked(true);

        String android_id = Settings.Secure.getString(this.getContentResolver(), Settings.Secure.ANDROID_ID);
        String deviceId = md5(android_id).toUpperCase();
        Log.i("device id=", deviceId);


    /*    final AdRequest adRequest = new AdRequest.Builder()
                .addTestDevice(AdRequest.DEVICE_ID_EMULATOR)
                .addTestDevice("353720052948557")
                //.addTestDevice(deviceId)
                .build();*/

    //    MobileAds.initialize(this, "ca-app-pub-3355254771595654~8015051320");



    /*    mInterstitialAd = new InterstitialAd(this);
        // mInterstitialAd.setAdUnitId("ca-app-pub-3940256099942544/1033173712");
        mInterstitialAd.setAdUnitId("ca-app-pub-3355254771595654/5225370524");
        mInterstitialAd.setAdListener(new AdListener() {
            @Override
            public void onAdClosed() {
                //requestNewInterstitial();
                mInterstitialAd.loadAd(adRequest);
                // beginPlayingGame();
            }
        });*/
       // InMobiSdk.setGender(InMobiSdk.Gender.MALE);
      //  InMobiSdk.setLocation(mLastLocation);


        final int densit = (int)Resources.getSystem().getDisplayMetrics().density;

        final RelativeLayout.LayoutParams bannerLp = new RelativeLayout.LayoutParams(320*densit, 50*densit);
        bannerLp.addRule(RelativeLayout.ALIGN_PARENT_BOTTOM);
        bannerLp.addRule(RelativeLayout.CENTER_HORIZONTAL);
        final RelativeLayout adContainer = (RelativeLayout) findViewById(R.id.containerview);
       // adContainer.addView(bannerAd2, bannerLp);
       // bannerAd2.setRefreshInterval(30);
       // bannerAd2.load();
        moPubView = (MoPubView) findViewById(R.id.banner_mopubview);
        moPubView.setAdUnitId("f399754aa73f462c9b4c02616428337f");
        moPubView.loadAd();

        moPubView.setBannerAdListener(new MoPubView.BannerAdListener() {
            @Override
            public void onBannerLoaded(MoPubView banner) {

            }

            @Override
            public void onBannerFailed(MoPubView banner, MoPubErrorCode errorCode) {
                moPubView.loadAd();
            }

            @Override
            public void onBannerClicked(MoPubView banner) {

            }

            @Override
            public void onBannerExpanded(MoPubView banner) {

            }

            @Override
            public void onBannerCollapsed(MoPubView banner) {

            }
        });

        FacebookSdk.sdkInitialize(getApplicationContext());
       // moPubView.setBannerAdListener(this);
     /*   bannerAd2.setListener(new InMobiBanner.BannerAdListener() {
            @Override
            public void onAdLoadSucceeded(InMobiBanner ınMobiBanner) {

            }

            @Override
            public void onAdLoadFailed(InMobiBanner ınMobiBanner, InMobiAdRequestStatus ınMobiAdRequestStatus) {
                //bannerAd2.load();
                Log.d("mopubview:"," failed");

            }

            @Override
            public void onAdDisplayed(InMobiBanner ınMobiBanner) {

            }

            @Override
            public void onAdDismissed(InMobiBanner ınMobiBanner) {

            }

            @Override
            public void onAdInteraction(InMobiBanner ınMobiBanner, Map<Object, Object> map) {

            }

            @Override
            public void onUserLeftApplication(InMobiBanner ınMobiBanner) {

            }

            @Override
            public void onAdRewardActionCompleted(InMobiBanner ınMobiBanner, Map<Object, Object> map) {

            }
        });*/

      //  bannerAd2.setListener(lis);
        //bannerAd2.setVisibility(INVISIBLE);
      //  InMobiBanner bannerAd22 = (InMobiBanner) findViewById(R.id.banner);
       // bannerAd22.load();
      /*  locationManager = (LocationManager) getSystemService(Context.LOCATION_SERVICE);
        locationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER,
                5, 5, new MyLocationListener());
        Location locationObj = locationManager
                .getLastKnownLocation(LocationManager.GPS_PROVIDER);//here getting null.*/






        //InMobiBanner bannerAd = findViewById(R.id.banner);





     /*   mInterstitialAd.loadAd(adRequest);
        mAdView = (AdView) findViewById(R.id.ad_view);
        mAdView.setAdListener(new AdListener() {
            private void showToast(String message) {
                Toast.makeText(getApplicationContext(), message, Toast.LENGTH_SHORT).show();
            }

            @Override
            public void onAdLoaded() {
                //showToast("Ad loaded.");
                adviewflag = true;
                adContainer.setVisibility(View.INVISIBLE);
            }

            @Override
            public void onAdFailedToLoad(int errorCode) {

                adContainer.setVisibility(View.VISIBLE);
                //showToast(String.format("Ad failed to load with error code %d.", errorCode));
            }

            @Override
            public void onAdOpened() {
                //showToast("Ad opened.");
                adContainer.setVisibility(View.INVISIBLE);
            }

            @Override
            public void onAdClosed() {
                //showToast("Ad closed.");

            }

            @Override
            public void onAdLeftApplication() {
                showToast("Ad left application.");
            }
        });*/



          // mAdView.loadAd(adRequest);


      //  prepareGameLevel();
        //interstitialAd.load();
        final String app_id = "56c04bc0735f803a61000008";

// initialize the Publisher SDK
      //  vunglePub.init(this, app_id);

        //vunglePub.setEventListeners(vungleListener);


        TextView n = (TextView) findViewById(R.id.name);
        TextView n1 = (TextView) findViewById(R.id.editText2);
        TextView n2 = (TextView) findViewById(R.id.textiq);
        TextView n3 = (TextView) findViewById(R.id.textcoin);

        Typeface tf11 = Typeface.createFromAsset(getAssets(), "sans.ttf");
       // n.setTypeface(tf11);
        n.setTextSize(11);
        //n1.setTypeface(tf11);
        n1.setTextSize(12);
        //n2.setTypeface(tf11);
        n2.setTextSize(12);
        //n3.setTypeface(tf11);
        n3.setTextSize(12);
       // n.setTextColor(Color.argb(255,52,73,94));
       // n1.setTextColor(Color.argb(255,52,73,94));
       // n2.setTextColor(Color.argb(255,52,73,94));
       // n3.setTextColor(Color.argb(255,52,73,94));

        sensore = (SensorManager) getSystemService(SENSOR_SERVICE);
        ball = (ImageView) findViewById(R.id.ball);
        ball.setImageResource(R.mipmap.ball);
        StrictMode.ThreadPolicy policy = new StrictMode.ThreadPolicy.Builder().permitAll().build();
        StrictMode.setThreadPolicy(policy);
        TextView maxigameplay = ( TextView) findViewById(R.id.textviewgamepotion);
        maxigameplay.setText(Integer.toString(MAXGAMEPLAY));
        //TextView t1t = (TextView) findViewById(R.id.textView13);
        //t1t.setText(Integer.toString(gamestar));
        final FrameLayout sleeplayout = (FrameLayout) findViewById(R.id.sleeplayout);
        final LinearLayout lin1 = (LinearLayout) findViewById(R.id.linearLayout);
        final RelativeLayout lin2 = (RelativeLayout) findViewById(R.id.linearLayout3);
        final LinearLayout lin3 = (LinearLayout) findViewById(R.id.linearLayout6);
        final FrameLayout disableallchild = (FrameLayout) findViewById(R.id.draglayout);
        final FrameLayout disableallchild2option = (FrameLayout) findViewById(R.id.draglayout2);
        final TextView lin4 = (TextView) findViewById(R.id.name);
        final ImageView lin5 = (ImageView) findViewById(R.id.testImagebrain);
        final ImageView lin6 = (ImageView) findViewById(R.id.testImagebrain2);
        final TextView brain3 = (TextView) findViewById(R.id.textiq);
        final TextView lin7 = (TextView) findViewById(R.id.editText3);
        final TextView lin8 = (TextView) findViewById(R.id.editText4);
        final TextView lin9 = (TextView) findViewById(R.id.editText6);
        final TextView lin10 = (TextView) findViewById(R.id.editText7);
        final TextView lin11 = (TextView) findViewById(R.id.editText8);
      final CircularProgressBar lin12 = (CircularProgressBar) findViewById(R.id.circularprogressbar1);
        final CircularProgressBar lin13 = (CircularProgressBar) findViewById(R.id.circularprogressbar2);
        final CircularProgressBar lin14 = (CircularProgressBar) findViewById(R.id.circularprogressbar3);
        final CircularProgressBar lin15 = (CircularProgressBar) findViewById(R.id.circularprogressbarfour);
        final CircularProgressBar lin16 = (CircularProgressBar) findViewById(R.id.circularprogressbar6);

        final Button lin17 = ( Button) findViewById(R.id.buttonoperation);
        final Button lin18 = ( Button) findViewById(R.id.colordeception);
        final Button lin19 = ( Button) findViewById(R.id.simpilictyicon);
        final Button lin20 = ( Button) findViewById(R.id.memorygame);
        final Button lin21 = ( Button) findViewById(R.id.calc);
        final Button lin22 = ( Button) findViewById(R.id.colorpick);
        final RelativeLayout lin23= (RelativeLayout) findViewById(R.id.circle1);
        final RelativeLayout lin24= (RelativeLayout) findViewById(R.id.circle2);
        final RelativeLayout lin25= (RelativeLayout) findViewById(R.id.circle3);
        final RelativeLayout lin26= (RelativeLayout) findViewById(R.id.circle4);
        final RelativeLayout lin27= (RelativeLayout) findViewById(R.id.circle5);
        final ImageView lin28 = (ImageView) findViewById(R.id.testImagecoin);

        disableallchild.setVisibility(View.INVISIBLE);
        disableallchild2option.setVisibility(View.INVISIBLE);

        final ImageView main = (ImageView) findViewById(R.id.imageView);

        String root = Environment.getExternalStorageDirectory().toString();
        //String photoPath = root + "/application/vivo/vivofiles/junk/" + ".pic2.jpg";
      //  Bitmap character = BitmapFactory.decodeFile(photoPath, options);


        String e1 = "None";


        r1 = (FrameLayout) findViewById(R.id.yigit);
        final FrameLayout fr = (FrameLayout) findViewById(R.id.white);
        ImageView img = (ImageView) findViewById(R.id.lefteyewhite);
        final FrameLayout f = (FrameLayout) findViewById(R.id.frame);
        final ImageView movement = (ImageView) findViewById(R.id.lefteyeimg);

        final FrameLayout righteyeback = (FrameLayout) findViewById(R.id.righteyeback);
        final FrameLayout righteye = (FrameLayout) findViewById(R.id.righteye);

        final ImageView righteyeimage = (ImageView) findViewById(R.id.righteyeimg);
        final ImageView righteyebackimg = (ImageView) findViewById(R.id.righteyewhite);
        final Button greenback = (Button) findViewById(R.id.button9);
        final Button blueback = (Button) findViewById(R.id.button10);
        if (newgame == 0) {
             Bundle extras = getIntent().getExtras();
            if (extras != null) {
                pupilleftx = extras.getInt("PupilX");
                pupillefty = extras.getInt("PupilY");
                pupilleftx1 = extras.getInt("PupilX1");
                pupillefty1 = extras.getInt("PupilY1");

                pupilrightx = extras.getInt("Pupil2X");
                pupilrighty = extras.getInt("Pupil2Y");
                pupilrightx1 = extras.getInt("Pupil2X1");
                pupilrighty1 = extras.getInt("Pupil2Y1");

                mouthx = extras.getInt("mouthx");
                mouthy = extras.getInt("mouthy");
                mouthx1 = extras.getInt("mouthx1");
                mouthy1 = extras.getInt("mouthy1");

                chinx = extras.getInt("chinx");
                chinx1 = extras.getInt("chinx1");
                chiny = extras.getInt("chiny");
                chiny1 = extras.getInt("chiny1");

                // width1 = extras.getFloat("width1");
                // height1 = extras.getFloat("height1");


                e1 = extras.getString("edittext");


                pupilleftxstore = pupilleftx;
                pupilleftystore = pupillefty;
                pupilleftx1store = pupilleftx1;
                pupillefty1store = pupillefty1;
                pupilrightxstore = pupilrightx;
                pupilrightystore = pupilrighty;
                pupilrighty1store = pupilrighty1;
                pupilrightx1store = pupilrightx1;
                mouthxstore = mouthx;
                mouthystore = mouthy;
                mouthx1store = mouthx1;
                mouthy1store = mouthy1;
                chinxstore = chinx;
                chinx1store = chinx1;
                chinystore = chiny;
                chiny1store = chiny1;

            }
        }



        Point size2 = new Point();
        getWindowManager().getDefaultDisplay().getSize(size2);
        int width22 = size2.x;
        int height22 = size2.y;

        int getrx = shared1.getInt("getrx",width22);


      double  lefteyexey = (double) lefteyex /(double) getrx *(double) width22;
      double  lefteyeyey = (double)lefteyey / (double)getrx * (double)width22;
      double  lefteyex1ey = (double)lefteyex1 / (double)getrx *(double) width22;
      double  lefteyey1ey =(double) lefteyey1 / (double)getrx *(double) width22;

      double  righteyexey =(double)righteyex / (double)getrx *(double) width22;
     double   righteyeyey = (double)righteyey /(double) getrx *(double) width22;
    double    righteyex1ey = (double)righteyex1 / (double)getrx *(double) width22;
     double   righteyey1ey = (double)righteyey1 / (double)getrx * (double)width22;

     double    pupilleftxey = (double)pupilleftx / (double)getrx * (double)width22;;
     double    pupilleftyey =(double) pupillefty / (double)getrx * (double)width22;;
     double    pupilleftx1ey = (double)pupilleftx1 /(double) getrx *(double) width22;;
     double    pupillefty1ey = (double)pupillefty1 /(double) getrx * (double)width22;;
     double    pupilrightxey =(double) pupilrightx/ (double)getrx *(double) width22;;;

     double    pupilrightyey = (double)pupilrighty /(double) getrx *(double) width22;;
     double    pupilrighty1ey = (double)pupilrightx1 / (double)getrx *(double) width22;;
     double    pupilrightx1ey = (double)pupilrighty1 /(double) getrx * (double)width22;;
     double    mouthxey = (double)mouthx /(double) getrx *(double) width22;

     double    mouthyey =(double) mouthy / (double)getrx *(double) width22;
     double    mouthx1ey = (double)mouthx1 /(double) getrx *(double) width22;
     double    mouthy1ey = (double)mouthy1 /(double) getrx *(double) width22;
     double    chinxey = (double)chinx / (double)getrx *(double) width22;;
     double    chinyey = (double)chiny /(double) getrx * (double)width22;;
     double    chinx1ey = (double)chinx1 / (double)getrx * (double)width22;;
     double    chiny1ey = (double)chiny1 / (double)getrx *(double) width22;;



          lefteyex = (int)lefteyexey ;
        lefteyey = (int)lefteyeyey ;
        lefteyex1 = (int)lefteyex1ey ;
        lefteyey1 = (int)lefteyey1ey ;

        righteyex =(int)righteyexey ;;
        righteyey = (int)righteyeyey ;
        righteyex1 = (int)righteyex1ey ;
        righteyey1 = (int)righteyey1ey ;

        pupilleftx = (int)pupilleftxey;
         pupillefty = (int)pupilleftyey;
         pupilleftx1 = (int)pupilleftx1ey;
         pupillefty1 = (int)pupillefty1ey;
         pupilrightx = (int)pupilrightxey;
         pupilrighty =  (int)pupilrightyey;;
         pupilrighty1 =  (int)pupilrightx1ey;;
         pupilrightx1 =  (int)pupilrighty1ey;;
         mouthx = (int)mouthxey;
         mouthy = (int)mouthyey;
         mouthx1 = (int)mouthx1ey;
         mouthy1 = (int)mouthy1ey;
         chinx = (int)chinxey;
         chiny = (int)chinyey;;
         chinx1 = (int)chinx1ey;;
         chiny1 = (int)chiny1ey;;


        pupilleftxstore2 = (int)pupilleftxey;
        pupilleftystore2 = (int)pupilleftyey;
        pupilleftx1store2 = (int)pupilleftx1ey;
        pupillefty1store2 = (int)pupillefty1ey;
        pupilrightxstore2 = (int)pupilrightxey;
        pupilrightystore2 =  (int)pupilrightyey;;
        pupilrighty1store2 =  (int)pupilrightx1ey;;
        pupilrightx1store2 =  (int)pupilrighty1ey;;


        x1store=righteyex;
        x2store=lefteyex1;
        x3store=pupilrightx;
        x4store=pupilleftx1;
        x5store=pupilleftx;
        x6store=mouthx;
        x7store=mouthx1;
        x8store = lefteyex;
        y7store = righteyey;

        y1store=lefteyey;
        y2store=pupilrighty1;
        y3store=pupillefty1;
        y4store=pupilrighty;
        y5store=mouthy;
        y6store=mouthy1;






        final TextView name = (TextView) findViewById(R.id.name);
        final RelativeLayout rel = (RelativeLayout) findViewById(R.id.vivorelative);
        final ImageButton peebtn = (ImageButton) findViewById(R.id.peefrm);
        final FrameLayout vivoidlayout = (FrameLayout) findViewById(R.id.VivoId);

        final TextView name2 = (TextView) findViewById(R.id.name2);
        name2.setVisibility(View.INVISIBLE);


            try {
                Badges.removeBadge(this);
            } catch (BadgesNotSupportedException badgesNotSupportedException) {
                Log.d("badge", badgesNotSupportedException.getMessage());
            }
        // Uri soundUri= Uri.parse("android.resource://" + getPackageName() + "/" + R.raw.message);

        pref = getSharedPreferences("info", MODE_PRIVATE);
//Using putXXX - with XXX is type data you want to write like: putString, putInt...   from      Editor object
        final SharedPreferences.Editor editor2 = pref.edit();
        editor2.putBoolean ("badgecount",false);
        editor2.putBoolean ("loyaltycount",false);

        editor2.putBoolean("gamestop", false);
        editor2.commit();
      //  final MediaPlayer clickaudio = MediaPlayer.create(getApplicationContext(), R.raw.clickyigit);
        final RelativeLayout headermenu = (RelativeLayout) findViewById(R.id.Heading);


        String root3 = Environment.getExternalStorageDirectory().toString();

        //String photoPatheyes = root + "/application/vivo/vivofiles/junk/" + ".pic2.jpg";



        photoPatheyes = root + "/application/vivo/vivofiles/junk/" + ".pic2.jpg";
       // File file = new File(photoPatheyes);
       // if(!file.exists())  photoPatheyes = root3 + "/application/vivo/vivofiles/junk/" + ".pic2.jpg";


      final Bitmap setBitmap = BitmapFactory.decodeFile(photoPatheyes,options);






        name.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        name.setAlpha(BALPHA);

                        name.setVisibility(View.INVISIBLE);
                        name2.setVisibility(View.VISIBLE);
                        disableallchild.setVisibility(View.VISIBLE);


                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:

                        Bundle params = new Bundle();
                        params.putString("image_name", "vivoid");
                        params.putString("full_text", "vivoid");
                        mFirebaseAnalytics.logEvent("vivoid", params);

                        name.setEnabled(false);
                        vivoidlayout.setVisibility(View.VISIBLE);


                        final Animation shake = AnimationUtils.loadAnimation(x, R.anim.lefttoright);
                        final MediaPlayer clickaudio2 = MediaPlayer.create(getApplicationContext(), R.raw.popupsound);
                        if(!mutestate[0]) {
                            clickaudio2.start();
                            clickaudio2.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                                public void onCompletion(MediaPlayer mp) {
                                    clickaudio2.release();

                                }

                                ;
                            });
                        }
                        shake.setDuration(SLIDEANIMDUR);
                        vivoidlayout.setAnimation(shake);
                       if (!mutestate[0]) soundPool.play(soundID, volume, volume, 1, 0, 1f);
                        final RelativeLayout coinlayout = (RelativeLayout) findViewById(R.id.coinlayout);
                        coinlayout.setEnabled(false);
                        //rel.setBackgroundColor(Color.argb(255, 171, 255, 102));
                        final ImageButton setting = (ImageButton) findViewById(R.id.imageView26);
                        final LinearLayout l1 = (LinearLayout) findViewById(R.id.linearLayout);
                        final RelativeLayout l2 = (RelativeLayout) findViewById(R.id.linearLayout3);
                        final LinearLayout l3 = (LinearLayout) findViewById(R.id.linearLayout4);
                        final LinearLayout l4 = (LinearLayout) findViewById(R.id.linearLayout6);
                        // final FrameLayout main = (FrameLayout) findViewById(R.id.yigit);
                        final Button shop = (Button) findViewById(R.id.shopframeimg);
                        final Button share = (Button) findViewById(R.id.imageButtonshare);


                        final TextView edittext13 = (TextView) findViewById(R.id.editText13);

                        main.setEnabled(false);
                        shop.setEnabled(false);
                        share.setEnabled(false);
                        name.setEnabled(false);
                        FrameLayout frame = (FrameLayout) findViewById(R.id.frameLayout);
                        ImageView smallpic = (ImageView) findViewById(R.id.smallpic);
                        TextView vivoid = (TextView) findViewById(R.id.textView7);
                        TextView vivoidnumber = (TextView) findViewById(R.id.textView8);
                        Button gotogamebutton = (Button) findViewById(R.id.button13);

                        vivoidnumber.setVisibility(View.VISIBLE);
                        final Random r1 = new Random();
                        final int i1 = (r1.nextInt(9999999) + 1000000);
                        final Random r2 = new Random();
                        final int i2 = (r2.nextInt(9) + 0);

                        final String ID;
                        ID = Integer.toString(i1);


                        FrameLayout picture = (FrameLayout) findViewById(R.id.Picture);

                        //Bitmap setBitmap12 = setBitmap;

                        SharedPreferences shared = getSharedPreferences("info", MODE_PRIVATE);
                        picture.setVisibility(View.VISIBLE);




                        //
                        smallpic.setImageBitmap(setBitmap);

                        final Button bgotogame = (Button) findViewById(R.id.button19);
                        vivoid.setVisibility(View.VISIBLE);

                        final TextView e1 = (TextView) findViewById(R.id.editText12);
                        final TextView e2 = (TextView) findViewById(R.id.editText13);
                        final TextView e3 = (TextView) findViewById(R.id.editText14);
                        //Typeface tf = Typeface.createFromAsset(getAssets(), "CalibriL.ttf");


                        String Vivoidtext = shared.getString("vivoid", "");
                        vivoidnumber.setText(Vivoidtext);

                        e1.setVisibility(View.VISIBLE);
                        e2.setVisibility(View.VISIBLE);
                        e3.setVisibility(View.VISIBLE);




                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        name.setAlpha(1f);

                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });




     /*   name.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {

                disableallchild.setVisibility(View.VISIBLE);
                vivoidlayout.setVisibility(View.VISIBLE);

                name.setEnabled(false);
                final Animation shake = AnimationUtils.loadAnimation(x, R.anim.lefttoright);
                final MediaPlayer clickaudio2 = MediaPlayer.create(getApplicationContext(), R.raw.popupsound);
                if(!mutestate[0]) {
                    clickaudio2.start();
                    clickaudio2.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                        public void onCompletion(MediaPlayer mp) {
                            clickaudio2.release();

                        }

                        ;
                    });
                }
                shake.setDuration(SLIDEANIMDUR);
                vivoidlayout.setAnimation(shake);
                final MediaPlayer clickaudio = MediaPlayer.create(getApplicationContext(), R.raw.click2017);
                if(!mutestate[0]) {
                    clickaudio.start();
                    clickaudio.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                        public void onCompletion(MediaPlayer mp) {
                            clickaudio.release();

                        }

                        ;
                    });
                }
                final RelativeLayout coinlayout = (RelativeLayout) findViewById(R.id.coinlayout);
                coinlayout.setEnabled(false);
                //rel.setBackgroundColor(Color.argb(255, 171, 255, 102));
                final ImageButton setting = (ImageButton) findViewById(R.id.imageView26);
                final LinearLayout l1 = (LinearLayout) findViewById(R.id.linearLayout);
                final RelativeLayout l2 = (RelativeLayout) findViewById(R.id.linearLayout3);
                final LinearLayout l3 = (LinearLayout) findViewById(R.id.linearLayout4);
                final LinearLayout l4 = (LinearLayout) findViewById(R.id.linearLayout6);
               // final FrameLayout main = (FrameLayout) findViewById(R.id.yigit);
                final Button shop = (Button) findViewById(R.id.shopframeimg);
                final Button share = (Button) findViewById(R.id.imageButtonshare);
                // setting.setVisibility(View.INVISIBLE);
              //  l1.setVisibility(View.INVISIBLE);
               // l2.setVisibility(View.INVISIBLE);
               // l3.setVisibility(View.INVISIBLE);
               // l4.setVisibility(View.INVISIBLE);

               // Drawable x = getResources().getDrawable(R.drawable.borderdarkblue);
                //rel.setBackground(x);

                final TextView edittext13 = (TextView) findViewById(R.id.editText13);


                if(submitscore) {
                    Games.Leaderboards.loadCurrentPlayerLeaderboardScore(mGoogleApiClient, getResources().getString(R.string.leaderboard_id), LeaderboardVariant.TIME_SPAN_ALL_TIME, LeaderboardVariant.COLLECTION_PUBLIC).setResultCallback(new ResultCallback<Leaderboards.LoadPlayerScoreResult>() {
                        @Override
                        public void onResult(final Leaderboards.LoadPlayerScoreResult scoreResult) {

                            int rank = (int) scoreResult.getScore().getRank();

                            GoogleId = GoogleId + " (" + Long.toString(rank) + ")";
                            //rank1[0]=rank;
                            //debug2.setText(Long.toString(rank));
                            edittext13.setText(GoogleId);
                        }
                    });
                }


/*
                main.setEnabled(false);
                shop.setEnabled(false);
                share.setEnabled(false);
                name.setEnabled(false);
                FrameLayout frame = (FrameLayout) findViewById(R.id.frameLayout);
                ImageView smallpic = (ImageView) findViewById(R.id.smallpic);
                TextView vivoid = (TextView) findViewById(R.id.textView7);
                TextView vivoidnumber = (TextView) findViewById(R.id.textView8);
                Button gotogamebutton = (Button) findViewById(R.id.button13);

                vivoidnumber.setVisibility(View.VISIBLE);
                final Random r1 = new Random();
                final int i1 = (r1.nextInt(9999999) + 1000000);
                final Random r2 = new Random();
                final int i2 = (r2.nextInt(9) + 0);

                final String ID;
                ID = Integer.toString(i1);


                FrameLayout picture = (FrameLayout) findViewById(R.id.Picture);
                String photoPath = "/storage/emulated/0/application/vivo/vivofiles/junk/" + ".pic2.jpg";
                Bitmap setBitmap = BitmapFactory.decodeFile(photoPath);


                SharedPreferences shared = getSharedPreferences("info", MODE_PRIVATE);
                picture.setVisibility(View.VISIBLE);
                smallpic.setImageBitmap(setBitmap);

                final Button bgotogame = (Button) findViewById(R.id.button19);
                vivoid.setVisibility(View.VISIBLE);

                final TextView e1 = (TextView) findViewById(R.id.editText12);
                final TextView e2 = (TextView) findViewById(R.id.editText13);
                final TextView e3 = (TextView) findViewById(R.id.editText14);
                //Typeface tf = Typeface.createFromAsset(getAssets(), "CalibriL.ttf");


                String Vivoidtext = shared.getString("vivoid", "");
                vivoidnumber.setText(Vivoidtext);

                e1.setVisibility(View.VISIBLE);
                e2.setVisibility(View.VISIBLE);
                e3.setVisibility(View.VISIBLE);


                return false;
            }
        });*/




        final TextView e2 = (TextView) findViewById(R.id.editText13);


        e2.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        e2.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:

                       if(!mutestate[0])
                        soundPool.play(soundID, volume, volume, 1, 0, 1f);
                        if(isOnline()) {
                            if (!mGoogleApiClient.isConnected()) {

                                googlesigninbtnflg = true;
                                if (!BaseGameUtils.verifySampleSetup(GameforActivity.this, R.string.app_id)) {
                                    Log.w(TAG, "*** Warning: setup problems detected. Sign in may not work!");
                                }

                                // start the sign-in flow
                                Log.d(TAG, "Sign-in button clicked");
                                mSignInClicked = true;
                                mGoogleApiClient.connect();
                                mainsignin = true;
                                editor2.putBoolean("mainsignin", mainsignin);
                                editor2.commit();
                            } else {
                                Player p = Games.Players.getCurrentPlayer(mGoogleApiClient);


                                if (mGoogleApiClient.isConnected() && p.getDisplayName() != null)
                                    startActivityForResult(Games.Leaderboards.getLeaderboardIntent(mGoogleApiClient,
                                            getString(R.string.leaderboard_id)), REQUEST_LEADERBOARD);


                                else {
                                    mGoogleApiClient.disconnect();

                                    googlesigninbtnflg = true;
                                    if (!BaseGameUtils.verifySampleSetup(GameforActivity.this, R.string.app_id)) {
                                        Log.w(TAG, "*** Warning: setup problems detected. Sign in may not work!");
                                    }

                                    // start the sign-in flow
                                    Log.d(TAG, "Sign-in button clicked");
                                    mSignInClicked = true;
                                    mGoogleApiClient.connect();
                                    mainsignin = true;
                                    editor2.putBoolean("mainsignin", mainsignin);
                                    editor2.commit();
                                }

                            }

                        }
                        else alertbox();
                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        e2.setAlpha(1f);
                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });


        final Button bgotogame = (Button) findViewById(R.id.button19);


        // final FrameLayout main = (FrameLayout) findViewById(R.id.yigit);


        bgotogame.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        bgotogame.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:

                        if(!mutestate[0])
                            soundPool.play(soundID, volume, volume, 1, 0, 1f);

                        final Animation shake = AnimationUtils.loadAnimation(x, R.anim.righttoleft);
                        shake.setDuration(SLIDEANIMDUR);
                        pluscoinlayout4();
                        vivoidlayout.setAnimation(shake);

                        coinbackpressflag = true;


                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        bgotogame.setAlpha(1f);

                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });



        name.setText(CharacterName);
        name2.setText(CharacterName);
     //   Bitmap setBitmap = BitmapFactory.decodeFile(photoPatheyes);

        Point size = new Point();

        getWindowManager().getDefaultDisplay().getSize(size);
        int widthrx = size.x;
        int heightrx = size.y;


        final float density1 = Resources.getSystem().getDisplayMetrics().density;
        int rx = getWindowManager().getDefaultDisplay().getWidth();
        rx= widthrx;
        float conversiony = frameheight * density1;
        float btmwidth = setBitmap.getWidth();
        float btmheight = setBitmap.getHeight();
        //   float btmwidth2 = setBitmap2.getWidth();
        // float btmheight2 = setBitmap2.getHeight();
        //float btmwidth3 = setBitmap3.getWidth();
        //float btmheight3 = setBitmap3.getHeight();

        Matrix matrix1 = new Matrix();
        pupilerror = 1 * (int) density1;
        Matrix matrix2 = new Matrix();
        Matrix matrix3 = new Matrix();


        Bitmap resizedBitmap;
        Bitmap croppedBitmap;

        Bitmap result;


        Bitmap croppedBitmapright;

        if (setBitmap.getHeight() < setBitmap.getWidth())

        {



//   if(newgame == 0)
            //  {

            matrix1.postScale(conversiony / btmheight, conversiony / btmheight);
            resizedBitmap = Bitmap.createBitmap(setBitmap, 0, 0, setBitmap.getWidth(), setBitmap.getHeight(), matrix1, true);
            resizedBitmapsensor=resizedBitmap;

            //  SaveImagejane(resizedBitmap);

        /*    }

            else
            {

                photoPath = "/storage/emulated/0/Vivo/" + ".pic2.jpg";
                resizedBitmap = BitmapFactory.decodeFile(photoPath);

            }*/



            croppedBitmap = Bitmap.createBitmap(resizedBitmap, pupilleftx, (int) (pupillefty - (conversiony - resizedBitmap.getHeight()) / 2), pupilleftx1 - pupilleftx, pupillefty1 - pupillefty);


            croppedBitmapright = Bitmap.createBitmap(resizedBitmap, pupilrightx, (int) (pupilrighty - (conversiony - resizedBitmap.getHeight()) / 2), pupilrightx1 - pupilrightx, pupilrighty1 - pupilrighty);
            pupilleftsensor=croppedBitmap;
            pupilrightsensor=croppedBitmapright;
        } else {





         //   if(newgame == 0)
          //  {

                matrix1.postScale(conversiony / btmheight, conversiony / btmheight);
                resizedBitmap = Bitmap.createBitmap(setBitmap, 0, 0, setBitmap.getWidth(), setBitmap.getHeight(), matrix1, true);
            resizedBitmapsensor=resizedBitmap;
            //  SaveImagejane(resizedBitmap);

        /*    }

            else
            {

                photoPath = "/storage/emulated/0/Vivo/" + ".pic2.jpg";
                resizedBitmap = BitmapFactory.decodeFile(photoPath);

            }*/
            croppedBitmap = Bitmap.createBitmap(resizedBitmap, pupilleftx - (rx - resizedBitmap.getWidth()) / 2, pupillefty, pupilleftx1 - pupilleftx + pupilerror, pupillefty1 - pupillefty + pupilerror);
            croppedBitmapright = Bitmap.createBitmap(resizedBitmap, pupilrightx - (rx - resizedBitmap.getWidth()) / 2, pupilrighty, pupilrightx1 - pupilrightx + pupilerror, pupilrighty1 - pupilrighty + pupilerror);
            pupilleftsensor=croppedBitmap;
            pupilrightsensor=croppedBitmapright;

        }



        //frm.setVisibility(View.VISIBLE);





        disableallchild2option.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {


                        break;
                    }
                    case MotionEvent.ACTION_UP:



                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });


        disableallchild.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {


                        break;
                    }
                    case MotionEvent.ACTION_UP:



                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });




        main.setImageBitmap((resizedBitmap));
        Bitmap important = resizedBitmap;

        ViewGroup.MarginLayoutParams marginParams1 = new ViewGroup.MarginLayoutParams(fr.getLayoutParams());
        marginParams1.setMargins(pupilleftx, pupillefty, 0, 0);
        FrameLayout.LayoutParams layoutParams1 = new FrameLayout.LayoutParams(marginParams1);
        layoutParams1.width = pupilleftx1 - pupilleftx;
        layoutParams1.height = pupillefty1 - pupillefty;
        fr.setLayoutParams(layoutParams1);
        fr.setVisibility(View.VISIBLE);

        GradientDrawable drawable11 = (GradientDrawable) img.getBackground();
        drawable11.setColor(resizedBitmap.getPixel(pupilleftx - (rx - resizedBitmap.getWidth()) / 2  - (int)(2*density1), (int) (pupillefty - (conversiony - resizedBitmap.getHeight()) / 2) + (int)(9*density1)));//original
        //drawable11.setColor(Color.argb(255,224,224,224));

        // img.setBackgroundColor(resizedBitmap.getPixel(pupilleftx - (rx - resizedBitmap.getWidth()) / 2 + pupilleftx1 - pupilleftx + 5, pupillefty + 15));


        ViewGroup.MarginLayoutParams marginParamsright1 = new ViewGroup.MarginLayoutParams(righteyeback.getLayoutParams());
        marginParamsright1.setMargins(pupilrightx, pupilrighty, 0, 0);
        FrameLayout.LayoutParams layoutParamsright1 = new FrameLayout.LayoutParams(marginParamsright1);
        layoutParamsright1.width = pupilrightx1 - pupilrightx;
        layoutParamsright1.height = pupilrighty1 - pupilrighty;
        righteyeback.setLayoutParams(layoutParamsright1);
        righteyeback.setVisibility(View.VISIBLE);

        GradientDrawable drawable111 = (GradientDrawable) righteyebackimg.getBackground();
         drawable111.setColor(resizedBitmap.getPixel(pupilrightx - (rx - resizedBitmap.getWidth()) / 2 - (int)(2*density1), (int) (pupilrighty - (conversiony - resizedBitmap.getHeight()) / 2) + (int)(9*density1))); //original
        //drawable111.setColor(Color.argb(255,224,224,224));

        final SwitchButton notificationswitch = (SwitchButton) findViewById(R.id.switch1);


        if (notification == true) {
            notificationswitch.setChecked(true);

        } else notificationswitch.setChecked(false);

        // notificationswitch.setChecked(false)

        SharedPreferences pref2;
        pref2 = getSharedPreferences("info", MODE_PRIVATE);
//Using putXXX - with XXX is type data you want to write like: putString, putInt...   from      Editor object

        notificationswitch.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {

                if (isChecked == false) {

                    notification = false;


                    SharedPreferences pref;
                    pref = getSharedPreferences("info", MODE_PRIVATE);
//Using putXXX - with XXX is type data you want to write like: putString, putInt...   from      Editor object
                    final SharedPreferences.Editor editor33 = pref.edit();
                    //vibrate(150);
                    editor33.putBoolean("notification", notification);
                    editor33.commit();

                } else

                {

                    SharedPreferences pref;
                    pref = getSharedPreferences("info", MODE_PRIVATE);
//Using putXXX - with XXX is type data you want to write like: putString, putInt...   from      Editor object
                    final SharedPreferences.Editor editor33 = pref.edit();
                    notification = true;
                    editor33.putBoolean("notification", notification);
                    editor33.commit();


                    //vibrate(350);
                }


            }
        });


        // righteyebackimg.setBackgroundColor(resizedBitmap.getPixel(pupilrightx - (rx - resizedBitmap.getWidth()) / 2 + pupilrightx1 - pupilrightx + 5, pupilrighty + 15));


        ViewGroup.MarginLayoutParams marginParams2 = new ViewGroup.MarginLayoutParams(f.getLayoutParams());
        marginParams2.setMargins(pupilleftx - pupilerror, pupillefty - pupilerror, 0, 0);
        FrameLayout.LayoutParams layoutParams2 = new FrameLayout.LayoutParams(marginParams2);
        layoutParams2.height = pupillefty1 - pupillefty + pupilerror * 2;
        layoutParams2.width = pupilleftx1 - pupilleftx + pupilerror * 2;
        f.setLayoutParams(layoutParams2);
        movement.setImageBitmap(getclip(croppedBitmap));


        ViewGroup.MarginLayoutParams marginParamsright2 = new ViewGroup.MarginLayoutParams(righteye.getLayoutParams());
        marginParamsright2.setMargins(pupilrightx - pupilerror, pupilrighty - pupilerror, 0, 0);
        FrameLayout.LayoutParams layoutParamsright2 = new FrameLayout.LayoutParams(marginParamsright2);
        layoutParamsright2.height = pupilrighty1 - pupilrighty + pupilerror * 2;
        layoutParamsright2.width = pupilrightx1 - pupilrightx + pupilerror * 2;
        righteye.setLayoutParams(layoutParamsright2);
        righteyeimage.setImageBitmap(getclip(croppedBitmapright));


        final float density2 = Resources.getSystem().getDisplayMetrics().density;
        final float distancex = 5;
        final float distancey = 3;
        final float setY = movement.getY();
        final float setX = movement.getX();

        final double mxx = ((double) pupilleftx - (double) pupilrightx1) / 2 + pupilrightx1;

        final float middlex = (float) mxx;
//eyetears


        final float setrightY = righteyeimage.getY();
        final float setrightX = righteyeimage.getX();


        final float myvalueyfinal = pupillefty - 2 + (115 * density2);
        final float myvalueyfinal2 = pupillefty;//for menu eye movement
        //final float myvaluexfinal = pupilleftx-2;
        final float myvaluexfinal = middlex - 2;


        final float myvalueyfinalright = pupilrighty - 2 + (115 * density2);
        final float myvalueyfinalright2 = pupilrighty;//for menu eye movement
        //final float myvaluexfinalright = pupilrightx-2;
        final float myvaluexfinalright = middlex - 2;

        final Animation mAnimation;

        final ImageView mvm = (ImageView) findViewById(R.id.mouthimg);
        final FrameLayout fmouth = (FrameLayout) findViewById(R.id.framemouth);


        final FrameLayout fmouthup = (FrameLayout) findViewById(R.id.halfmouthtop);
        final ImageView fmouthupimg = (ImageView) findViewById(R.id.halfmouthtopimg);

        final FrameLayout frmouth = (FrameLayout) findViewById(R.id.frameblack);
        final ImageView mouthblack = (ImageView) findViewById(R.id.mouthblack);
        Bitmap croppedBitmapmouth, croppedBitmapmouthup;


       final TextView debug = (TextView) findViewById(R.id.textView131);
       final TextView debug2 = (TextView) findViewById(R.id.textView132);

        TextView debug3 = (TextView) findViewById(R.id.textView133);
       // TextView debug4 = (TextView) findViewById(R.id.textView44444);


         debug.setText(Float.toString(try1));
         debug2.setText(Float.toString(try2));
        debug3.setText(Float.toString(difference));
        boolean hello = true;




        if (setBitmap.getHeight() < setBitmap.getWidth())

        {

            matrix1.postScale(rx / btmwidth, rx / btmwidth);

            //resizedBitmap = Bitmap.createBitmap(setBitmap, 0, 0, setBitmap.getWidth(), setBitmap.getHeight(), matrix1, true);


            croppedBitmapmouthup = Bitmap.createBitmap(resizedBitmap, mouthx - (rx - resizedBitmap.getWidth()) / 2, mouthy, mouthx1 - mouthx, mouthy1 - mouthy);
            croppedBitmapmouth = Bitmap.createBitmap(resizedBitmap, mouthx, (int) (mouthy - (conversiony - resizedBitmap.getHeight()) / 2), mouthx1 - mouthx, mouthy1 - mouthy);


        } else {

            croppedBitmapmouthup = Bitmap.createBitmap(resizedBitmap, mouthx - (rx - resizedBitmap.getWidth()) / 2, mouthy, mouthx1 - mouthx, mouthy1 - mouthy);
            //croppedBitmapmouth = Bitmap.createBitmap(resizedBitmap, mouthx - (rx-resizedBitmap.getWidth())/2, mouthy , mouthx1-mouthx,mouthy1-mouthy);
            croppedBitmapmouth = Bitmap.createBitmap(resizedBitmap, chinx - (rx - resizedBitmap.getWidth()) / 2, mouthy + (mouthy1 - mouthy) / 2 - (chiny1 - (mouthy + (mouthy1 - mouthy) / 2)), chinx1 - chinx, (chiny1 - (mouthy + (mouthy1 - mouthy) / 2)) * 2);
        }

        ViewGroup.MarginLayoutParams marginParams1mouth = new ViewGroup.MarginLayoutParams(frmouth.getLayoutParams());
        // marginParams1mouth.setMargins(mouthx+15, mouthy, 0, 0);
        marginParams1mouth.setMargins(mouthx, mouthy + (mouthy1 - mouthy) / 2 - 20, 0, 0);

        FrameLayout.LayoutParams layoutParams1mouth = new FrameLayout.LayoutParams(marginParams1mouth);
        layoutParams1mouth.width = (mouthx1 - mouthx);
        layoutParams1mouth.height = 60;
        frmouth.setLayoutParams(layoutParams1mouth);
        frmouth.setVisibility(View.VISIBLE);
        //Bitmap x1 = BitmapFactory.decodeResource(getResources(), R.mipmap.ellipse);
        //Bitmap x1 = BitmapFactory.decodeResource(getResources(), R.mipmap.blackrect);

        Bitmap x1mouth = BitmapFactory.decodeResource(getResources(), R.mipmap.blackrect, options);
        Drawable x12 = new RoundImage(x1mouth);

        frmouth.setBackground(x12);

        //Drawable d = new RoundImage(x1);
        //frmouth.setBackground(d);
        //img.setImageBitmap(x1);
        //img.setBackgroundColor(resizedBitmap.getPixel(myValue  - (rx - resizedBitmap.getWidth()) / 2 + p2x - myValue+5, myValuey+15));
        //mouthblack.setImageBitmap(x1);


        ViewGroup.MarginLayoutParams marginParams2mouthup = new ViewGroup.MarginLayoutParams(frmouth.getLayoutParams());
        marginParams2mouthup.setMargins(mouthx, mouthy, 0, 0);
        FrameLayout.LayoutParams layoutParams2mouthup = new FrameLayout.LayoutParams(marginParams2mouthup);
        layoutParams2mouthup.height = mouthy1 - mouthy;
        layoutParams2mouthup.width = (mouthx1 - mouthx);
        fmouthup.setLayoutParams(layoutParams2mouthup);
        fmouthupimg.setImageBitmap(getcliphalfup(croppedBitmapmouthup));
        movemouthup = croppedBitmapmouthup;


        ViewGroup.MarginLayoutParams marginParams2mouth = new ViewGroup.MarginLayoutParams(fmouth.getLayoutParams());
        marginParams2mouth.setMargins(chinx, mouthy + (mouthy1 - mouthy) / 2 - (chiny1 - (mouthy + (mouthy1 - mouthy) / 2)), 0, 0);
        FrameLayout.LayoutParams layoutParams2mouth = new FrameLayout.LayoutParams(marginParams2mouth);
        layoutParams2mouth.height = ((chiny1 - (mouthy + (mouthy1 - mouthy) / 2)) * 2);
        layoutParams2mouth.width = (chinx1 - chinx);
        fmouth.setLayoutParams(layoutParams2mouth);
        mvm.setImageBitmap(getcliphalf(croppedBitmapmouth));
        movemouthdown = croppedBitmapmouth;

        final Animation mAnimation22;


  /*      mAnimation22 = new TranslateAnimation(0, 0, 0, 30);
        // mAnimation = new TranslateAnimation(0, 0, -20, 0);

        mAnimation22.setDuration(300);
        mAnimation22.setFillAfter(true);
        mAnimation22.setRepeatCount(-1);
        mAnimation22.setRepeatMode(Animation.REVERSE);
        mvm.setAnimation(mAnimation22);
        mvm.setVisibility(View.VISIBLE);
*/
        firststart = shared1.getInt("firststart", 0);



            firststart=1;
            editor.putInt("firststart", 1);
            editor.commit();
            startService(new Intent(this, MyService.class));
            startalarm();



        final float setYmouth = mvm.getY();
        final float setXmouth = mvm.getX();

        final float setYmouthup = fmouthupimg.getY();
        final float setXmouthup = fmouthupimg.getX();


        final ImageView movement2 = (ImageView) findViewById(R.id.frameeyelidimg);
        final ImageView img2 = (ImageView) findViewById(R.id.frmeyelidbtmimg);
        final FrameLayout feyes = (FrameLayout) findViewById(R.id.frameeyelid);
        fbottom = (FrameLayout) findViewById(R.id.frmeyelidbtm2);
        final FrameLayout freyes = (FrameLayout) findViewById(R.id.frameeyelidwhite);
        ImageView imgeyes = (ImageView) findViewById(R.id.frameeyelidwhiteimg);


        final FrameLayout righteyelid = (FrameLayout) findViewById(R.id.righteyelidtop);
        final FrameLayout righteyelidback = (FrameLayout) findViewById(R.id.righteyelidback);
        final FrameLayout righteyelidbtm = (FrameLayout) findViewById(R.id.righteyelidbottom);
        final ImageView righteyelidtopimage = (ImageView) findViewById(R.id.righteyelidtp);
        final ImageView righteyelidbottomimage = (ImageView) findViewById(R.id.righteyelidbtm);
        final ImageView righteyelidbackimg = (ImageView) findViewById(R.id.righteyelidbak);
        final LinearLayout l1 = (LinearLayout) findViewById(R.id.linearLayout6);
        final LinearLayout l2 = (LinearLayout) findViewById(R.id.linearlayout7);
        final LinearLayout l3 = (LinearLayout) findViewById(R.id.linearLayout);
        final RelativeLayout l4 = (RelativeLayout) findViewById(R.id.linearLayout3);
        final LinearLayout l5 = (LinearLayout) findViewById(R.id.linearLayout4);

        final Button RedButton = (Button) findViewById(R.id.button11);
        Log.d("root - yigiterbas",root);

        //else photoPatheyes = root + "/application/vivo/vivofiles/junk/" + ".pic2.jpg";
            // String photoPath2eyes = "/storage/emulated/0/DCIM/Camera/" + ".pic22.jpg";

        // String photoPath3eyes = "/storage/emulated/0/DCIM/Camera/" + "righteye.jpg";

      //  Bitmap setBitmapeyes = setBitmap;




        //Bitmap setBitmap2eyes = BitmapFactory.decodeFile(photoPath2);
        // Bitmap setBitmap3eyes = BitmapFactory.decodeFile(photoPath3);
/*

        blueback.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

                r1.setBackgroundColor(Color.argb(243, 182, 224, 255));
                l1.setBackgroundColor(Color.argb(243, 182, 224, 255));
                l2.setBackgroundColor(Color.argb(243, 182, 224, 255));
                l3.setBackgroundColor(Color.argb(243, 182, 224, 255));
                l4.setBackgroundColor(Color.argb(243, 182, 224, 255));
                l5.setBackgroundColor(Color.argb(243, 182, 224, 255));
            }
        });


        greenback.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

                r1.setBackgroundColor(Color.argb(172, 194, 255, 164));
                l1.setBackgroundColor(Color.argb(172, 194, 255, 164));
                l2.setBackgroundColor(Color.argb(172, 194, 255, 164));
                l3.setBackgroundColor(Color.argb(172, 194, 255, 164));
                l4.setBackgroundColor(Color.argb(172, 194, 255, 164));
                l5.setBackgroundColor(Color.argb(172, 194, 255, 164));
            }
        });


        RedButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

                r1.setBackgroundColor(Color.argb(255, 255, 165, 128));
                l1.setBackgroundColor(Color.argb(255, 255, 165, 128));
                l2.setBackgroundColor(Color.argb(255, 255, 165, 128));
                l3.setBackgroundColor(Color.argb(255, 255, 165, 128));
                l4.setBackgroundColor(Color.argb(255, 255, 165, 128));
                l5.setBackgroundColor(Color.argb(255, 255, 165, 128));
            }
        });*/


        //  float btmwidth3eyes = setBitmap3eyes.getWidth();
        //float btmheight3eyes = setBitmap3eyes.getHeight();

        float btmwidtheyes = setBitmap.getWidth();
        float btmheighteyes = setBitmap.getHeight();

        Matrix matrix1eyes = new Matrix();

        Matrix matrix2eyes = new Matrix();
        Matrix matrix3eyes = new Matrix();

        Bitmap resizedBitmapeyes;
        Bitmap croppedBitmap1, croppedBitmapeyes, croppedBitmap3;



        ImageView ilogo = (ImageView) findViewById(R.id.optionvivologo);

        //set.setDuration(1000);
        ObjectAnimator imageViewObjectAnimator = ObjectAnimator.ofFloat(ilogo ,
                "rotationY", 0f, 180f);
        imageViewObjectAnimator.setDuration(750); // miliseconds
        imageViewObjectAnimator.setRepeatCount(ValueAnimator.INFINITE);
        imageViewObjectAnimator.start();




        int operationhigh = shared.getInt("operhighest", 0);
        int colorsensehigh = shared.getInt("colordecephighest", 0);
        int  simplicityhigh = shared.getInt("simphighest", 0);
        int memoryhigh = shared.getInt("memhighest", 0);
        int pickcolorhigh = shared.getInt("colorpickhighest", 0);
        int  sortinghigh = shared.getInt("sorthighest", 0);
        String vivoidstring = shared.getString("vivoid","0");
        final Button buttoncontact = (Button) findViewById(R.id.contactbutton);
        Bundle params = new Bundle();
        params.putString("name", CharacterName);
        params.putString("iq", Integer.toString(iq));
        params.putString("coin", Integer.toString(coin[0]));
        params.putString("id", vivoidstring);
        params.putString("operationhigh", Integer.toString(operationhigh));
        params.putString("colorsensehigh", Integer.toString(colorsensehigh));
        params.putString("simplicityhigh", Integer.toString(simplicityhigh));
        params.putString("memoryhigh", Integer.toString(memoryhigh));
        params.putString("pickcolorhigh", Integer.toString(pickcolorhigh));
        params.putString("sortinghigh", Integer.toString(sortinghigh));

        mFirebaseAnalytics.logEvent("playerstats", params);

        buttoncontact.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        buttoncontact.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:
                        if(!mutestate[0])
                            soundPool.play(soundID, volume, volume, 1, 0, 1f);

                        Intent googleintent = new Intent(Intent.ACTION_VIEW);
                        //String facebookUrl = getFacebookPageURL(x);
                        googleintent.setData(Uri.parse("http://www.vivobros.com/contact.html"));
                        startActivity(googleintent);




                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        buttoncontact.setAlpha(1f);

                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });


        button_sbm2 = (ImageButton) findViewById(R.id.button2);
        button_sbm3 = (ImageButton) findViewById(R.id.button3);
        button_sbm4 = (Button) findViewById(R.id.button4);
        final ImageButton washhandbutton = (ImageButton) findViewById(R.id.imageView52);


        if (newgame == 0) {
            Bundle extraseyes = getIntent().getExtras();
            Bundle extras = getIntent().getExtras();
            if (extraseyes != null) {
                lefteyex = extras.getInt("eyesx");
                lefteyey = extras.getInt("eyesy");
                lefteyex1 = extras.getInt("eyesx1");
                lefteyey1 = extras.getInt("eyesy1");



                righteyex = extras.getInt("eyes2x");
                righteyey = extras.getInt("eyes2y");
                righteyex1 = extras.getInt("eyes2x1");
                righteyey1 = extras.getInt("eyes2y1");


                x1store=righteyex;
                x2store=lefteyex1;
                x3store=pupilrightx;
                x4store=pupilleftx1;
                x5store=pupilleftx;
                x6store=mouthx;
                x7store=mouthx1;
                x8store = lefteyex;
                y7store = righteyey;
                y1store=lefteyey;
                y2store=pupilrighty1;
                y3store=pupillefty1;
                y4store=pupilrighty;
                y5store=mouthy;
                y6store=mouthy1;
                SharedPreferences pref22;
                pref22 = getSharedPreferences("info", MODE_PRIVATE);
//Using putXXX - with XXX is type data you want to write like: putString, putInt...   from      Editor object
                final SharedPreferences.Editor editor22 = pref22.edit();

                editor.putInt("lefteyexyigit",extras.getInt("eyesx"));
                editor.putInt("lefteyeyyigit",extras.getInt("eyesy"));
                editor.putInt("lefteyex1yigit",extras.getInt("eyesx1"));
                editor.putInt("lefteyey1yigit",extras.getInt("eyesy1"));
                editor.commit();


                lefteyexstore = lefteyex;
                lefteyeystore = lefteyey;
                lefteyex1store = lefteyex1;
                lefteyey1store = lefteyey1;

                righteyexstore = righteyex;
                righteyeystore = righteyey;
                righteyex1store = righteyex1;
                righteyey1store = righteyey1;


            }

        }

if(newgame ==0) {
   // debug3.setText(Float.toString(rx));
   // debug4.setText(Float.toString(conversiony));
}
else

{

    //debug3.setText(Float.toString(rx));
   // debug4.setText(Float.toString(conversiony));


}


/*
        if(newgame==1){

            lefteyex = shared1.getInt("lefteyexyigit",40);
            lefteyey = shared1.getInt("lefteyeyyigit",90);
            lefteyex1 = shared1.getInt("lefteyex1yigit",60);
            lefteyey1 = shared1.getInt("lefteyey1yigit",120);

        }

*/

        final Button buycoingbutton = (Button) findViewById(R.id.Buycoinbutton);
        DisplayMetrics displayMetrics = this.getResources().getDisplayMetrics();
        float dpHeight = displayMetrics.heightPixels / displayMetrics.density;
        float dpWidth = displayMetrics.widthPixels / displayMetrics.density;

        int densityDpi = (int)(displayMetrics.density * 160f);


      //  debug.setText(Float.toString(densityDpi));

      //  debug3.setText(Float.toString(dpHeight));
      //   debug4.setText(Float.toString(dpWidth));

        Intent serviceIntent =
                new Intent("com.android.vending.billing.InAppBillingService.BIND");
        serviceIntent.setPackage("com.android.vending");
        bindService(serviceIntent, mServiceConn, Context.BIND_AUTO_CREATE);

        Button leaderboard = (Button) findViewById(R.id.button29);
        final Button signin = (Button) findViewById(R.id.sign_in_button);
        Button signout = (Button) findViewById(R.id.sign_out_button);
        final ImageView brain1 = (ImageView) findViewById(R.id.testImagebrain);
       final ImageView brain2 = (ImageView) findViewById(R.id.testImagebrain2);
        //final TextView brain3 = (TextView) findViewById(R.id.textiq);


        Button leaderboard2 = (Button) findViewById(R.id.buttongoogleleader);
        final Button signin2 = (Button) findViewById(R.id.buttongooglesign);






     /*   signin.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

                if (!BaseGameUtils.verifySampleSetup(GameforActivity.this, R.string.app_id)) {
                    Log.w(TAG, "*** Warning: setup problems detected. Sign in may not work!");
                }

                // start the sign-in flow
                Log.d(TAG, "Sign-in button clicked");
                mSignInClicked = true;
                mGoogleApiClient.connect();


               // Games.Leaderboards.submitScore(mGoogleApiClient, getString(R.string.leaderboard_id), iq);

            }
        });*/


        brain1.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        brain1.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:
                        if(!mutestate[0])
                            soundPool.play(soundID, volume, volume, 1, 0, 1f);
                        if (isOnline()) {
                            googlesigninbtnflg = true;
                            if (!BaseGameUtils.verifySampleSetup(GameforActivity.this, R.string.app_id)) {
                                Log.w(TAG, "*** Warning: setup problems detected. Sign in may not work!");
                            }

                            // start the sign-in flow
                            Log.d(TAG, "Sign-in button clicked");
                            mSignInClicked = true;
                            mGoogleApiClient.connect();
                            mainsignin = true;
                            editor.putBoolean("mainsignin", mainsignin);
                            editor.commit();

                        }

                        else alertbox();
                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        brain1.setAlpha(1f);
                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });



        brain2.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        signin.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:


                        if(!mutestate[0])
                            soundPool.play(soundID, volume, volume, 1, 0, 1f);
                        if (isOnline()) {
                            Player p = Games.Players.getCurrentPlayer(mGoogleApiClient);


                            if (mGoogleApiClient.isConnected() && p.getDisplayName() != null)
                                startActivityForResult(Games.Leaderboards.getLeaderboardIntent(mGoogleApiClient,
                                        getString(R.string.leaderboard_id)), REQUEST_LEADERBOARD);


                            else {
                                mGoogleApiClient.disconnect();

                                googlesigninbtnflg = true;
                                if (!BaseGameUtils.verifySampleSetup(GameforActivity.this, R.string.app_id)) {
                                    Log.w(TAG, "*** Warning: setup problems detected. Sign in may not work!");
                                }

                                // start the sign-in flow
                                Log.d(TAG, "Sign-in button clicked");
                                mSignInClicked = true;
                                mGoogleApiClient.connect();
                                mainsignin = true;
                                editor.putBoolean("mainsignin", mainsignin);
                                editor.commit();


                            }
                        }
                        else alertbox();

                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        signin.setAlpha(1f);
                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });

        brain3.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        brain3.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:
                        if(!mutestate[0])
                            soundPool.play(soundID, volume, volume, 1, 0, 1f);

                        if (isOnline()){
                            if (!mGoogleApiClient.isConnected()) {

                                googlesigninbtnflg = true;
                                if (!BaseGameUtils.verifySampleSetup(GameforActivity.this, R.string.app_id)) {
                                    Log.w(TAG, "*** Warning: setup problems detected. Sign in may not work!");
                                }

                                // start the sign-in flow
                                Log.d(TAG, "Sign-in button clicked");
                                mSignInClicked = true;
                                mGoogleApiClient.connect();
                                mainsignin = true;
                                editor.putBoolean("mainsignin", mainsignin);
                                editor.commit();
                            } else {
                                Player p = Games.Players.getCurrentPlayer(mGoogleApiClient);


                                if (mGoogleApiClient.isConnected() && p.getDisplayName() != null)
                                    startActivityForResult(Games.Leaderboards.getLeaderboardIntent(mGoogleApiClient,
                                            getString(R.string.leaderboard_id)), REQUEST_LEADERBOARD);


                                else {
                                    mGoogleApiClient.disconnect();

                                    googlesigninbtnflg = true;
                                    if (!BaseGameUtils.verifySampleSetup(GameforActivity.this, R.string.app_id)) {
                                        Log.w(TAG, "*** Warning: setup problems detected. Sign in may not work!");
                                    }

                                    // start the sign-in flow
                                    Log.d(TAG, "Sign-in button clicked");
                                    mSignInClicked = true;
                                    mGoogleApiClient.connect();
                                    mainsignin = true;
                                    editor.putBoolean("mainsignin", mainsignin);
                                    editor.commit();
                                }

                            }

                }
                else alertbox();
                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        brain3.setAlpha(1f);
                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });


        signin.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        signin.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:
                        if(!mutestate[0])
                            soundPool.play(soundID, volume, volume, 1, 0, 1f);
                        if (isOnline()) {
                            googlesigninbtnflg = true;
                            if (!BaseGameUtils.verifySampleSetup(GameforActivity.this, R.string.app_id)) {
                                Log.w(TAG, "*** Warning: setup problems detected. Sign in may not work!");
                            }

                            // start the sign-in flow
                            Log.d(TAG, "Sign-in button clicked");
                            mSignInClicked = true;
                            mGoogleApiClient.connect();
                            mainsignin = true;
                            editor.putBoolean("mainsignin", mainsignin);
                            editor.commit();

                        }
                        else alertbox();
                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        signin.setAlpha(1f);
                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });


        leaderboard.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        signin.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:


                        if(!mutestate[0])
                            soundPool.play(soundID, volume, volume, 1, 0, 1f);

                        if (isOnline()) {
                            Player p = Games.Players.getCurrentPlayer(mGoogleApiClient);


                            if (mGoogleApiClient.isConnected() && p.getDisplayName() != null)
                                startActivityForResult(Games.Leaderboards.getLeaderboardIntent(mGoogleApiClient,
                                        getString(R.string.leaderboard_id)), REQUEST_LEADERBOARD);


                            else {
                                mGoogleApiClient.disconnect();

                                googlesigninbtnflg = true;
                                if (!BaseGameUtils.verifySampleSetup(GameforActivity.this, R.string.app_id)) {
                                    Log.w(TAG, "*** Warning: setup problems detected. Sign in may not work!");
                                }

                                // start the sign-in flow
                                Log.d(TAG, "Sign-in button clicked");
                                mSignInClicked = true;
                                mGoogleApiClient.connect();
                                mainsignin = true;
                                editor.putBoolean("mainsignin", mainsignin);
                                editor.commit();


                            }

                        }
                        else alertbox();
                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        signin.setAlpha(1f);
                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });

        leaderboard2.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        signin.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:

                        if(!mutestate[0])
                            soundPool.play(soundID, volume, volume, 1, 0, 1f);

                        if(isOnline()) {
                            Player p = Games.Players.getCurrentPlayer(mGoogleApiClient);


                            if (mGoogleApiClient.isConnected() && p.getDisplayName() != null)
                                startActivityForResult(Games.Leaderboards.getLeaderboardIntent(mGoogleApiClient,
                                        getString(R.string.leaderboard_id)), REQUEST_LEADERBOARD);


                            else {
                                mGoogleApiClient.disconnect();

                                googlesigninbtnflg = true;
                                if (!BaseGameUtils.verifySampleSetup(GameforActivity.this, R.string.app_id)) {
                                    Log.w(TAG, "*** Warning: setup problems detected. Sign in may not work!");
                                }

                                // start the sign-in flow
                                Log.d(TAG, "Sign-in button clicked");
                                mSignInClicked = true;
                                mGoogleApiClient.connect();
                                mainsignin = true;
                                editor.putBoolean("mainsignin", mainsignin);
                                editor.commit();


                            }
                        }
                        else alertbox();
                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        signin.setAlpha(1f);
                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });


        signin2.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        signin2.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:
                        if(!mutestate[0])
                            soundPool.play(soundID, volume, volume, 1, 0, 1f);

                        if (isOnline()) {
                            googlesigninbtnflg = true;
                            if (!BaseGameUtils.verifySampleSetup(GameforActivity.this, R.string.app_id)) {
                                Log.w(TAG, "*** Warning: setup problems detected. Sign in may not work!");
                            }

                            // start the sign-in flow
                            Log.d(TAG, "Sign-in button clicked");
                            mSignInClicked = true;
                            mGoogleApiClient.connect();
                            mainsignin = true;
                            editor.putBoolean("mainsignin", mainsignin);
                            editor.commit();

                        }

                        else alertbox();
                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        signin2.setAlpha(1f);
                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });
        /*leaderboard.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {


                startActivityForResult(Games.Leaderboards.getLeaderboardIntent(mGoogleApiClient,
                        getString(R.string.leaderboard_id)), REQUEST_LEADERBOARD);
            }
        });*/

     /*   leaderboard2.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                startActivityForResult(Games.Leaderboards.getLeaderboardIntent(mGoogleApiClient,
                        getString(R.string.leaderboard_id)), REQUEST_LEADERBOARD);
            }
        });*/
        signout.setSoundEffectsEnabled(false);
        signout.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                // mSignInClicked = false;
                // Games.signOut(mGoogleApiClient);
                // mGoogleApiClient.disconnect();


                mExplicitSignOut = true;
                if (mGoogleApiClient != null && mGoogleApiClient.isConnected()) {
                    Games.signOut(mGoogleApiClient);
                    mGoogleApiClient.disconnect();
                }
                mainsignin = false;

                editor.putBoolean("mainsignin", mainsignin);
                editor.commit();
                // show sign-in button, hide the sign-out button
                findViewById(R.id.sign_in_button).setVisibility(View.VISIBLE);
                findViewById(R.id.button29).setVisibility(View.INVISIBLE);
                findViewById(R.id.sign_out_button).setVisibility(View.INVISIBLE);
            }
        });
    /*    signout2.setSoundEffectsEnabled(false);
        signout2.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                // mSignInClicked = false;
                // Games.signOut(mGoogleApiClient);
                // mGoogleApiClient.disconnect();


                mExplicitSignOut = true;
                if (mGoogleApiClient != null && mGoogleApiClient.isConnected()) {
                    Games.signOut(mGoogleApiClient);
                    mGoogleApiClient.disconnect();
                }
                mainsignin = false;

                editor.putBoolean("mainsignin", mainsignin);
                editor.commit();
                // show sign-in button, hide the sign-out button
                findViewById(R.id.buttongooglesign).setVisibility(View.VISIBLE);
                findViewById(R.id.buttongoogleleader).setVisibility(View.INVISIBLE);

            }
        });*/







        Bitmap croppedimage2, rightcroppedimage2, rightcroppedimage;



        if (setBitmap.getHeight() < setBitmap.getWidth())

        {



            //     if(newgame == 0)
            //   {

            matrix1eyes.postScale(conversiony / btmheighteyes, conversiony / btmheighteyes);
            resizedBitmap = Bitmap.createBitmap(setBitmap, 0, 0, setBitmap.getWidth(), setBitmap.getHeight(), matrix1eyes, true);
            //     SaveImagejane(resizedBitmap);

            //}

           /*else
            {

                photoPath = "/storage/emulated/0/Vivo/" + ".pic2.jpg";
                resizedBitmap = BitmapFactory.decodeFile(photoPath);

            }*/


            croppedimage2 = Bitmap.createBitmap(resizedBitmap, lefteyex, (int) (lefteyey + (lefteyey1 - lefteyey) / 2 - (conversiony - resizedBitmap.getHeight()) / 2), lefteyex1 - lefteyex, (lefteyey1 - lefteyey) / 2);
            croppedBitmap = Bitmap.createBitmap(resizedBitmap, lefteyex, (int) (lefteyey - (conversiony - resizedBitmap.getHeight()) / 2), lefteyex1 - lefteyex, (lefteyey1 - lefteyey) / 2);


            rightcroppedimage2 = Bitmap.createBitmap(resizedBitmap, righteyex, (int) (righteyey + (righteyey1 - righteyey) / 2 - (conversiony - resizedBitmap.getHeight()) / 2), righteyex1 - righteyex, (righteyey1 - righteyey) / 2);
            rightcroppedimage = Bitmap.createBitmap(resizedBitmap, righteyex, (int) (righteyey - (conversiony - resizedBitmap.getHeight()) / 2), righteyex1 - righteyex, (righteyey1 - righteyey) / 2);

        } else {






       //     if(newgame == 0)
         //   {

                matrix1eyes.postScale(conversiony / btmheighteyes, conversiony / btmheighteyes);
                resizedBitmap = Bitmap.createBitmap(setBitmap, 0, 0, setBitmap.getWidth(), setBitmap.getHeight(), matrix1eyes, true);
           //     SaveImagejane(resizedBitmap);

           //}

           /*else
            {

                photoPath = "/storage/emulated/0/Vivo/" + ".pic2.jpg";
                resizedBitmap = BitmapFactory.decodeFile(photoPath);

            }*/

            //p2xd = eyesXcoordinate+ ((myValue-p2x)/rx*(eyesXcoordinate2-eyesXcoordinate)-(rx-resizedBitmap.);
            //p2x = (int) p2xd;
            croppedimage2 = Bitmap.createBitmap(resizedBitmap, lefteyex - (rx - resizedBitmap.getWidth()) / 2, lefteyey + (lefteyey1 - lefteyey) / 2, lefteyex1 - lefteyex, (lefteyey1 - lefteyey) / 2);
            croppedBitmap = Bitmap.createBitmap(resizedBitmap, lefteyex - (rx - resizedBitmap.getWidth()) / 2, lefteyey, lefteyex1 - lefteyex, (lefteyey1 - lefteyey) / 2);

            rightcroppedimage2 = Bitmap.createBitmap(resizedBitmap, righteyex - (rx - resizedBitmap.getWidth()) / 2, righteyey + (righteyey1 - righteyey) / 2, righteyex1 - righteyex, (righteyey1 - righteyey) / 2);
            rightcroppedimage = Bitmap.createBitmap(resizedBitmap, righteyex - (rx - resizedBitmap.getWidth()) / 2, righteyey, righteyex1 - righteyex, (righteyey1 - righteyey) / 2);


        }


        //resizedBitmap= sketch(resizedBitmap);
        croppedBitmap = sketch((croppedBitmap));
        croppedimage2 = sketch((croppedimage2));


        rightcroppedimage2 = sketch((rightcroppedimage2));
        rightcroppedimage = sketch((rightcroppedimage));


        ViewGroup.MarginLayoutParams marginParams1eyes = new ViewGroup.MarginLayoutParams(fr.getLayoutParams());
        marginParams1eyes.setMargins(lefteyex, lefteyey, 0, 0);
        FrameLayout.LayoutParams layoutParams1eyes = new FrameLayout.LayoutParams(marginParams1eyes);
        layoutParams1eyes.width = lefteyex1 - lefteyex;
        layoutParams1eyes.height = lefteyey1 - lefteyey;
        freyes.setLayoutParams(layoutParams1eyes);
        freyes.setVisibility(View.VISIBLE);

        GradientDrawable drawable3 = (GradientDrawable) imgeyes.getBackground();
        drawable3.setColor(important.getPixel(lefteyex + 40 - (rx - important.getWidth()) / 2, (int) (lefteyey - (conversiony - important.getHeight()) / 2 - 10)));


        //imgeyes.setBackgroundColor(important.getPixel(lefteyey, lefteyey - 10));


        ViewGroup.MarginLayoutParams marginParamsright = new ViewGroup.MarginLayoutParams(righteyelidback.getLayoutParams());
        marginParamsright.setMargins(righteyex, righteyey, 0, 0);
        FrameLayout.LayoutParams layoutParamsright = new FrameLayout.LayoutParams(marginParamsright);
        layoutParamsright.width = righteyex1 - righteyex;
        layoutParamsright.height = righteyey1 - righteyey;
        righteyelidback.setLayoutParams(layoutParamsright);
        righteyelidback.setVisibility(View.VISIBLE);

        GradientDrawable drawable4 = (GradientDrawable) righteyelidbackimg.getBackground();
        drawable4.setColor(important.getPixel(righteyex + 40 - (rx - important.getWidth()) / 2, (int) (righteyey - (conversiony - important.getHeight()) / 2 - 10)));


        ViewGroup.MarginLayoutParams marginParams2eyes = new ViewGroup.MarginLayoutParams(feyes.getLayoutParams());
        marginParams2eyes.setMargins(lefteyex, lefteyey + (lefteyey1 - lefteyey) / 2, 0, 0);
        FrameLayout.LayoutParams layoutParams2eyes = new FrameLayout.LayoutParams(marginParams2eyes);
        layoutParams2eyes.height = (lefteyey1 - lefteyey) / 2;
        layoutParams2eyes.width = lefteyex1 - lefteyex;


        ViewGroup.MarginLayoutParams marginParamsright2eyes = new ViewGroup.MarginLayoutParams(righteyelidbtm.getLayoutParams());
        marginParamsright2eyes.setMargins(righteyex, righteyey + (righteyey1 - righteyey) / 2, 0, 0);
        FrameLayout.LayoutParams layoutParamsright2eyes = new FrameLayout.LayoutParams(marginParamsright2eyes);
        layoutParamsright2eyes.height = (righteyey1 - righteyey) / 2;
        layoutParamsright2eyes.width = righteyex1 - righteyex;


        ViewGroup.MarginLayoutParams marginParams3 = new ViewGroup.MarginLayoutParams(feyes.getLayoutParams());
        marginParams3.setMargins(lefteyex, lefteyey, 0, 0);
        FrameLayout.LayoutParams layoutParams3 = new FrameLayout.LayoutParams(marginParams3);
        layoutParams3.height = (lefteyey1 - lefteyey) / 2;
        layoutParams3.width = lefteyex1 - lefteyex;


        ViewGroup.MarginLayoutParams marginParamsright3 = new ViewGroup.MarginLayoutParams(righteyelid.getLayoutParams());
        marginParamsright3.setMargins(righteyex, righteyey, 0, 0);
        FrameLayout.LayoutParams layoutParamsright3 = new FrameLayout.LayoutParams(marginParamsright3);
        layoutParamsright3.height = (righteyey1 - righteyey) / 2;
        layoutParamsright3.width = righteyex1 - righteyex;


        righteyelidbtm.setLayoutParams(layoutParamsright2eyes);
        righteyelid.setLayoutParams(layoutParamsright3);
        righteyelid.setVisibility(View.VISIBLE);

        fbottom.setLayoutParams(layoutParams2eyes);
        feyes.setLayoutParams(layoutParams3);
        feyes.setVisibility(View.VISIBLE);


        righteyelidbottomimage.setImageBitmap(getclip(rightcroppedimage2));

        use2 = rightcroppedimage2;

        righteyelidtopimage.setImageBitmap(getclip(rightcroppedimage));
        use4 = rightcroppedimage;

        img2.setImageBitmap(getclip(croppedimage2));
        use1 = croppedimage2;
        movement2.setImageBitmap(getclip(croppedBitmap));
        use3 = croppedBitmap;

        fbottom.setVisibility(View.INVISIBLE);
        righteyelid.setVisibility(View.INVISIBLE);
        righteyelidbtm.setVisibility(View.INVISIBLE);
        freyes.setVisibility(View.INVISIBLE);
        righteyelidback.setVisibility(View.INVISIBLE);
        freyes.setVisibility(View.INVISIBLE);
        righteyelidback.setVisibility(View.INVISIBLE);



        final Button eyebandbutton  = (Button) findViewById(R.id.eyebandbutton);
        final RelativeLayout eyebandrelative = (RelativeLayout) findViewById(R.id.eyebandrelative);

        final Button eyebandbutton1  = (Button) findViewById(R.id.eyebandbutton1);
        final Button eyebandcheck1  = (Button) findViewById(R.id.eyebandcheck1);
        final Button eyebandbutton2  = (Button) findViewById(R.id.eyebandbutton2);
        final Button eyebandcheck2  = (Button) findViewById(R.id.eyebandcheck2);
        final Button eyebandbutton3  = (Button) findViewById(R.id.eyebandbutton3);
        final Button eyebandcheck3  = (Button) findViewById(R.id.eyebandcheck3);
        final Button eyebandbutton4  = (Button) findViewById(R.id.eyebandbutton4);
        final Button eyebandcheck4  = (Button) findViewById(R.id.eyebandcheck4);

        final Button eyebandbutton5  = (Button) findViewById(R.id.eyebandbutton5);
        final Button eyebandcheck5  = (Button) findViewById(R.id.eyebandcheck5);
        final Button eyebandbutton6  = (Button) findViewById(R.id.eyebandbutton6);
        final Button eyebandcheck6  = (Button) findViewById(R.id.eyebandcheck6);


if(sleepbandpick == 1)
{

    eyebandcheck1.setBackgroundResource(R.mipmap.checked);
    eyebandcheck2.setBackgroundResource(R.mipmap.unchecked);
    eyebandcheck3.setBackgroundResource(R.mipmap.unchecked);
    eyebandcheck4.setBackgroundResource(R.mipmap.unchecked);
    eyebandcheck5.setBackgroundResource(R.mipmap.unchecked);
    eyebandcheck6.setBackgroundResource(R.mipmap.unchecked);
}
        else if(sleepbandpick == 2)
        {

            eyebandcheck1.setBackgroundResource(R.mipmap.unchecked);
            eyebandcheck2.setBackgroundResource(R.mipmap.checked);
            eyebandcheck3.setBackgroundResource(R.mipmap.unchecked);
            eyebandcheck4.setBackgroundResource(R.mipmap.unchecked);
            eyebandcheck5.setBackgroundResource(R.mipmap.unchecked);
            eyebandcheck6.setBackgroundResource(R.mipmap.unchecked);
        }
else if(sleepbandpick == 3)
{

    eyebandcheck1.setBackgroundResource(R.mipmap.unchecked);
    eyebandcheck2.setBackgroundResource(R.mipmap.unchecked);
    eyebandcheck3.setBackgroundResource(R.mipmap.checked);
    eyebandcheck4.setBackgroundResource(R.mipmap.unchecked);
    eyebandcheck5.setBackgroundResource(R.mipmap.unchecked);
    eyebandcheck6.setBackgroundResource(R.mipmap.unchecked);
}

else if(sleepbandpick == 4)
{

    eyebandcheck1.setBackgroundResource(R.mipmap.unchecked);
    eyebandcheck2.setBackgroundResource(R.mipmap.unchecked);
    eyebandcheck3.setBackgroundResource(R.mipmap.unchecked);
    eyebandcheck4.setBackgroundResource(R.mipmap.checked);
    eyebandcheck5.setBackgroundResource(R.mipmap.unchecked);
    eyebandcheck6.setBackgroundResource(R.mipmap.unchecked);
}

else if(sleepbandpick == 5)
{

    eyebandcheck1.setBackgroundResource(R.mipmap.unchecked);
    eyebandcheck2.setBackgroundResource(R.mipmap.unchecked);
    eyebandcheck3.setBackgroundResource(R.mipmap.unchecked);
    eyebandcheck4.setBackgroundResource(R.mipmap.unchecked);
    eyebandcheck5.setBackgroundResource(R.mipmap.checked);
    eyebandcheck6.setBackgroundResource(R.mipmap.unchecked);
}
else if(sleepbandpick == 6)
{

    eyebandcheck1.setBackgroundResource(R.mipmap.unchecked);
    eyebandcheck2.setBackgroundResource(R.mipmap.unchecked);
    eyebandcheck3.setBackgroundResource(R.mipmap.unchecked);
    eyebandcheck4.setBackgroundResource(R.mipmap.unchecked);
    eyebandcheck5.setBackgroundResource(R.mipmap.unchecked);
    eyebandcheck6.setBackgroundResource(R.mipmap.checked);
}




        eyebandcheck1.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        eyebandcheck1.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:



                        if(coin[0] - 30 >= 0) {
                            coin[0] = coin[0] - 30;
                            TextView tcoin = (TextView) findViewById(R.id.textcoin);
                            tcoin.setText(Integer.toString(coin[0]));

                            if (!mutestate[0]) soundPool6.play(soundID6, volume, volume, 1, 0, 1f);
                            eyeband1bought = true;
                            editor.putBoolean("eyeband1bought",eyeband1bought);
                            editor.commit();

                            lock();
                        }

                        else{
                            if(vibration) vibrate(200);
                            final MediaPlayer clickaudio = MediaPlayer.create(getApplicationContext(), R.raw.cancel);
                            if(!mutestate[0]) {
                                clickaudio.start();
                                clickaudio.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                                    public void onCompletion(MediaPlayer mp) {
                                        clickaudio.release();

                                    }

                                    ;
                                });
                            }

                        }

                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        eyebandcheck1.setAlpha(1f);

                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });


        eyebandcheck3.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        eyebandcheck3.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:



                        if(coin[0] - 30 >= 0) {
                            coin[0] = coin[0] - 30;
                            TextView tcoin = (TextView) findViewById(R.id.textcoin);
                            tcoin.setText(Integer.toString(coin[0]));
                            if (!mutestate[0]) soundPool6.play(soundID6, volume, volume, 1, 0, 1f);
                            eyeband3bought = true;
                            editor.putBoolean("eyeband3bought",eyeband3bought);
                            editor.commit();

                            lock();
                        }

                        else{
                            if(vibration) vibrate(200);
                            final MediaPlayer clickaudio = MediaPlayer.create(getApplicationContext(), R.raw.cancel);
                            if(!mutestate[0]) {
                                clickaudio.start();
                                clickaudio.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                                    public void onCompletion(MediaPlayer mp) {
                                        clickaudio.release();

                                    }

                                    ;
                                });
                            }

                        }

                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        eyebandcheck3.setAlpha(1f);

                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });

        eyebandcheck4.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        eyebandcheck4.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:



                        if(coin[0] - 30 >= 0) {
                            coin[0] = coin[0] - 30;
                            TextView tcoin = (TextView) findViewById(R.id.textcoin);
                            tcoin.setText(Integer.toString(coin[0]));
                            if (!mutestate[0]) soundPool6.play(soundID6, volume, volume, 1, 0, 1f);
                            eyeband4bought = true;
                            editor.putBoolean("eyeband4bought",eyeband4bought);
                            editor.commit();

                            lock();
                        }

                        else{
                            if(vibration) vibrate(200);
                            final MediaPlayer clickaudio = MediaPlayer.create(getApplicationContext(), R.raw.cancel);
                            if(!mutestate[0]) {
                                clickaudio.start();
                                clickaudio.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                                    public void onCompletion(MediaPlayer mp) {
                                        clickaudio.release();

                                    }

                                    ;
                                });
                            }

                        }

                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        eyebandcheck4.setAlpha(1f);

                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });

        eyebandcheck5.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        eyebandcheck5.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:



                        if(coin[0] - 30 >= 0) {
                            coin[0] = coin[0] - 30;
                            TextView tcoin = (TextView) findViewById(R.id.textcoin);
                            tcoin.setText(Integer.toString(coin[0]));
                            if (!mutestate[0]) soundPool6.play(soundID6, volume, volume, 1, 0, 1f);
                            eyeband5bought = true;
                            editor.putBoolean("eyeband5bought",eyeband5bought);
                            editor.commit();

                            lock();
                        }

                        else{
                            if(vibration) vibrate(200);
                            final MediaPlayer clickaudio = MediaPlayer.create(getApplicationContext(), R.raw.cancel);
                            if(!mutestate[0]) {
                                clickaudio.start();
                                clickaudio.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                                    public void onCompletion(MediaPlayer mp) {
                                        clickaudio.release();

                                    }

                                    ;
                                });
                            }

                        }

                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        eyebandcheck5.setAlpha(1f);

                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });

        eyebandcheck6.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        eyebandcheck6.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:



                        if(coin[0] - 30 >= 0) {
                            coin[0] = coin[0] - 30;
                            TextView tcoin = (TextView) findViewById(R.id.textcoin);
                            tcoin.setText(Integer.toString(coin[0]));
                            if (!mutestate[0]) soundPool6.play(soundID6, volume, volume, 1, 0, 1f);
                            eyeband6bought = true;
                            editor.putBoolean("eyeband6bought",eyeband6bought);
                            editor.commit();

                            lock();
                        }

                        else{

                            if(vibration) vibrate(200);
                            final MediaPlayer clickaudio = MediaPlayer.create(getApplicationContext(), R.raw.cancel);
                            if(!mutestate[0]) {
                                clickaudio.start();
                                clickaudio.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                                    public void onCompletion(MediaPlayer mp) {
                                        clickaudio.release();

                                    }

                                    ;
                                });
                            }

                        }

                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        eyebandcheck6.setAlpha(1f);

                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });



        eyebandbutton1.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        eyebandbutton1.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:
                        final ImageView sleepcoverlayoutimg = (ImageView) findViewById(R.id.sleepcoverimg);

                        sleepcoverlayoutimg.setImageResource(R.mipmap.greeneyecover);
                        if(!mutestate[0])
                            soundPool.play(soundID, volume, volume, 1, 0, 1f);

                        sleepbandpick = 1;

                        editor.putInt("sleepbandpick", sleepbandpick);
                        editor.commit();

                        lock();

                        //eyebandcheck1.setBackgroundResource(R.mipmap.checked);
                       /* eyebandcheck2.setBackgroundResource(R.mipmap.unchecked);
                        eyebandcheck3.setBackgroundResource(R.mipmap.unchecked);
                        eyebandcheck4.setBackgroundResource(R.mipmap.unchecked);
                        eyebandcheck5.setBackgroundResource(R.mipmap.unchecked);
                        eyebandcheck6.setBackgroundResource(R.mipmap.unchecked);*/


                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        eyebandbutton1.setAlpha(1f);

                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });

        eyebandbutton2.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        eyebandbutton2.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:
                        final ImageView sleepcoverlayoutimg = (ImageView) findViewById(R.id.sleepcoverimg);

                        sleepcoverlayoutimg.setImageResource(R.mipmap.redeyecover);
                        if(!mutestate[0])
                            soundPool.play(soundID, volume, volume, 1, 0, 1f);

                        sleepbandpick = 2;
                        editor.putInt("sleepbandpick", sleepbandpick);
                        editor.commit();

                            eyebandcheck2.setBackgroundResource(R.mipmap.checked);

                            if (eyeband1bought)eyebandcheck1.setBackgroundResource(R.mipmap.unchecked);
                            else eyebandcheck1.setBackgroundResource(R.mipmap.buybtn);

                            if (eyeband3bought)eyebandcheck3.setBackgroundResource(R.mipmap.unchecked);
                            else eyebandcheck3.setBackgroundResource(R.mipmap.buybtn);
                            if (eyeband4bought)eyebandcheck4.setBackgroundResource(R.mipmap.unchecked);
                            else eyebandcheck4.setBackgroundResource(R.mipmap.buybtn);
                            if (eyeband5bought)eyebandcheck5.setBackgroundResource(R.mipmap.unchecked);
                            else eyebandcheck5.setBackgroundResource(R.mipmap.buybtn);
                            if (eyeband6bought)eyebandcheck6.setBackgroundResource(R.mipmap.unchecked);
                            else eyebandcheck6.setBackgroundResource(R.mipmap.buybtn);




                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        eyebandbutton2.setAlpha(1f);

                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });

        eyebandbutton3.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        eyebandbutton3.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:
                        final ImageView sleepcoverlayoutimg = (ImageView) findViewById(R.id.sleepcoverimg);

                        sleepcoverlayoutimg.setImageResource(R.mipmap.buleeyecover);
                        if(!mutestate[0])
                            soundPool.play(soundID, volume, volume, 1, 0, 1f);

                        sleepbandpick = 3;
                        editor.putInt("sleepbandpick", sleepbandpick);
                        editor.commit();
                        lock();


                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        eyebandbutton3.setAlpha(1f);

                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });


        eyebandbutton4.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        eyebandbutton4.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:
                        final ImageView sleepcoverlayoutimg = (ImageView) findViewById(R.id.sleepcoverimg);

                        sleepcoverlayoutimg.setImageResource(R.mipmap.purpleeyecover);
                        if(!mutestate[0])
                            soundPool.play(soundID, volume, volume, 1, 0, 1f);

                        sleepbandpick = 4;
                        editor.putInt("sleepbandpick", sleepbandpick);
                        editor.commit();
                        lock();


                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        eyebandbutton4.setAlpha(1f);

                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });

        eyebandbutton5.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        eyebandbutton5.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:

                        final ImageView sleepcoverlayoutimg = (ImageView) findViewById(R.id.sleepcoverimg);

                        sleepcoverlayoutimg.setImageResource(R.mipmap.brownieeyecover);

                        if(!mutestate[0])
                            soundPool.play(soundID, volume, volume, 1, 0, 1f);

                        sleepbandpick = 5;
                        editor.putInt("sleepbandpick", sleepbandpick);
                        editor.commit();
                       lock();


                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        eyebandbutton5.setAlpha(1f);

                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });

        eyebandbutton6.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        eyebandbutton6.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:

                        final ImageView sleepcoverlayoutimg = (ImageView) findViewById(R.id.sleepcoverimg);

                        sleepcoverlayoutimg.setImageResource(R.mipmap.yelloweyecover);
                        if(!mutestate[0])
                            soundPool.play(soundID, volume, volume, 1, 0, 1f);

                        sleepbandpick = 6;
                        editor.putInt("sleepbandpick", sleepbandpick);
                        editor.commit();
                        lock();


                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        eyebandbutton6.setAlpha(1f);

                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });


        final ProgressBar mProgress;

        //final int[] mProgressStatus = {0};
        mProgress = (ProgressBar) findViewById(R.id.progressBar);
        final Handler mHandler;
       final TextView t1 = (TextView) findViewById(R.id.textView);
        final TextView tcoin = (TextView) findViewById(R.id.textcoin);
        final boolean eatbtnpressed[] = {false};


        tcoin.setText(Integer.toString(coin[0]));
        //final TextView t3 = (TextView) findViewById(R.id.textView2);

        final TextView iqnum = (TextView) findViewById(R.id.textiq);
       final TextView t2 = (TextView) findViewById(R.id.editText2); // progress bar control


        // control for energy bar

        //c1,c4,c5 controls for hunger

        final CircularProgressBar c1 = (CircularProgressBar) findViewById(R.id.circularprogressbar1);

        //c2,c6,c7 controls for hygiene
        final CircularProgressBar c2 = (CircularProgressBar) findViewById(R.id.circularprogressbar2);

        final CircularProgressBar c3 = (CircularProgressBar) findViewById(R.id.circularprogressbar3);
        final CircularProgressBar cfour = (CircularProgressBar) findViewById(R.id.circularprogressbarfour);

        //csix control for love
        final CircularProgressBar csix = (CircularProgressBar) findViewById(R.id.circularprogressbar6);


        int width = (int) (density1 * 12);
        // c1.setstroke(width);
        c1.setTitleColor(Color.argb(255, 255, 255, 255));
        //  c2.setstroke(width);

        c1.setProgressColor(Color.argb(255, 232, 75, 60));
        //c1.setbackgroundcolor(Color.argb(255,52,73,94));
        c2.setTitleColor(Color.argb(255, 255, 255, 255));
        c2.setProgressColor(Color.argb(255, 25, 189, 155));

        c3.setTitleColor(Color.argb(255, 255, 255, 255));
        c3.setProgressColor(Color.argb(255, 143, 68, 173));
        cfour.setTitleColor(Color.argb(255, 255, 255, 255));
        cfour.setProgressColor(Color.argb(255, 53, 152, 219));
        csix.setTitleColor(Color.argb(255, 255, 255, 255));
        csix.setProgressColor(Color.argb(255, 230, 125, 33));


        speedincrement2(c2, process[1] + 1, process[1], 1);
        speedincrement3(c3, process[2] + 1, process[2], 2);
        speedincrement5(csix, process[5] + 1, process[5], 5);
        speedincrement(c1, process[0] + 1, process[0], 0);
        speedincrement4(cfour, process[3] + 1, process[3], 5);
        checkoverall();



        iqnum.setText(Integer.toString(iq));
        // create new animation for energy bar


        final int lefteyexlast = lefteyex;
        final int lefteyeylast = lefteyey;
        final int lefteyex1last = lefteyex1;
        final int lefteyey1last = lefteyey1;

        final int righteyexlast = righteyex;
        final int righteyeylast = righteyey;
        final int righteyex1last = righteyex1;
        final int righteyey1last = righteyey1;




       // final ImageView soupbutton = (ImageView) findViewById(R.id.buttonsoup);

        final Button sortingbtn = (Button) findViewById(R.id.calc);
        final Button opgamebtn = (Button) findViewById(R.id.buttonoperation);
        final Button colorbtn = (Button) findViewById(R.id.colordeception);
        final Button simplicitybtn = (Button) findViewById(R.id.simpilictyicon);
        final Button memorybtn = (Button) findViewById(R.id.memorygame);
        final Button colorpickbtn = (Button) findViewById(R.id.colorpick);

        final Button share = (Button) findViewById(R.id.imageButtonshare);
        final FrameLayout printscreenlayout = (FrameLayout) findViewById(R.id.printscreenshow);
        final ImageView printscreenimage = (ImageView) findViewById(R.id.printimage);
        final RelativeLayout printscreenlayout2 = (RelativeLayout) findViewById(R.id.printscreenshow1);
        final Button cancelbutton = (Button) findViewById(R.id.button7);
        final RelativeLayout coinlayout = (RelativeLayout) findViewById(R.id.coinlayout);
        final ImageButton coinvideoimg = (ImageButton) findViewById(R.id.advideocoin);
        final ImageButton coin1img = (ImageButton) findViewById(R.id.coin1img);
        final ImageButton coin2img = (ImageButton) findViewById(R.id.coin2img);

        final Button sharepicture = (Button) findViewById(R.id.button8);
       // final MediaPlayer coinbelow10 = MediaPlayer.create(getApplicationContext(), R.raw.coinbelow10);
        final MediaPlayer coinabove10 = MediaPlayer.create(getApplicationContext(), R.raw.coinabove10);
        coin2img.setSoundEffectsEnabled(false);

        coin2img.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                coin[0] = coin[0] + 1000;

                final MediaPlayer clickaudio = MediaPlayer.create(getApplicationContext(), R.raw.coinabove10);
                if(!mutestate[0]) {
                    clickaudio.start();
                    clickaudio.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                        public void onCompletion(MediaPlayer mp) {
                            clickaudio.release();

                        }

                        ;
                    });
                }
                coinflip();
                tcoin.setText(Integer.toString(coin[0]));
            }
        });

        sharepicture.setSoundEffectsEnabled(false);
        sharepicture.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

                sharepicture.setEnabled(false);
                String text = "";
                Uri pictureUri = Uri.fromFile(new File(location));
                Intent shareIntent = new Intent();
                shareIntent.setAction(Intent.ACTION_SEND);
                shareIntent.putExtra(Intent.EXTRA_TEXT, text);
                shareIntent.putExtra(Intent.EXTRA_STREAM, pictureUri);
                shareIntent.setType("image/*");
                shareIntent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);
                startActivity(Intent.createChooser(shareIntent, shareyourvivo));

            }
        });


        // final LinearLayout linear1 = new LinearLayout(x);
        final HorizontalScrollView kitchenhor = (HorizontalScrollView) findViewById(R.id.kitchenlayoutscroll);
   //     final HorizontalScrollView mainScroll = (HorizontalScrollView) findViewById(R.id.hor2);


       // Typeface robotobold = Typeface.createFromAsset(getAssets(), "robotobold.ttf");

        // final LinearLayout kitchenlinear = (LinearLayout) findViewById(R.id.kitchenlayoutlinear);
        // final FrameLayout mainmenuframe = (FrameLayout) findViewById(R.id.mainmenu);
      //  final FrameLayout fastfoodframe = (FrameLayout) findViewById(R.id.fastfoodmenu);
        final RelativeLayout foodmenulayout = (RelativeLayout) findViewById(R.id.Foodmenu);
      //  final ImageButton foodmenu = (ImageButton) findViewById(R.id.imageButton30);
      //  final ImageButton mealsmenu = (ImageButton) findViewById(R.id.fastfoodbutton);
        final ImageButton meals = (ImageButton) findViewById(R.id.mealsbutton);
        final TextView Menutext = (TextView) findViewById(R.id.textView30);



        final ImageButton veggiesmenu = (ImageButton) findViewById(R.id.veggiesButton);
        final ImageButton fruitsmenu = (ImageButton) findViewById(R.id.fruitsbutton);
        final ImageButton desertsmenumenu = (ImageButton) findViewById(R.id.desertsbutton);
        final ImageButton drinksmenu = (ImageButton) findViewById(R.id.drinkbutton);
        final ImageButton regionalmenu = (ImageButton) findViewById(R.id.regionalbutton);
        final ImageButton cleaningmenu = (ImageButton) findViewById(R.id.cleaningbutton);
        final ImageButton potionsmenu = (ImageButton) findViewById(R.id.potionsbutton);



        //final FrameLayout pizzmenulayout = (FrameLayout) findViewById(R.id.pizzamenu);
        //final FrameLayout breakfastmenulayout = (FrameLayout) findViewById(R.id.breakfast);
        //final FrameLayout startersmenulayout = (FrameLayout) findViewById(R.id.startersmenu);
        final FrameLayout veggiesmenulayout = (FrameLayout) findViewById(R.id.veggiesmenu);
        final FrameLayout fruitsmenulayout = (FrameLayout) findViewById(R.id.fruitmenu);
        final FrameLayout desertsmenumenulayut = (FrameLayout) findViewById(R.id.desertmenu);
        final FrameLayout drinksmenulayout = (FrameLayout) findViewById(R.id.drinksmenu);
        final FrameLayout regionalmenulayout = (FrameLayout) findViewById(R.id.regionalmenu);
        final FrameLayout cleaninglayout = (FrameLayout) findViewById(R.id.Cleaninglayout);
        final FrameLayout potionslayout = (FrameLayout) findViewById(R.id.potionslayout);
        final Button canceltomain = (Button) findViewById(R.id.canceltomain);


        final TextView meattext2 = (TextView) findViewById(R.id.tbonetext);
        //button_sbm = (ImageView) findViewById(R.id.button);
        button_sbm2 = (ImageButton) findViewById(R.id.button2);
        button_sbm3 = (ImageButton) findViewById(R.id.button3);
        button_sbm4 = (Button) findViewById(R.id.button4);


      //  final HorizontalScrollView scroll = (HorizontalScrollView) findViewById(R.id.hor2);
        final ImageView toiletsign = (ImageView) findViewById(R.id.imageView32);
        final Button lamp1 = (Button) findViewById(R.id.imageView30);
        final Button lamp2 = (Button) findViewById(R.id.imageView31);
        final TextView Modename = (TextView) findViewById(R.id.Modename);
        final Button shop = (Button) findViewById(R.id.shopframeimg);
        Button cancelshop = (Button) findViewById(R.id.cancelimg);
        final LinearLayout segments = (LinearLayout) findViewById(R.id.segments);
        final Button canceltomain2 = (Button) findViewById(R.id.imageButton2);
        final FrameLayout mealslayout = (FrameLayout) findViewById(R.id.Mealsmain);
        final Button mealstofood = (Button) findViewById(R.id.mealstofood);
        final Button segmentkitchen = (Button) findViewById(R.id.button14);
        final Button segmenthygiene = (Button) findViewById(R.id.button15);
        final Button segmentbedroom = (Button) findViewById(R.id.button16);
        final Button segmentgameroom = (Button) findViewById(R.id.button17);
        final Button segmentwc = (Button) findViewById(R.id.button18);

       // Menutext.setTypeface(robotobold);
        Menutext.setTextSize(30);

        final TextView lovetext = (TextView) findViewById(R.id.editText8);
        final RelativeLayout shopframe = (RelativeLayout) findViewById(R.id.market);
        final ImageButton setting = (ImageButton) findViewById(R.id.imageView26);
        final RelativeLayout wclayout = (RelativeLayout) findViewById(R.id.wclayout);
        final TextView sharettext = (TextView) findViewById(R.id.sharetext);
        final RelativeLayout likelayout = (RelativeLayout) findViewById(R.id.LikeLayout);
        final FrameLayout printscreen = (FrameLayout) findViewById(R.id.printscreenshow);
        final TextView sharetext = (TextView) findViewById(R.id.sharetext);

        final Button cancellikebutton = (Button) findViewById(R.id.button35);
        final Button likebutton = (Button) findViewById(R.id.button34);

        likebutton.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        likebutton.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:

                        if(!mutestate[0])
                            soundPool.play(soundID, volume, volume, 1, 0, 1f);
                        likelayout.setVisibility(View.VISIBLE);
                        likebutton.setVisibility(View.INVISIBLE);
                        cancelbutton.setVisibility(View.INVISIBLE);
                        sharepicture.setVisibility(View.INVISIBLE);
                        cancellikebutton.setVisibility(View.VISIBLE);
                        printscreen.setVisibility(View.INVISIBLE);
                        sharetext.setVisibility(View.INVISIBLE);

                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        likebutton.setAlpha(1f);


                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });


        cancellikebutton.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        cancellikebutton.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:
                        if(!mutestate[0])
                            soundPool.play(soundID, volume, volume, 1, 0, 1f);
                        likelayout.setVisibility(View.INVISIBLE);
                        likebutton.setVisibility(View.VISIBLE);
                        cancelbutton.setVisibility(View.VISIBLE);
                        sharepicture.setVisibility(View.VISIBLE);
                        cancellikebutton.setVisibility(View.INVISIBLE);
                        printscreen.setVisibility(View.VISIBLE);
                        sharetext.setVisibility(View.VISIBLE);
                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        cancellikebutton.setAlpha(1f);


                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });


        //Typeface tf31 = Typeface.createFromAsset(getAssets(), "irisupsbold.ttf");
        //sharettext.setTypeface(tf31);
        //sharettext.setTextSize(40);
        final MediaPlayer shareaudio = MediaPlayer.create(getApplicationContext(), R.raw.share);
        final Button muhurimg = (Button) findViewById(R.id.muhurimg);
        share.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        share.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:
                        share.setVisibility(View.INVISIBLE);
                        muhurimg.setVisibility(View.VISIBLE);
                        Bitmap x = screenShot(getWindow().getDecorView().getRootView());

                        Bundle params = new Bundle();
                        params.putString("image_name", "sharepressed");
                        params.putString("full_text", "sharepressed");
                        mFirebaseAnalytics.logEvent("sharepressed", params);

                        SaveImage(x);
                        STATE = MARKETEXIT;

                        printscreenlayout.setVisibility(View.VISIBLE);
                        printscreenlayout2.setVisibility(View.VISIBLE);
                        shopframe.setVisibility(View.INVISIBLE);
                        if(!mutestate[0])shareaudio.start();
                        main.setEnabled(false);
                        sleeplayout.setEnabled(false);
                        lin1.setEnabled(false);
                        lin2.setEnabled(false);
                        lin3.setEnabled(false);
                        lin4.setEnabled(false);
                        lin5.setEnabled(false);
                        brain3.setEnabled(false);
                        lin6.setEnabled(false);
                        lin7.setEnabled(false);
                        lin8.setEnabled(false);
                        lin9.setEnabled(false);
                        lin10.setEnabled(false);
                        lin11.setEnabled(false);
                        lin12.setEnabled(false);
                        lin13.setEnabled(false);
                        lin14.setEnabled(false);
                        lin15.setEnabled(false);
                        lin16.setEnabled(false);
                        lin17.setEnabled(false);
                        lin18.setEnabled(false);
                        lin19.setEnabled(false);
                        lin20.setEnabled(false);
                        lin21.setEnabled(false);
                        lin22.setEnabled(false);
                        lin23.setEnabled(false);
                        lin24.setEnabled(false);
                        lin25.setEnabled(false);
                        lin26.setEnabled(false);
                        lin27.setEnabled(false);
                        lin28.setEnabled(false);
                        shop.setEnabled(false);

                        wclayout.setEnabled(false);
                        peebtn.setEnabled(false);
                        button_sbm3.setEnabled(false);
                        washhandbutton.setEnabled(false);
                        button_sbm4.setEnabled(false);
                        //segments.setEnabled(false);
                        //meattext2.setText("Meat:" + Integer.toString(marketarray[meatindex]));
                        // mainmenuframe.setVisibility(View.INVISIBLE);
                        //fastfoodframe.setVisibility(View.INVISIBLE);
                        foodmenulayout.setVisibility(View.INVISIBLE);


                        //sleeplayout.setVisibility(View.INVISIBLE);
                        //  setting.setVisibility(View.INVISIBLE);
                        //segments.setVisibility(View.INVISIBLE);
                        //vunglePub.playAd();

                        //                       mAdView.setVisibility(View.INVISIBLE);
                        segmentkitchen.setEnabled(false);
                        segmenthygiene.setEnabled(false);
                        segmentbedroom.setEnabled(false);
                        segmentgameroom.setEnabled(false);
                        segmentwc.setEnabled(false);


                        printscreenimage.setImageBitmap(x);

                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        share.setAlpha(1f);


                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });

        //  fireworks();

        cancelbutton.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        cancelbutton.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:
                        printscreenlayout2.setVisibility(View.INVISIBLE);
                        if(!mutestate[0])
                            soundPool.play(soundID, volume, volume, 1, 0, 1f);
                        share.setVisibility(View.VISIBLE);
                        STATE = MAINSTATE;

                        //STATE = MARKETEXIT;
                        muhurimg.setVisibility(View.INVISIBLE);
                        share.setVisibility(View.VISIBLE);
                        // sleeplayout.setVisibility(View.VISIBLE);
                      //  fastfoodframe.setVisibility(View.INVISIBLE);
                        mealslayout.setVisibility(View.INVISIBLE);
                        // mAdView.setVisibility(View.VISIBLE);
                        main.setEnabled(true);
                        lin1.setEnabled(true);
                        lin2.setEnabled(true);
                        lin3.setEnabled(true);
                        lin4.setEnabled(true);
                        lin5.setEnabled(true);
                        brain3.setEnabled(true);
                        lin6.setEnabled(true);
                        lin7.setEnabled(true);
                        lin8.setEnabled(true);
                        lin9.setEnabled(true);
                        lin10.setEnabled(true);
                        lin11.setEnabled(true);
                        lin12.setEnabled(true);
                        lin13.setEnabled(true);
                        lin14.setEnabled(true);
                        lin15.setEnabled(true);
                        lin16.setEnabled(true);
                        lin17.setEnabled(true);
                        lin18.setEnabled(true);
                        lin19.setEnabled(true);
                        lin20.setEnabled(true);
                        lin21.setEnabled(true);
                        lin22.setEnabled(true);
                        lin23.setEnabled(true);
                        lin24.setEnabled(true);
                        lin25.setEnabled(true);
                        lin26.setEnabled(true);
                        lin27.setEnabled(true);
                        lin28.setEnabled(true);
                        shop.setEnabled(true);
                        //segments.setEnabled(false);
                        //meattext2.setText("Meat:" + Integer.toString(marketarray[meatindex]));
                        //mainmenuframe.setVisibility(View.INVISIBLE);
                        cleaninglayout.setVisibility(View.INVISIBLE);
                        potionslayout.setVisibility(View.INVISIBLE);
                      //  fastfoodframe.setVisibility(View.INVISIBLE);
                        foodmenulayout.setVisibility(View.INVISIBLE);
                        share.setVisibility(View.VISIBLE);
                        //  setting.setVisibility(View.VISIBLE);
                        //segments.setVisibility(View.INVISIBLE);
                        //vunglePub.playAd();
                        Menutext.setText("SHOP");





                        segmentkitchen.setEnabled(true);
                        segmenthygiene.setEnabled(true);

                        peebtn.setEnabled(true);
                        button_sbm3.setEnabled(true);
                        washhandbutton.setEnabled(true);
                        button_sbm4.setEnabled(true);
                        segmentbedroom.setEnabled(true);
                        segmentgameroom.setEnabled(true);
                        sleeplayout.setEnabled(true);
                        wclayout.setEnabled(true);
                        segmentwc.setEnabled(true);
                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        cancelbutton.setAlpha(1f);


                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });


        cleaningmenu.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        cleaningmenu.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:

                        if(!mutestate[0])
                            soundPool.play(soundID, volume, volume, 1, 0, 1f);

                        Drawable x = getResources().getDrawable(R.mipmap.sborder6);
                        headermenu.setBackground(x);
                        buycoingbutton.setBackground(x);
                        if (gamelang == ENGLISH)  Menutext.setText("HYGIENE");
                        else if (gamelang == TURKISH)  Menutext.setText("TEMİZLİK");
                        else if (gamelang == FRENCH)  Menutext.setText("NETTOYAGE");
                        else if (gamelang == SPANISH) Menutext.setText("LIMPIEZA");
                        else if (gamelang == RUSSIAN) Menutext.setText("ОЧИСТКА");
                        else if (gamelang == CHINESE) Menutext.setText("卫生");
                        else if (gamelang == JAPANESE) Menutext.setText("クリーニング");
                        else if (gamelang == PORTUGUESE) Menutext.setText("HIGIENE");
                        else   Menutext.setText("HYGIENE");

                        STATE = MENU;



                        // mainmenuframe.setVisibility(View.INVISIBLE);
                        cleaninglayout.setVisibility(View.VISIBLE);
                        foodmenulayout.setVisibility(View.INVISIBLE);
                        mealstofood.setVisibility(View.VISIBLE);

                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        cleaningmenu.setAlpha(1f);


                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });


        potionsmenu.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        potionsmenu.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:

                        if(!mutestate[0])
                            soundPool.play(soundID, volume, volume, 1, 0, 1f);
                        STATE = MENU;
                        Drawable x = getResources().getDrawable(R.mipmap.sborder1);
                        headermenu.setBackground(x);
                        buycoingbutton.setBackground(x);
                        if (gamelang == ENGLISH)  Menutext.setText("POTIONS");
                        else if (gamelang == TURKISH)  Menutext.setText("İKSİRLER");
                        else if (gamelang == FRENCH)  Menutext.setText("POTIONS");
                        else if (gamelang == SPANISH) Menutext.setText("POCIONES");
                        else if (gamelang == RUSSIAN)  Menutext.setText("ЗЕЛИЙ");
                        else if (gamelang == CHINESE)  Menutext.setText("药水");
                        else if (gamelang == JAPANESE)  Menutext.setText("薬");
                        else if (gamelang == PORTUGUESE)  Menutext.setText("POÇÕES");
                        else   Menutext.setText("POTIONS");



                        // mainmenuframe.setVisibility(View.INVISIBLE);
                        foodmenulayout.setVisibility(View.INVISIBLE);
                        potionslayout.setVisibility(View.VISIBLE);
                        mealstofood.setVisibility(View.VISIBLE);


                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        potionsmenu.setAlpha(1f);


                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });


        eyebandbutton.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        eyebandbutton.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:

                        if(!mutestate[0])
                            soundPool.play(soundID, volume, volume, 1, 0, 1f);

                        eyebandrelative.setVisibility(View.VISIBLE);
                        Drawable x = getResources().getDrawable(R.mipmap.sborder6);
                        headermenu.setBackground(x);
                        buycoingbutton.setBackground(x);
                        if (gamelang == ENGLISH)  Menutext.setText("EYE BANDS");
                        else if (gamelang == TURKISH)  Menutext.setText("GÖZ BANTLARI");
                        else if (gamelang == FRENCH)  Menutext.setText("BANDES D'OEIL");
                        else if (gamelang == SPANISH) Menutext.setText("BANDAS DE OJO");
                        else if (gamelang == RUSSIAN) Menutext.setText("ПОЛОСЫ ДЛЯ ГЛАЗ");
                        else if (gamelang == CHINESE) Menutext.setText("睡眠乐队");
                        else if (gamelang == JAPANESE) Menutext.setText("眼のバンド");
                        else if (gamelang == PORTUGUESE) Menutext.setText("BANDAS DE OLHO");
                        else   Menutext.setText("EYE BANDS");
                        veggiesmenulayout.setVisibility(View.INVISIBLE);
                        STATE = MENU;
                        foodmenulayout.setVisibility(View.INVISIBLE);
                        canceltomain.setVisibility(View.INVISIBLE);
                        mealstofood.setVisibility(View.VISIBLE);
                        mealslayout.setVisibility(View.INVISIBLE);
                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        eyebandbutton.setAlpha(1f);

                        break;
                    case MotionEvent.ACTION_CANCEL: {
                        ImageButton view = (ImageButton) v;
                        view.getBackground().clearColorFilter();
                        view.invalidate();
                        break;
                    }
                }
                return true;
            }
        });


        veggiesmenu.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        veggiesmenu.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:
                        if(!mutestate[0])
                            soundPool.play(soundID, volume, volume, 1, 0, 1f);
                        Drawable x = getResources().getDrawable(R.mipmap.sborder6);
                        headermenu.setBackground(x);
                        buycoingbutton.setBackground(x);
                        if (gamelang == ENGLISH)  Menutext.setText("VEGGIES");
                        else if (gamelang == TURKISH)  Menutext.setText("SEBZELER");
                        else if (gamelang == FRENCH)  Menutext.setText("LÉGUMES");
                        else if (gamelang == SPANISH) Menutext.setText("VERDURAS");
                        else if (gamelang == RUSSIAN) Menutext.setText("ОВОЩИ");
                        else if (gamelang == CHINESE) Menutext.setText("蔬菜");
                        else if (gamelang == JAPANESE) Menutext.setText("野菜");
                        else if (gamelang == PORTUGUESE) Menutext.setText("LEGUMES");
                        else   Menutext.setText("VEGGIES");
                        veggiesmenulayout.setVisibility(View.VISIBLE);
                        STATE = MENU;
                        foodmenulayout.setVisibility(View.INVISIBLE);
                        canceltomain.setVisibility(View.INVISIBLE);
                        mealstofood.setVisibility(View.VISIBLE);
                        mealslayout.setVisibility(View.INVISIBLE);
                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        veggiesmenu.setAlpha(1f);
                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });

        fruitsmenu.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        fruitsmenu.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:

                        if(!mutestate[0])
                            soundPool.play(soundID, volume, volume, 1, 0, 1f);
                        Drawable x = getResources().getDrawable(R.mipmap.sborder3);
                        headermenu.setBackground(x);
                        buycoingbutton.setBackground(x);
                        if (gamelang == ENGLISH)  Menutext.setText("FRUITS");
                        else if (gamelang == TURKISH)  Menutext.setText("MEYVELER");
                        else if (gamelang == FRENCH)  Menutext.setText("FRUITS");
                        else if (gamelang == SPANISH) Menutext.setText("FRUTAS");
                        else if (gamelang == RUSSIAN) Menutext.setText("ФРУКТЫ");
                        else if (gamelang == CHINESE) Menutext.setText("水果");
                        else if (gamelang == JAPANESE) Menutext.setText("果物");
                        else if (gamelang == PORTUGUESE) Menutext.setText("FRUTAS");


                        else   Menutext.setText("FRUITS");
                        fruitsmenulayout.setVisibility(View.VISIBLE);
                        STATE = MENU;
                        foodmenulayout.setVisibility(View.INVISIBLE);
                        canceltomain.setVisibility(View.INVISIBLE);
                        mealstofood.setVisibility(View.VISIBLE);
                        mealslayout.setVisibility(View.INVISIBLE);
                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        fruitsmenu.setAlpha(1f);
                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });


        desertsmenumenu.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        desertsmenumenu.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:

                        if(!mutestate[0])
                            soundPool.play(soundID, volume, volume, 1, 0, 1f);
                        Drawable x = getResources().getDrawable(R.mipmap.sborder5);
                        headermenu.setBackground(x);
                        buycoingbutton.setBackground(x);
                        if (gamelang == ENGLISH)  Menutext.setText("SWEETS");
                        else if (gamelang == TURKISH)  Menutext.setText("TATLILAR");
                        else if (gamelang == FRENCH)  Menutext.setText("BONBONS");
                        else if (gamelang == SPANISH) Menutext.setText("DULCES");
                        else if (gamelang == RUSSIAN) Menutext.setText("СЛАДОСТИ");
                        else if (gamelang == CHINESE) Menutext.setText("甜食");
                        else if (gamelang == JAPANESE) Menutext.setText("お菓子");
                        else if (gamelang == PORTUGUESE) Menutext.setText("DOCES");
                        else   Menutext.setText("SWEETS");
                        desertsmenumenulayut.setVisibility(View.VISIBLE);
                        STATE = MENU;
                        foodmenulayout.setVisibility(View.INVISIBLE);
                        canceltomain.setVisibility(View.INVISIBLE);
                        mealstofood.setVisibility(View.VISIBLE);
                        mealslayout.setVisibility(View.INVISIBLE);
                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        desertsmenumenu.setAlpha(1f);
                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });


        drinksmenu.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        drinksmenu.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:
                        if(!mutestate[0])
                            soundPool.play(soundID, volume, volume, 1, 0, 1f);
                        Drawable x = getResources().getDrawable(R.mipmap.sborder4);
                        headermenu.setBackground(x);
                        buycoingbutton.setBackground(x);
                        if (gamelang == ENGLISH)  Menutext.setText("DRINKS");
                        else if (gamelang == TURKISH)  Menutext.setText("İÇECEKLER");
                        else if (gamelang == FRENCH)  Menutext.setText("BOISSONS");
                        else if (gamelang == SPANISH) Menutext.setText("BEBIDAS");
                        else if (gamelang == RUSSIAN) Menutext.setText("НАПИТКИ");
                        else if (gamelang == CHINESE) Menutext.setText("饮料");
                        else if (gamelang == JAPANESE) Menutext.setText("ドリンク");
                        else if (gamelang == PORTUGUESE) Menutext.setText("BEBIDAS");

                        else   Menutext.setText("DRINKS");
                        drinksmenulayout.setVisibility(View.VISIBLE);
                        STATE = MENU;
                        foodmenulayout.setVisibility(View.INVISIBLE);
                        canceltomain.setVisibility(View.INVISIBLE);
                        mealstofood.setVisibility(View.VISIBLE);
                        mealslayout.setVisibility(View.INVISIBLE);
                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        drinksmenu.setAlpha(1f);
                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });









        regionalmenu.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        regionalmenu.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:
                        if(!mutestate[0])
                            soundPool.play(soundID, volume, volume, 1, 0, 1f);





                        Drawable x = getResources().getDrawable(R.mipmap.sborder1);
                        headermenu.setBackground(x);
                        buycoingbutton.setBackground(x);
                        if (gamelang == ENGLISH)  Menutext.setText("REGIONAL");
                        else if (gamelang == TURKISH)  Menutext.setText("YÖRESEL");
                        else if (gamelang == FRENCH)  Menutext.setText("RÉGIONAL");
                        else if (gamelang == SPANISH) Menutext.setText("REGIONAL");
                        else if (gamelang == RUSSIAN) Menutext.setText("МЕСТНОЕ");
                        else if (gamelang == CHINESE) Menutext.setText("区域性");
                        else if (gamelang == JAPANESE) Menutext.setText("地域");
                        else if (gamelang == PORTUGUESE) Menutext.setText("REGIONAL");

                        else   Menutext.setText("REGIONAL");
                        regionalmenulayout.setVisibility(View.VISIBLE);
                        STATE = MENU;
                        foodmenulayout.setVisibility(View.INVISIBLE);
                        canceltomain.setVisibility(View.INVISIBLE);
                        mealstofood.setVisibility(View.VISIBLE);
                        mealslayout.setVisibility(View.INVISIBLE);
                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        regionalmenu.setAlpha(1f);
                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });



        mealstofood.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        mealstofood.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:

                        if(!mutestate[0])
                            soundPool.play(soundID, volume, volume, 1, 0, 1f);
                        //meattext2.setText("Meat:" + Integer.toString(marketarray[meatindex]));
                        // mainmenuframe.setVisibility(View.INVISIBLE);
                      //  fastfoodframe.setVisibility(View.INVISIBLE);

                        veggiesmenulayout.setVisibility(View.INVISIBLE);
                        eyebandrelative.setVisibility(View.INVISIBLE);
                        fruitsmenulayout.setVisibility(View.INVISIBLE);
                        regionalmenulayout.setVisibility(View.INVISIBLE);
                        desertsmenumenulayut.setVisibility(View.INVISIBLE);
                        drinksmenulayout.setVisibility(View.INVISIBLE);
                        cleaninglayout.setVisibility(View.INVISIBLE);
                        potionslayout.setVisibility(View.INVISIBLE);

                        desertsmenumenulayut.setVisibility(View.INVISIBLE);

                        veggiesmenulayout.setVisibility(View.INVISIBLE);

                        fruitsmenulayout.setVisibility(View.INVISIBLE);
                        regionalmenulayout.setVisibility(View.INVISIBLE);
                        drinksmenulayout.setVisibility(View.INVISIBLE);


                        foodmenulayout.setVisibility(View.VISIBLE);
                        share.setVisibility(View.INVISIBLE);
                        mealslayout.setVisibility(View.INVISIBLE);
                        Drawable x = getResources().getDrawable(R.mipmap.sborder2);
                        headermenu.setBackground(x);
                        buycoingbutton.setBackground(x);
                        STATE = MARKETEXIT;
                        if (gamelang == ENGLISH)  Menutext.setText("MARKET");
                        else if (gamelang == TURKISH)  Menutext.setText("PAZAR");
                        else if (gamelang == FRENCH)  Menutext.setText("MARCHÉ");
                        else if (gamelang == SPANISH) Menutext.setText("MERCADO");
                        else if (gamelang == RUSSIAN) Menutext.setText("РЫНОК");
                        else if (gamelang == CHINESE) Menutext.setText("市场");
                        else if (gamelang == JAPANESE) Menutext.setText("市場");
                        else if (gamelang == PORTUGUESE) Menutext.setText("MERCADO");
                        else   Menutext.setText("MARKET");
                        STATE = MARKETEXIT;
                        //segments.setVisibility(View.INVISIBLE);

                        // canceltomain.setVisibility(View.VISIBLE);

                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        mealstofood.setAlpha(1f);
                        mealstofood.setVisibility(View.INVISIBLE);
                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });


        meals.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        meals.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:

                        if(!mutestate[0])
                            soundPool.play(soundID, volume, volume, 1, 0, 1f);
                        //meattext2.setText("Meat:" + Integer.toString(marketarray[meatindex]));
                        // mainmenuframe.setVisibility(View.INVISIBLE);
                       // fastfoodframe.setVisibility(View.INVISIBLE);
                        foodmenulayout.setVisibility(View.INVISIBLE);
                        share.setVisibility(View.INVISIBLE);
                        mealslayout.setVisibility(View.VISIBLE);


                         Drawable x = getResources().getDrawable(R.mipmap.sborder1);
                        headermenu.setBackground(x);
                        buycoingbutton.setBackground(x);

                        if (gamelang == ENGLISH)  Menutext.setText("MEALS");
                        else if (gamelang == TURKISH)  Menutext.setText("ANA YEMEKLER");
                        else if (gamelang == FRENCH)  Menutext.setText("REPAS");
                        else if (gamelang == SPANISH) Menutext.setText("COMIDAS");
                        else if (gamelang == RUSSIAN) Menutext.setText("ЕДА");
                        else if (gamelang == CHINESE) Menutext.setText("膳食");
                        else if (gamelang == JAPANESE) Menutext.setText("食事");
                        else if (gamelang == PORTUGUESE) Menutext.setText("REFEIÇÕES");
                        else   Menutext.setText("MEALS");

                        STATE = MENU;
                        //segments.setVisibility(View.INVISIBLE);
                        mealstofood.setVisibility(View.VISIBLE);

                        canceltomain.setVisibility(View.INVISIBLE);


                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        meals.setAlpha(1f);
                        //meals.setVisibility(View.INVISIBLE);
                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });




        // final Button facebutton = (Button) findViewById(R.id.facebutton);
        final Button googlebutton = (Button) findViewById(R.id.googleplus);


        final ImageButton advideocoin = (ImageButton) findViewById(R.id.advideocoin);

        advideocoin.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        advideocoin.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:
                        if(!mutestate[0])
                            soundPool.play(soundID, volume, volume, 1, 0, 1f);
                       /* if (vunglePub.isAdPlayable() == true) {
                            vunglePub.playAd();

                            new CountDownTimer(10000, 1000) {

                                public void onTick(long milsec) {

                                }

                                public void onFinish() {

                                    pluscoinaward(100);

                                }
                            }.start();

                        }*/




                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        advideocoin.setAlpha(1f);

                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });




        final FrameLayout disableallchild3 = (FrameLayout) findViewById(R.id.draglayout3);
        shopframe.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View view, MotionEvent motionEvent) {
                return true;
            }
        });
        shop.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        shop.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:

                        if(!mutestate[0])
                            soundPool.play(soundID, volume, volume, 1, 0, 1f);


                        disableallchild3.setVisibility(View.VISIBLE);
                        final Button coin100text = (Button) findViewById(R.id.coin100button);
                        final Button coin1000text = (Button) findViewById(R.id.coin1000button);


                      //  SkuDetails skun = bp.getPurchaseListingDetails("coin200");

/*
                        Button unlockiqtext = (Button) findViewById(R.id.unlockiqbutton);
                        Button plu5gametext = (Button) findViewById(R.id.plusgamebutton);
                        Button noadtext = (Button) findViewById(R.id.coin10button);
                        Button coin2000text = (Button) findViewById(R.id.coin100button);
                        Button coin5000text = (Button) findViewById(R.id.coin500button);
                        Button coin10000text = (Button) findViewById(R.id.coin1000button);

                        SkuDetails skun = bp.getPurchaseListingDetails("unluckiq");
                        SkuDetails skun2 = bp.getPurchaseListingDetails("plus5game");
                        SkuDetails skun3 = bp.getPurchaseListingDetails("noadd");
                        SkuDetails skun4 = bp.getPurchaseListingDetails("coin200");
                        SkuDetails skun5 = bp.getPurchaseListingDetails("coin500");
                        SkuDetails skun6 = bp.getPurchaseListingDetails("coin1000");

                        unlockiqtext.setText(Double.toString(round(skun.priceValue,2))+ " " + skun.currency );
                        plu5gametext.setText(Double.toString(round(skun2.priceValue,2))+ " " + skun2.currency );
                        noadtext.setText(Double.toString(round(skun3.priceValue,2))+ " " + skun3.currency );
                        coin2000text.setText(Double.toString(round(skun4.priceValue,2))+ " " + skun4.currency );
                        coin5000text.setText(Double.toString(round(skun5.priceValue,2))+ " " + skun5.currency );
                        coin10000text.setText(Double.toString(round(skun6.priceValue,2))+ " " + skun6.currency );
                        //coin100text.setText(Double.toString(round(skun.priceValue,2))+ " " + skun.currency );*/
                       // showNotificationenergywarning();
                       // coinflip();
                        shopframe.setVisibility(View.VISIBLE);
                        main.setEnabled(false);
                        //segments.setEnabled(false);
                        //meattext2.setText("Meat:" + Integer.toString(marketarray[meatindex]));
                        //mainmenuframe.setVisibility(View.VISIBLE);
                      //  fastfoodframe.setVisibility(View.INVISIBLE);

                        foodmenulayout.setVisibility(View.VISIBLE);
                        share.setVisibility(View.INVISIBLE);
                        //segments.setVisibility(View.INVISIBLE);
                        //vunglePub.playAd();
                        Drawable x = getResources().getDrawable(R.mipmap.sborder2);
                        headermenu.setBackground(x);
                        buycoingbutton.setBackground(x);
                        if (gamelang == ENGLISH)  Menutext.setText("MARKET");
                        else if (gamelang == TURKISH)  Menutext.setText("PAZAR");
                        else if (gamelang == FRENCH)  Menutext.setText("MARCHÉ");
                        else if (gamelang == SPANISH) Menutext.setText("MERCADO");
                        else if (gamelang == RUSSIAN) Menutext.setText("РЫНОК");
                        else if (gamelang == CHINESE) Menutext.setText("市场");
                        else if (gamelang == JAPANESE) Menutext.setText("市場");
                        else if (gamelang == PORTUGUESE) Menutext.setText("MERCADO");
                        else   Menutext.setText("MARKET");
                        STATE = MARKETEXIT;
                        segmentkitchen.setEnabled(false);
                        sleeplayout.setEnabled(false);
                        wclayout.setEnabled(false);
                        segmenthygiene.setEnabled(false);
                        segmentbedroom.setEnabled(false);
                        segmentgameroom.setEnabled(false);
                        peebtn.setEnabled(false);
                        button_sbm3.setEnabled(false);
                        washhandbutton.setEnabled(false);
                        button_sbm4.setEnabled(false);
                        segmentwc.setEnabled(false);
                        //  setting.setVisibility(View.INVISIBLE);
                        lin1.setEnabled(false);
                        lin2.setEnabled(false);
                        lin3.setEnabled(false);
                       // lin4.setEnabled(false);
                       // lin5.setEnabled(false);
                       // lin6.setEnabled(false);
                        lin7.setEnabled(false);
                        lin8.setEnabled(false);
                        lin9.setEnabled(false);
                        lin10.setEnabled(false);
                        lin11.setEnabled(false);
                        lin12.setEnabled(false);
                        lin13.setEnabled(false);
                        lin14.setEnabled(false);
                        lin15.setEnabled(false);
                        lin16.setEnabled(false);
                        lin17.setEnabled(false);
                        lin18.setEnabled(false);
                        lin19.setEnabled(false);
                        lin20.setEnabled(false);
                        lin21.setEnabled(false);
                        lin22.setEnabled(false);
                        lin23.setEnabled(false);
                        lin24.setEnabled(false);
                        lin25.setEnabled(false);
                        lin26.setEnabled(false);
                        lin27.setEnabled(false);
                       // lin28.setEnabled(false);
                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        shop.setAlpha(1f);
                        shop.setVisibility(View.INVISIBLE);
                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });

        final ImageView coinimage = (ImageView) findViewById(R.id.testImagecoin);



        cancelshop.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        shop.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:



                        if(!mutestate[0])
                            soundPool.play(soundID, volume, volume, 1, 0, 1f);
                        main.setEnabled(true);
                        share.setEnabled(true);
                        STATE = MAINSTATE;
                        shopframe.setVisibility(View.INVISIBLE);
                        //mainmenuframe.setVisibility(View.VISIBLE);
                     //   fastfoodframe.setVisibility(View.INVISIBLE);
                        foodmenulayout.setVisibility(View.INVISIBLE);
                        mealslayout.setVisibility(View.INVISIBLE);
                        coinlayout.setVisibility(View.INVISIBLE);
                        coinimage.setVisibility(View.VISIBLE);
                        share.setVisibility(View.VISIBLE);
                        disableallchild2option.setVisibility(View.INVISIBLE);
                        segments.setVisibility(View.VISIBLE);
                        //  setting.setVisibility(View.VISIBLE);

                        buycoingbutton.setVisibility(View.VISIBLE);
                        shop.setVisibility(View.VISIBLE);

                        printscreenlayout2.setVisibility(View.INVISIBLE);

                        share.setVisibility(View.VISIBLE);
                        buycoingbutton.setVisibility(View.VISIBLE);
                      //  fastfoodframe.setVisibility(View.INVISIBLE);
                        mealslayout.setVisibility(View.INVISIBLE);
                        foodmenulayout.setVisibility(View.INVISIBLE);
                        canceltomain2.setVisibility(View.INVISIBLE);
                        mealstofood.setVisibility(View.INVISIBLE);
                        cleaninglayout.setVisibility(View.INVISIBLE);
                        potionslayout.setVisibility(View.INVISIBLE);

                        desertsmenumenulayut.setVisibility(View.INVISIBLE);

                        veggiesmenulayout.setVisibility(View.INVISIBLE);
                        eyebandrelative.setVisibility(View.INVISIBLE);

                        fruitsmenulayout.setVisibility(View.INVISIBLE);
                        regionalmenulayout.setVisibility(View.INVISIBLE);
                        drinksmenulayout.setVisibility(View.INVISIBLE);
                        canceltomain.setVisibility(View.INVISIBLE);
                        canceltomain2.setVisibility(View.INVISIBLE);
                        sleeplayout.setEnabled(true);
                        wclayout.setEnabled(true);
                        segmentkitchen.setEnabled(true);
                        segmenthygiene.setEnabled(true);
                        segmentbedroom.setEnabled(true);
                        segmentgameroom.setEnabled(true);
                        segmentwc.setEnabled(true);
                        peebtn.setEnabled(true);
                        button_sbm3.setEnabled(true);
                        washhandbutton.setEnabled(true);
                        button_sbm4.setEnabled(true);
                        lin1.setEnabled(true);
                        lin2.setEnabled(true);
                        lin3.setEnabled(true);
                        lin4.setEnabled(true);
                        lin5.setEnabled(true);
                        brain3.setEnabled(true);
                        lin6.setEnabled(true);
                        lin7.setEnabled(true);
                        lin8.setEnabled(true);
                        lin9.setEnabled(true);
                        lin10.setEnabled(true);
                        lin11.setEnabled(true);
                        lin12.setEnabled(true);
                        lin13.setEnabled(true);
                        lin14.setEnabled(true);
                        lin15.setEnabled(true);
                        lin16.setEnabled(true);
                        lin17.setEnabled(true);
                        lin18.setEnabled(true);
                        lin19.setEnabled(true);
                        lin20.setEnabled(true);
                        lin21.setEnabled(true);
                        lin22.setEnabled(true);
                        lin23.setEnabled(true);
                        lin24.setEnabled(true);
                        lin25.setEnabled(true);
                        lin26.setEnabled(true);
                        lin27.setEnabled(true);
                        lin28.setEnabled(true);
                        shop.setEnabled(true);
                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        shop.setAlpha(1f);

                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });


        final TextView watermelonheader = (TextView) findViewById(R.id.watermelontext2);
        final TextView tomatoheader = (TextView) findViewById(R.id.tomatotext2);


        final TextView cappucionoheader = (TextView) findViewById(R.id.onionringsltext2);


        final TextView pumpkinheader = (TextView) findViewById(R.id.pumpkintext2);
        final TextView peesheader = (TextView) findViewById(R.id.peestext2);
        final TextView kiwiheader = (TextView) findViewById(R.id.kiwitext2);
        final TextView hotdogheader = (TextView) findViewById(R.id.hotdogtext2);
        final TextView cornheader = (TextView) findViewById(R.id.corntext2);

        final TextView chilisheader = (TextView) findViewById(R.id.chilistext2);
        final TextView broccoliheader = (TextView) findViewById(R.id.broccolitext2);
        final TextView bananaheader = (TextView) findViewById(R.id.bananatext2);
        final TextView regionalheader1 = (TextView) findViewById(R.id.regional1text2);
        final TextView regionalheader2 = (TextView) findViewById(R.id.regional2text2);
        final TextView regionalheader3 = (TextView) findViewById(R.id.regional3text2);
        final TextView regionalheader4 = (TextView) findViewById(R.id.regional4text2);
        final TextView regionalheader5 = (TextView) findViewById(R.id.regional5text2);
        final TextView regionalheader6 = (TextView) findViewById(R.id.regional6text2);
        final TextView siskebapheader = (TextView) findViewById(R.id.siskebaptext2);
        final TextView drinkheader1 = (TextView) findViewById(R.id.drinks1text2);
        final TextView drinkheader2 = (TextView) findViewById(R.id.drinks2text2);
        final TextView drinkheader3 = (TextView) findViewById(R.id.drinks3text2);
        final TextView drinkheader4 = (TextView) findViewById(R.id.drinks4text2);
        final TextView drinkheader5 = (TextView) findViewById(R.id.drinks5text2);
        final TextView drinkheader6 = (TextView) findViewById(R.id.drinks6text2);
        final TextView desertheader1 = (TextView) findViewById(R.id.desert1text2);
        final TextView desertheader2 = (TextView) findViewById(R.id.desert2text2);
        final TextView desertheader3 = (TextView) findViewById(R.id.desert3text2);
        final TextView desertheader4 = (TextView) findViewById(R.id.desert4text2);
        final TextView desertheader5 = (TextView) findViewById(R.id.desert5text2);
        final TextView desertheader6 = (TextView) findViewById(R.id.desert6text2);


        final Button meat = (Button) findViewById(R.id.meatbuybutton);
        final Button pizzabutton = (Button) findViewById(R.id.pizzabuybutton);
        final TextView pizzaheader = (TextView) findViewById(R.id.pizzatext);
        final TextView hamburgerheader = (TextView) findViewById(R.id.hamburgertext2);
        final TextView frenchfriesheader = (TextView) findViewById(R.id.frenchfriestext2);
        final TextView chickenheader = (TextView) findViewById(R.id.chickenlegtext2);
        final TextView fishheader = (TextView) findViewById(R.id.fishtext2);
        final TextView tboneheader = (TextView) findViewById(R.id.tbonetext2);
        final TextView meatarmheader = (TextView) findViewById(R.id.meatarmtext2);
        final TextView porkheader = (TextView) findViewById(R.id.porktext2);

        final TextView greensoapheader = (TextView) findViewById(R.id.greensoaptext2);
        final TextView cellsoapheader = (TextView) findViewById(R.id.cellsoaptext2);
        final TextView seaspongeheader = (TextView) findViewById(R.id.seaspongetext2);
        final TextView greendarkhedar = (TextView) findViewById(R.id.greendarksoaptext2);
        final TextView soap1header = (TextView) findViewById(R.id.soap1text2);
        final TextView soap2header = (TextView) findViewById(R.id.soap2text2);

        final TextView sleeppheader = (TextView) findViewById(R.id.sleepotiontext2);
        final TextView hungerpheader = (TextView) findViewById(R.id.hungerpotiontext2);
        final TextView hygieneheader = (TextView) findViewById(R.id.hygienepotiontext2);
        final TextView lovepheader = (TextView) findViewById(R.id.lovepotiontext2);
        final TextView gamepheader = (TextView) findViewById(R.id.gamepotiontext2);
        final TextView allinpheader = (TextView) findViewById(R.id.allinpotiontext2);

        final TextView cokeheader = (TextView) findViewById(R.id.coketext2);
        final TextView juiceheader = (TextView) findViewById(R.id.juicetext2);
        final TextView carrotheader = (TextView) findViewById(R.id.carrottext2);
        final TextView saladheader = (TextView) findViewById(R.id.saladtext2);

        final TextView applehader = (TextView) findViewById(R.id.appletext2);
        final TextView orangeheader = (TextView) findViewById(R.id.orangetext2);
        final TextView noodleheader = (TextView) findViewById(R.id.noodletext2);
        final TextView brownieheader = (TextView) findViewById(R.id.brownietext2);
        final TextView cheesecakeheader = (TextView) findViewById(R.id.cheesecaktext2);


        final TextView frenchtoastheader = (TextView) findViewById(R.id.frenchtoasttext2);
        final TextView cheeseheader = (TextView) findViewById(R.id.cheesetext2);
        final TextView soupheader = (TextView) findViewById(R.id.souptext2);


        final Button watermelonbutton = (Button) findViewById(R.id.watermelonbuybutton);
        final Button tomatobutton = (Button) findViewById(R.id.tomatobuybutton);
        final Button pumpkinbutton = (Button) findViewById(R.id.pumpkinbuybutton);
        final Button peesbutton = (Button) findViewById(R.id.peesbuybutton);
        final Button kiwibutton = (Button) findViewById(R.id.kiwibuybutton);
        final Button hotdogbutton = (Button) findViewById(R.id.hotdogbuybutton);
        final Button cornbutton = (Button) findViewById(R.id.cornbuybutton);

        final Button chilisbutton = (Button) findViewById(R.id.chilisbuybutton);
        final Button broccolibutton = (Button) findViewById(R.id.broccolibuybutton);
        final Button bananabutton = (Button) findViewById(R.id.bananabuybutton);
        final Button regional1button = (Button) findViewById(R.id.regional1buybutton);
        final Button regional2button = (Button) findViewById(R.id.regional2buybutton);
        final Button regional3button = (Button) findViewById(R.id.regional3buybutton);
        final Button regional4button = (Button) findViewById(R.id.regional4buybutton);
        final Button regional5button = (Button) findViewById(R.id.regional5buybutton);
        final Button regional6button = (Button) findViewById(R.id.regional6buybutton);
        final Button siskebapbutton = (Button) findViewById(R.id.siskebapbuybutton);
        final Button drinks1button = (Button) findViewById(R.id.drinks1buybutton);
        final Button drinks2button = (Button) findViewById(R.id.drinks2buybutton);
        final Button drinks3button = (Button) findViewById(R.id.drinks3buybutton);
        final Button drinks4button = (Button) findViewById(R.id.drinks4buybutton);
        final Button drinks5button = (Button) findViewById(R.id.drinks5buybutton);
        final Button drinks6button = (Button) findViewById(R.id.drinks6buybutton);
        final Button desert1button = (Button) findViewById(R.id.desert1buybutton);
        final Button desert2button = (Button) findViewById(R.id.desert2buybutton);
        final Button desert3button = (Button) findViewById(R.id.desert3buybutton);
        final Button desert4button = (Button) findViewById(R.id.desert4buybutton);
        final Button desert5button = (Button) findViewById(R.id.desert5buybutton);
        final Button desert6button = (Button) findViewById(R.id.desert6buybutton);


        final Button hamburgerbutton = (Button) findViewById(R.id.hamburbuybutton);
        final Button greensoapbutton = (Button) findViewById(R.id.greensoapbuybtn);
        final Button cellspongebutton = (Button) findViewById(R.id.cellsoapbuybtn);
        final Button darkspongebutton = (Button) findViewById(R.id.greendarksoapbuybtn);
        final Button seaspongebutton = (Button) findViewById(R.id.seaspongebuybtn);
        final Button soap1button = (Button) findViewById(R.id.soap1buybtn);
        final Button soap2button = (Button) findViewById(R.id.soap2buybtn);

        final Button sleeppotionbutton = (Button) findViewById(R.id.sleeppotionbuybutton);
        final Button hungerpotionbutton = (Button) findViewById(R.id.hungerpotionbuybutton);
        final Button hygienpotionbutton = (Button) findViewById(R.id.hygienepotionbuybutton);
        final Button lovepotionbutton = (Button) findViewById(R.id.lovepotionbuybutton);
        final Button gamepotionbutton = (Button) findViewById(R.id.gamepotionbuybutton);
        final Button allinpotionbutton = (Button) findViewById(R.id.allinpotionbuybutton);

        final Button frenchfriesbutton = (Button) findViewById(R.id.frenchbuy);
        final Button chickenlegbutton = (Button) findViewById(R.id.chickenbuy);
        final Button fishbutton = (Button) findViewById(R.id.fishbuy);

        //appleimg,bostonrollimg,carrotimg,frenchtoastimg,meatarmimg, medisaladimg,noodleimg,mixedsaladimg, onionringsv,orangeimg,porkimg,mixedrollimg, salmonsushiimg,soupimg,squidimg,cokeimg,brownieimg,cheesecakeimg,cheeseimg, juiceimg;

        final Button applebutton = (Button) findViewById(R.id.applebuybutton);
        final Button bostonrollbutton = (Button) findViewById(R.id.bostonrollbuybutton);
        final Button carrotbutton = (Button) findViewById(R.id.carrotbuybutton);
        final Button frenchtoastbutton = (Button) findViewById(R.id.frenchtoastbuybutton);
        final Button meatarmbutton = (Button) findViewById(R.id.meatarmbutton);
        final Button medisaladbutton = (Button) findViewById(R.id.medisaladbuybutton);
        final Button noodlebutton = (Button) findViewById(R.id.noodlebuybutton);
        final Button mixedsaladbutton = (Button) findViewById(R.id.mixedsaladbuybutton);
        final Button onionringbutton = (Button) findViewById(R.id.onionringsbuybutton);
        final Button orangebutton = (Button) findViewById(R.id.orangebuybutton);
        final Button porkbutton = (Button) findViewById(R.id.porkbuybutton);
        final Button mixedrollbutton = (Button) findViewById(R.id.mixrollbuybutton);
        final Button salmonsushibutton = (Button) findViewById(R.id.salmonsushibuybutton);
      //  final Button soupbuttonn = (Button) findViewById(R.id.soupbuybutton);
        final Button squidbutton = (Button) findViewById(R.id.squidbuybutton);
        final Button cokebutton = (Button) findViewById(R.id.cokebuybutton);
        final Button browniebutton = (Button) findViewById(R.id.browniebuybutton);
        final Button cheesecakebutton = (Button) findViewById(R.id.cheesecakebuybutton);
        final Button cheesebutton = (Button) findViewById(R.id.cheesebuybutton);
        final Button juicebutton = (Button) findViewById(R.id.juicebuybutton);


        TextView fruittext = (TextView) findViewById(R.id.fruittextview);
        TextView Cleaningtext = (TextView) findViewById(R.id.textView20);
        TextView regionaltext = (TextView) findViewById(R.id.regionalview);
        TextView potiontext = (TextView) findViewById(R.id.textView60);
        TextView veggiestext = (TextView) findViewById(R.id.textView18);
        TextView deserttext = (TextView) findViewById(R.id.desertview);
        TextView drinktext = (TextView) findViewById(R.id.drinkview);
        TextView mealtext = (TextView) findViewById(R.id.mealtextview);

        TextView optiontextview = (TextView ) findViewById(R.id.optiontextview);
        final TextView optionheader = (TextView) findViewById(R.id.textView11);



        //Typeface tf3 = Typeface.createFromAsset(getAssets(), "irisupsbold.ttf");
        brow = Typeface.createFromAsset(getAssets(), "sans.ttf");

        //Typeface kristen = Typeface.createFromAsset(getAssets(), "kristenitc.ttf");
        //Typeface frank = Typeface.createFromAsset(getAssets(), "frank.ttf");

        optionheader.setTypeface(brow);
        optionheader.setTextSize(BUTTIONFONTSIZE);
        Menutext.setTypeface(brow);
        Menutext.setTextSize(BUTTIONFONTSIZE);
        fruittext.setTypeface(brow);
        fruittext.setTextSize(BUTTIONFONTSIZE);
        Cleaningtext.setTypeface(brow);
        Cleaningtext.setTextSize(BUTTIONFONTSIZE);
        regionaltext.setTypeface(brow);
        regionaltext.setTextSize(BUTTIONFONTSIZE);
        potiontext.setTypeface(brow);
        potiontext.setTextSize(BUTTIONFONTSIZE);
        veggiestext.setTypeface(brow);
        veggiestext.setTextSize(BUTTIONFONTSIZE);
        deserttext.setTypeface(brow);
        deserttext.setTextSize(BUTTIONFONTSIZE);
        drinktext.setTypeface(brow);
        drinktext.setTextSize(BUTTIONFONTSIZE);
        mealtext.setTypeface(brow);
        mealtext.setTextSize(BUTTIONFONTSIZE);
        optiontextview.setTypeface(brow);
        optiontextview.setTextSize(BUTTIONFONTSIZE);



        optionheader.setTypeface(brow);
        optionheader.setTextSize(HEADERTEXTSIZE);
        Menutext.setTypeface(brow);
        Menutext.setTextSize(HEADERTEXTSIZE);

        pizzaheader.setTypeface(brow);
        pizzaheader.setTextSize(MENUTEXTFONTSIZE);

        cappucionoheader.setTypeface(brow);

        watermelonheader.setTypeface(brow);
        watermelonheader.setTextSize(MENUTEXTFONTSIZE);

        tomatoheader.setTypeface(brow);
        tomatoheader.setTextSize(MENUTEXTFONTSIZE);
        pumpkinheader.setTypeface(brow);
        pumpkinheader.setTextSize(MENUTEXTFONTSIZE);
        peesheader.setTypeface(brow);
        peesheader.setTextSize(MENUTEXTFONTSIZE);
        kiwiheader.setTypeface(brow);
        kiwiheader.setTextSize(MENUTEXTFONTSIZE);
        hotdogheader.setTypeface(brow);
        hotdogheader.setTextSize(MENUTEXTFONTSIZE);
        cornheader.setTypeface(brow);
        cornheader.setTextSize(MENUTEXTFONTSIZE);
        chilisheader.setTypeface(brow);
        chilisheader.setTextSize(MENUTEXTFONTSIZE);
        broccoliheader.setTypeface(brow);
        broccoliheader.setTextSize(MENUTEXTFONTSIZE);
        bananaheader.setTypeface(brow);
        bananaheader.setTextSize(MENUTEXTFONTSIZE);
        siskebapheader.setTypeface(brow);
        siskebapheader.setTextSize(MENUTEXTFONTSIZE);

        regionalheader1.setTypeface(brow);
        regionalheader1.setTextSize(MENUTEXTFONTSIZE);
        regionalheader2.setTypeface(brow);
        regionalheader2.setTextSize(MENUTEXTFONTSIZE);
        regionalheader3.setTypeface(brow);
        regionalheader3.setTextSize(MENUTEXTFONTSIZE);
        regionalheader4.setTypeface(brow);
        regionalheader4.setTextSize(MENUTEXTFONTSIZE);
        regionalheader5.setTypeface(brow);
        regionalheader5.setTextSize(MENUTEXTFONTSIZE);
        regionalheader6.setTypeface(brow);
        regionalheader6.setTextSize(MENUTEXTFONTSIZE);

        drinkheader1.setTypeface(brow);
        drinkheader1.setTextSize(MENUTEXTFONTSIZE);
        drinkheader2.setTypeface(brow);
        drinkheader2.setTextSize(MENUTEXTFONTSIZE);
        drinkheader3.setTypeface(brow);
        drinkheader3.setTextSize(MENUTEXTFONTSIZE);
        drinkheader4.setTypeface(brow);


/*
        if(gamelang == RUSSIAN)
        {
            drinkheader4.setTextSize(MENUTEXTFONTSIZE-3);
            drinkheader6.setTextSize(MENUTEXTFONTSIZE-3);

        }
  */     /* else
        {
            drinkheader4.setTextSize(MENUTEXTFONTSIZE-1);
            drinkheader6.setTextSize(MENUTEXTFONTSIZE-1);
        }*/


        drinkheader5.setTypeface(brow);
        drinkheader5.setTextSize(MENUTEXTFONTSIZE);
        drinkheader6.setTypeface(brow);


        desertheader1.setTypeface(brow);
        desertheader1.setTextSize(MENUTEXTFONTSIZE);
        desertheader2.setTypeface(brow);
        desertheader2.setTextSize(MENUTEXTFONTSIZE);
        desertheader3.setTypeface(brow);
        desertheader3.setTextSize(MENUTEXTFONTSIZE);
        desertheader4.setTypeface(brow);
        desertheader4.setTextSize(MENUTEXTFONTSIZE);
        desertheader5.setTypeface(brow);
        desertheader5.setTextSize(MENUTEXTFONTSIZE);
        desertheader6.setTypeface(brow);
        desertheader6.setTextSize(MENUTEXTFONTSIZE);


        hamburgerheader.setTypeface(brow);
        hamburgerheader.setTextSize(MENUTEXTFONTSIZE);

        frenchfriesheader.setTypeface(brow);
        frenchfriesheader.setTextSize(MENUTEXTFONTSIZE);


        chickenheader.setTypeface(brow);
        chickenheader.setTextSize(MENUTEXTFONTSIZE);


        fishheader.setTypeface(brow);
        fishheader.setTextSize(MENUTEXTFONTSIZE);
        tboneheader.setTypeface(brow);
        tboneheader.setTextSize(MENUTEXTFONTSIZE);
        meatarmheader.setTypeface(brow);
        meatarmheader.setTextSize(MENUTEXTFONTSIZE);
        porkheader.setTypeface(brow);
        porkheader.setTextSize(MENUTEXTFONTSIZE);
        greensoapheader.setTypeface(brow);
        greensoapheader.setTextSize(MENUTEXTFONTSIZE);
        soap1header.setTypeface(brow);
        soap1header.setTextSize(MENUTEXTFONTSIZE);
        soap2header.setTypeface(brow);
        soap2header.setTextSize(MENUTEXTFONTSIZE);


        cellsoapheader.setTypeface(brow);
        cellsoapheader.setTextSize(MENUTEXTFONTSIZE);
        seaspongeheader.setTypeface(brow);
        seaspongeheader.setTextSize(MENUTEXTFONTSIZE);
        greendarkhedar.setTypeface(brow);
        greendarkhedar.setTextSize(MENUTEXTFONTSIZE);
        sleeppheader.setTypeface(brow);
        sleeppheader.setTextSize(MENUTEXTFONTSIZE);
        hungerpheader.setTypeface(brow);
        hungerpheader.setTextSize(MENUTEXTFONTSIZE);
        lovepheader.setTypeface(brow);
        lovepheader.setTextSize(MENUTEXTFONTSIZE);
        gamepheader.setTypeface(brow);
        gamepheader.setTextSize(MENUTEXTFONTSIZE);
        hygieneheader.setTypeface(brow);
        hygieneheader.setTextSize(MENUTEXTFONTSIZE);
        allinpheader.setTypeface(brow);
        allinpheader.setTextSize(MENUTEXTFONTSIZE);

        cokeheader.setTypeface(brow);
        cokeheader.setTextSize(MENUTEXTFONTSIZE);
        juiceheader.setTypeface(brow);
        juiceheader.setTextSize(MENUTEXTFONTSIZE);
        carrotheader.setTypeface(brow);
        carrotheader.setTextSize(MENUTEXTFONTSIZE);
        saladheader.setTypeface(brow);
        saladheader.setTextSize(MENUTEXTFONTSIZE);
        applehader.setTypeface(brow);
        applehader.setTextSize(MENUTEXTFONTSIZE);

        orangeheader.setTypeface(brow);
        orangeheader.setTextSize(MENUTEXTFONTSIZE);
        noodleheader.setTypeface(brow);
        noodleheader.setTextSize(MENUTEXTFONTSIZE);
        brownieheader.setTypeface(brow);
        brownieheader.setTextSize(MENUTEXTFONTSIZE);

        cheesecakeheader.setTypeface(brow);
        cheesecakeheader.setTextSize(MENUTEXTFONTSIZE);


        frenchtoastheader.setTypeface(brow);
        frenchtoastheader.setTextSize(MENUTEXTFONTSIZE);
        cheeseheader.setTypeface(brow);
        cheeseheader.setTextSize(MENUTEXTFONTSIZE);
        soupheader.setTypeface(brow);
        soupheader.setTextSize(MENUTEXTFONTSIZE);


        watermelonbutton.setTypeface(brow);
        watermelonbutton.setTextSize(BUTTIONFONTSIZE);
        tomatobutton.setTypeface(brow);
        tomatobutton.setTextSize(BUTTIONFONTSIZE);
        pumpkinbutton.setTypeface(brow);
        pumpkinbutton.setTextSize(BUTTIONFONTSIZE);
        peesbutton.setTypeface(brow);
        peesbutton.setTextSize(BUTTIONFONTSIZE);
        kiwibutton.setTypeface(brow);
        kiwibutton.setTextSize(BUTTIONFONTSIZE);
        hotdogbutton.setTypeface(brow);
        hotdogbutton.setTextSize(BUTTIONFONTSIZE);
        cornbutton.setTypeface(brow);
        cornbutton.setTextSize(BUTTIONFONTSIZE);
        chilisbutton.setTypeface(brow);
        chilisbutton.setTextSize(BUTTIONFONTSIZE);
        broccolibutton.setTypeface(brow);
        broccolibutton.setTextSize(BUTTIONFONTSIZE);
        bananabutton.setTypeface(brow);
        bananabutton.setTextSize(BUTTIONFONTSIZE);

        regional1button.setTypeface(brow);
        regional1button.setTextSize(BUTTIONFONTSIZE);
        regional2button.setTypeface(brow);
        regional2button.setTextSize(BUTTIONFONTSIZE);
        regional3button.setTypeface(brow);
        regional3button.setTextSize(BUTTIONFONTSIZE);
        regional4button.setTypeface(brow);
        regional4button.setTextSize(BUTTIONFONTSIZE);
        regional5button.setTypeface(brow);
        regional5button.setTextSize(BUTTIONFONTSIZE);
        regional6button.setTypeface(brow);
        regional6button.setTextSize(BUTTIONFONTSIZE);

        siskebapbutton.setTypeface(brow);
        siskebapbutton.setTextSize(BUTTIONFONTSIZE);


        drinks1button.setTypeface(brow);
        drinks1button.setTextSize(BUTTIONFONTSIZE);
        drinks2button.setTypeface(brow);
        drinks2button.setTextSize(BUTTIONFONTSIZE);
        drinks3button.setTypeface(brow);
        drinks3button.setTextSize(BUTTIONFONTSIZE);
        drinks4button.setTypeface(brow);
        drinks4button.setTextSize(BUTTIONFONTSIZE);
        drinks5button.setTypeface(brow);
        drinks5button.setTextSize(BUTTIONFONTSIZE);
        drinks6button.setTypeface(brow);
        drinks6button.setTextSize(BUTTIONFONTSIZE);


        desert1button.setTypeface(brow);
        desert1button.setTextSize(BUTTIONFONTSIZE);
        desert2button.setTypeface(brow);
        desert2button.setTextSize(BUTTIONFONTSIZE);
        desert3button.setTypeface(brow);
        desert3button.setTextSize(BUTTIONFONTSIZE);
        desert4button.setTypeface(brow);
        desert4button.setTextSize(BUTTIONFONTSIZE);
        desert5button.setTypeface(brow);
        desert5button.setTextSize(BUTTIONFONTSIZE);
        desert6button.setTypeface(brow);
        desert6button.setTextSize(BUTTIONFONTSIZE);


        pizzabutton.setTypeface(brow);
        pizzabutton.setTextSize(BUTTIONFONTSIZE);

        hamburgerbutton.setTypeface(brow);
        hamburgerbutton.setTextSize(BUTTIONFONTSIZE);
        frenchfriesbutton.setTypeface(brow);
        frenchfriesbutton.setTextSize(BUTTIONFONTSIZE);
        chickenlegbutton.setTypeface(brow);
        chickenlegbutton.setTextSize(BUTTIONFONTSIZE);
        fishbutton.setTypeface(brow);
        fishbutton.setTextSize(BUTTIONFONTSIZE);
        squidbutton.setTypeface(brow);
        squidbutton.setTextSize(BUTTIONFONTSIZE);

        frenchtoastbutton.setTypeface(brow);
        frenchtoastbutton.setTextSize(BUTTIONFONTSIZE);
        cheesebutton.setTypeface(brow);
        cheesebutton.setTextSize(BUTTIONFONTSIZE);


        onionringbutton.setTypeface(brow);
        onionringbutton.setTextSize(BUTTIONFONTSIZE);
      //  soupbuttonn.setTypeface(brow);
      //  soupbuttonn.setTextSize(BUTTIONFONTSIZE);
        carrotbutton.setTypeface(brow);
        carrotbutton.setTextSize(BUTTIONFONTSIZE);
        medisaladbutton.setTypeface(brow);
        medisaladbutton.setTextSize(BUTTIONFONTSIZE);
        mixedsaladbutton.setTypeface(brow);
        mixedsaladbutton.setTextSize(BUTTIONFONTSIZE);
        applebutton.setTypeface(brow);
        applebutton.setTextSize(BUTTIONFONTSIZE);
        orangebutton.setTypeface(brow);
        orangebutton.setTextSize(BUTTIONFONTSIZE);

        cheesecakebutton.setTypeface(brow);
        cheesecakebutton.setTextSize(BUTTIONFONTSIZE);
        browniebutton.setTypeface(brow);
        browniebutton.setTextSize(BUTTIONFONTSIZE);

        cokebutton.setTypeface(brow);
        cokebutton.setTextSize(BUTTIONFONTSIZE);
        juicebutton.setTypeface(brow);
        juicebutton.setTextSize(BUTTIONFONTSIZE);

        noodlebutton.setTypeface(brow);
        noodlebutton.setTextSize(BUTTIONFONTSIZE);

        meat.setTypeface(brow);
        meat.setTextSize(BUTTIONFONTSIZE);


        meatarmbutton.setTypeface(brow);
        meatarmbutton.setTextSize(BUTTIONFONTSIZE);


        porkbutton.setTypeface(brow);
        porkbutton.setTextSize(BUTTIONFONTSIZE);

        bostonrollbutton.setTypeface(brow);
        bostonrollbutton.setTextSize(BUTTIONFONTSIZE);

        mixedrollbutton.setTypeface(brow);
        mixedrollbutton.setTextSize(BUTTIONFONTSIZE);

        salmonsushibutton.setTypeface(brow);
        salmonsushibutton.setTextSize(BUTTIONFONTSIZE);

        greensoapbutton.setTypeface(brow);
        greensoapbutton.setTextSize(BUTTIONFONTSIZE);

        soap1button.setTypeface(brow);
       soap1button.setTextSize(BUTTIONFONTSIZE);

        soap2button.setTypeface(brow);
        soap2button.setTextSize(BUTTIONFONTSIZE);


        seaspongebutton.setTypeface(brow);
        seaspongebutton.setTextSize(BUTTIONFONTSIZE);

        cellspongebutton.setTypeface(brow);
        cellspongebutton.setTextSize(BUTTIONFONTSIZE);

        darkspongebutton.setTypeface(brow);
        darkspongebutton.setTextSize(BUTTIONFONTSIZE);


        sleeppotionbutton.setTypeface(brow);
        sleeppotionbutton.setTextSize(BUTTIONFONTSIZE);

        hungerpotionbutton.setTypeface(brow);
        hungerpotionbutton.setTextSize(BUTTIONFONTSIZE);

        hygienpotionbutton.setTypeface(brow);
        hygienpotionbutton.setTextSize(BUTTIONFONTSIZE);

        lovepotionbutton.setTypeface(brow);
        lovepotionbutton.setTextSize(BUTTIONFONTSIZE);

        gamepotionbutton.setTypeface(brow);
        gamepotionbutton.setTextSize(BUTTIONFONTSIZE);
        allinpotionbutton.setTypeface(brow);
        allinpotionbutton.setTextSize(BUTTIONFONTSIZE);


        lock();
        addfunction();
        //  final ImageButton b2 = (ImageButton) findViewById(R.id.canceltomain);

        final TextView pizzatext = (TextView) findViewById(R.id.hamburgertext);
        printfood(meatindex);

        printfood(pizzaindex);
        printfood(hamburgerindex);
        printfood(greensoapindex);
        printfood(soap1index);
        printfood(soap2index);

        printfood(cellspongeindex);
        printfood(darkspongeindex);
        printfood(seaspongeindex);
        printfood(frenchfriesindex);
        printfood(chickenlegindex);
        printfood(fishindex);
        printfood(appleindex);
        printfood(bostonrollindex);
        printfood(carrotindex);
        printfood(frenchtoastindex);
        printfood(meatarmindex);
        printfood(medisaladindex);
        printfood(noodleindex);
        printfood(mixedsaladindex);
        printfood(onionringsindex);
        printfood(orangeindex);
        printfood(porkindex);
        printfood(mixedrollindex);
        printfood(salmonsushiindex);
        printfood(soupindex);
        printfood(squidindex);
        printfood(cokeindex);
        printfood(brownieindex);
        printfood(cheesecakeindex);
        printfood(cheeseindex);
        printfood(juiceindex);

        printfood(sleeppotionindex);
        printfood(hungerpotionindex);
        printfood(hygienepotionindex);
        printfood(lovepotionindex);
        printfood(gamepotionindex);
        printfood(allinpotionindex);

        printfood(watermelonindex);
        printfood(tomatoindex);
        printfood(pumpkinindex);
        printfood(peesindex);
        printfood(kiwiindex);
        printfood(hotdogindex);
        printfood(cornindex);
        printfood(cookieindex);
        printfood(chilisindex);
        printfood(broccoliindex);
        printfood(bananaindex);
        printfood(regional1index);
        printfood(regional2index);
        printfood(regional3index);
        printfood(regional4index);
        printfood(regional5index);
        printfood(regional6index);
        printfood(siskebapindex);
        printfood(drinks1index);
        printfood(drinks2index);
        printfood(drinks3index);
        printfood(drinks4index);
        printfood(drinks5index);
        printfood(drinks6index);
        printfood(desert1index);
        printfood(desert2index);
        printfood(desert3index);
        printfood(desert4index);
        printfood(desert5index);
        printfood(desert6index);


        coinimage.setSoundEffectsEnabled(false);

        coinimage.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

             //   connectioncoin();
                if(!mutestate[0])
                    soundPool.play(soundID, volume, volume, 1, 0, 1f);




                disableallchild3.setVisibility(View.INVISIBLE);
                Drawable x = getResources().getDrawable(R.mipmap.sborder8);
                headermenu.setBackground(x);
                buycoingbutton.setBackground(x);
                STATE = MARKETEXIT;
                if (gamelang == ENGLISH)  Menutext.setText("COIN SHOP");
                else if (gamelang == TURKISH)  Menutext.setText("JETON MARKETİ");
                else if (gamelang == FRENCH)  Menutext.setText("ARGENT BOUTIQUE");
                else if (gamelang == SPANISH) Menutext.setText("TIENDA DE MONEDAS");
                else if (gamelang == RUSSIAN) Menutext.setText("МОНЕТА МАГАЗИН");
                else if (gamelang == CHINESE) Menutext.setText("硬币店");
                else if (gamelang == JAPANESE) Menutext.setText("コインショップ");
                else if (gamelang == PORTUGUESE) Menutext.setText("LOJA DE MOEDAS");

                else   Menutext.setText("COIN SHOP");
/*
                Button unlockiqtext = (Button) findViewById(R.id.unlockiqbutton);
                Button plu5gametext = (Button) findViewById(R.id.plusgamebutton);
                Button noadtext = (Button) findViewById(R.id.coin10button);
                Button coin2000text = (Button) findViewById(R.id.coin100button);
                Button coin5000text = (Button) findViewById(R.id.coin500button);
                Button coin10000text = (Button) findViewById(R.id.coin1000button);

                SkuDetails skun = bp.getPurchaseListingDetails("unluckiq");
                SkuDetails skun2 = bp.getPurchaseListingDetails("plus5game");
                SkuDetails skun3 = bp.getPurchaseListingDetails("noadd");
                SkuDetails skun4 = bp.getPurchaseListingDetails("coin200");
                SkuDetails skun5 = bp.getPurchaseListingDetails("coin500");
                SkuDetails skun6 = bp.getPurchaseListingDetails("coin1000");

                unlockiqtext.setText(Double.toString(round(skun.priceValue,2))+ " " + skun.currency );
                plu5gametext.setText(Double.toString(round(skun2.priceValue,2))+ " " + skun2.currency );
                noadtext.setText(Double.toString(round(skun3.priceValue,2))+ " " + skun3.currency );
                coin2000text.setText(Double.toString(round(skun4.priceValue,2))+ " " + skun4.currency );
                coin5000text.setText(Double.toString(round(skun5.priceValue,2))+ " " + skun5.currency );
                coin10000text.setText(Double.toString(round(skun6.priceValue,2))+ " " + skun6.currency );*/


                // mainmenuframe.setVisibility(View.INVISIBLE);
                foodmenulayout.setVisibility(View.INVISIBLE);
                canceltomain.setVisibility(View.INVISIBLE);
                foodmenulayout.setVisibility(View.INVISIBLE);

                canceltomain2.setVisibility(View.INVISIBLE);
                mealslayout.setVisibility(View.INVISIBLE);

                //mainmenuframe.setVisibility(View.INVISIBLE);
             //   fastfoodframe.setVisibility(View.INVISIBLE);
                foodmenulayout.setVisibility(View.INVISIBLE);
                mealslayout.setVisibility(View.INVISIBLE);


                printscreenlayout2.setVisibility(View.INVISIBLE);


             //   fastfoodframe.setVisibility(View.INVISIBLE);
                mealslayout.setVisibility(View.INVISIBLE);
                foodmenulayout.setVisibility(View.INVISIBLE);
                canceltomain2.setVisibility(View.INVISIBLE);
                mealstofood.setVisibility(View.INVISIBLE);
                cleaninglayout.setVisibility(View.INVISIBLE);
                potionslayout.setVisibility(View.INVISIBLE);

                desertsmenumenulayut.setVisibility(View.INVISIBLE);

                veggiesmenulayout.setVisibility(View.INVISIBLE);
                eyebandrelative.setVisibility(View.INVISIBLE);

                fruitsmenulayout.setVisibility(View.INVISIBLE);
                regionalmenulayout.setVisibility(View.INVISIBLE);
                drinksmenulayout.setVisibility(View.INVISIBLE);
                shopframe.setVisibility(View.VISIBLE);
                coinlayout.setVisibility(View.VISIBLE);
                // setting.setVisibility(View.INVISIBLE);

                buycoingbutton.setVisibility(View.INVISIBLE);
                main.setEnabled(false);
                shop.setEnabled(false);
                share.setEnabled(false);
                segmentkitchen.setEnabled(false);
                sleeplayout.setEnabled(false);
                wclayout.setEnabled(false);
                segmenthygiene.setEnabled(false);
                segmentbedroom.setEnabled(false);
                segmentgameroom.setEnabled(false);
                peebtn.setEnabled(false);
                button_sbm3.setEnabled(false);
                washhandbutton.setEnabled(false);
                button_sbm4.setEnabled(false);
                segmentwc.setEnabled(false);
                //  setting.setVisibility(View.INVISIBLE);
                lin1.setEnabled(false);
                lin2.setEnabled(false);
                lin3.setEnabled(false);
                // lin4.setEnabled(false);
                // lin5.setEnabled(false);
                // lin6.setEnabled(false);
                lin7.setEnabled(false);
                lin8.setEnabled(false);
                lin9.setEnabled(false);
                lin10.setEnabled(false);
                lin11.setEnabled(false);
                lin12.setEnabled(false);
                lin13.setEnabled(false);
                lin14.setEnabled(false);
                lin15.setEnabled(false);
                lin16.setEnabled(false);
                lin17.setEnabled(false);
                lin18.setEnabled(false);
                lin19.setEnabled(false);
                lin20.setEnabled(false);
                lin21.setEnabled(false);
                lin22.setEnabled(false);
                lin23.setEnabled(false);
                lin24.setEnabled(false);
                lin25.setEnabled(false);
                lin26.setEnabled(false);
                lin27.setEnabled(false);



/*
                if(isOnline())
                {
                    new CountDownTimer(100, 10) {
                    public void onTick(long milsec) {

                    }
                    public void onFinish() {

                        getskudetail();
                    }
                }.start();}
                else {
                    alertbox();
                    ImageView img = (ImageView) findViewById(R.id.coinconnectionlayoutimg);
                    FrameLayout frm = (FrameLayout) findViewById(R.id.coinconnectionlayout);
                    frm.setVisibility(View.INVISIBLE);
                    img.setVisibility(View.INVISIBLE);

                }
                ;*/


            }
        });

        //final TextView textpizza2 = (TextView) findViewById(R.id.textView100);
        final TextView hamburgertext2 = (TextView) findViewById(R.id.hamburgertext);
        final TextView frenchfries2 = (TextView) findViewById(R.id.frenchfriestext);
        final TextView chickenleg = (TextView) findViewById(R.id.chickenlegtext);
        final TextView fishtext2 = (TextView) findViewById(R.id.fishtext);
        final TextView squidtext2 = (TextView) findViewById(R.id.squidtext);
        final TextView frenchtoatsttext2 = (TextView) findViewById(R.id.frenchtoasttext);
        final TextView cheestext2 = (TextView) findViewById(R.id.cheesetext);
        final TextView onionringstext2 = (TextView) findViewById(R.id.onionringsltext);
        final TextView souptext2 = (TextView) findViewById(R.id.souptext);

        final TextView carrottext2 = (TextView) findViewById(R.id.carrottext);
        final TextView medisaladtext2 = (TextView) findViewById(R.id.medisaladtext);
        final TextView mixedsaladtext2 = (TextView) findViewById(R.id.mixedsaladtext);
        final TextView appletext2 = (TextView) findViewById(R.id.appletext);
        final TextView orangetext2 = (TextView) findViewById(R.id.orangetext);
        final TextView brownietext2 = (TextView) findViewById(R.id.brownietext);
        final TextView cheesecaketext2 = (TextView) findViewById(R.id.cheescaketext);

        final TextView coketext2 = (TextView) findViewById(R.id.coketext);
        final TextView juicetext2 = (TextView) findViewById(R.id.juicetext);
        final TextView noodletext2 = (TextView) findViewById(R.id.noodletext);

        final TextView tbonetext2 = (TextView) findViewById(R.id.tbonetext);
        final TextView meatarmtext2 = (TextView) findViewById(R.id.meatarmtext);
        final TextView porktext2 = (TextView) findViewById(R.id.porktext);

        final TextView bostronrolltext2 = (TextView) findViewById(R.id.bostonrolltext);
        final TextView mixedrolltext2 = (TextView) findViewById(R.id.mixrolltext);
        final TextView salmonsushitext2 = (TextView) findViewById(R.id.salmonsushitext);

        final TextView greesoaptext2 = (TextView) findViewById(R.id.greensoaptext);
        final TextView cellsoaptext2 = (TextView) findViewById(R.id.cellsoaptext);
        final TextView seaspongetext2 = (TextView) findViewById(R.id.seaspongetext);
        final TextView darkspongetext2 = (TextView) findViewById(R.id.greendarksoaptext);
        final TextView soap1text2 = (TextView) findViewById(R.id.soap1text);
        final TextView soap2text2 = (TextView) findViewById(R.id.soap2text);

        final TextView sleeppotiontext2 = (TextView) findViewById(R.id.sleepotiontext);
        final TextView hungerpotiontext2 = (TextView) findViewById(R.id.hungerpotiontext);
        final TextView hygienepotiontext2 = (TextView) findViewById(R.id.hygienepotiontext);
        final TextView lovepotiontext2 = (TextView) findViewById(R.id.lovepotiontext);
        final TextView gamepotiontext2 = (TextView) findViewById(R.id.gamepotiontext);

        final TextView textconrat4 = (TextView) findViewById(R.id.textView15);
        final TextView textconrat = (TextView) findViewById(R.id.textViewconrats);
        final TextView textconrat2 = (TextView) findViewById(R.id.coinamount);
        final TextView textconrat3 = (TextView) findViewById(R.id.textView55);

        //textconrat.setTypeface(brow);
        //textconrat.setTextSize(35);
        //textconrat2.setTypeface(brow);
        //textconrat2.setTextSize(35);
        //textconrat3.setTypeface(brow);
        //textconrat3.setTextSize(30);
        //textconrat4.setTypeface(brow);
        //textconrat4.setTextSize(30);

        // textpizza2.setTypeface(brow);
        //textpizza2.setTextSize(20);
        //hamburgertext2.setTypeface(brow);
        //hamburgertext2.setTextSize(20);
        //hamburgertext2.setTextColor(Color.argb(255, 52, 73, 94));
      /*  frenchfries2.setTypeface(brow);
        frenchfries2.setTextSize(20);
        frenchfries2.setTextColor(Color.argb(255, 52, 73, 94));*/

      /*  chickenleg.setTypeface(brow);
        chickenleg.setTextSize(20);
        chickenleg.setTextColor(Color.argb(255, 52, 73, 94));*/

     /*   fishtext2.setTypeface(brow);
        fishtext2.setTextSize(20);
        fishtext2.setTextColor(Color.argb(255, 52, 73, 94));

        squidtext2.setTypeface(brow);
        squidtext2.setTextSize(20);
        squidtext2.setTextColor(Color.argb(255, 52, 73, 94));

        frenchtoatsttext2.setTypeface(brow);
        frenchtoatsttext2.setTextSize(20);
        frenchtoatsttext2.setTextColor(Color.argb(255, 52, 73, 94));

        cheestext2.setTypeface(brow);
        cheestext2.setTextSize(20);
        cheestext2.setTextColor(Color.argb(255, 52, 73, 94));


        onionringstext2.setTypeface(brow);
        onionringstext2.setTextSize(20);
        onionringstext2.setTextColor(Color.argb(255, 52, 73, 94));


        souptext2.setTypeface(brow);
        souptext2.setTextSize(20);
        souptext2.setTextColor(Color.argb(255, 52, 73, 94));


        carrottext2.setTypeface(brow);
        carrottext2.setTextSize(20);
        carrottext2.setTextColor(Color.argb(255, 52, 73, 94));


        medisaladtext2.setTypeface(brow);
        medisaladtext2.setTextSize(20);
        medisaladtext2.setTextColor(Color.argb(255, 52, 73, 94));


        mixedsaladtext2.setTypeface(brow);
        mixedsaladtext2.setTextSize(20);
        mixedsaladtext2.setTextColor(Color.argb(255, 52, 73, 94));

        appletext2.setTypeface(brow);
        appletext2.setTextSize(20);
        appletext2.setTextColor(Color.argb(255, 52, 73, 94));

        orangetext2.setTypeface(brow);
        orangetext2.setTextSize(20);
        orangetext2.setTextColor(Color.argb(255, 52, 73, 94));

        brownietext2.setTypeface(brow);
        brownietext2.setTextSize(20);
        brownietext2.setTextColor(Color.argb(255, 52, 73, 94));

        cheesecaketext2.setTypeface(brow);
        cheesecaketext2.setTextSize(20);
        cheesecaketext2.setTextColor(Color.argb(255, 52, 73, 94));

        coketext2.setTypeface(brow);
        coketext2.setTextSize(20);
        coketext2.setTextColor(Color.argb(255, 52, 73, 94));

        juicetext2.setTypeface(brow);
        juicetext2.setTextSize(20);
        juicetext2.setTextColor(Color.argb(255, 52, 73, 94));

        noodletext2.setTypeface(brow);
        noodletext2.setTextSize(20);
        noodletext2.setTextColor(Color.argb(255, 52, 73, 94));


        tbonetext2.setTypeface(brow);
        tbonetext2.setTextSize(20);
        tbonetext2.setTextColor(Color.argb(255, 52, 73, 94));

        meatarmtext2.setTypeface(brow);
        meatarmtext2.setTextSize(20);
        meatarmtext2.setTextColor(Color.argb(255, 52, 73, 94));

        porktext2.setTypeface(brow);
        porktext2.setTextSize(20);
        porktext2.setTextColor(Color.argb(255, 52, 73, 94));



        bostronrolltext2.setTypeface(brow);
        bostronrolltext2.setTextSize(20);
        bostronrolltext2.setTextColor(Color.argb(255, 52, 73, 94));


        mixedrolltext2.setTypeface(brow);
        mixedrolltext2.setTextSize(20);
        mixedrolltext2.setTextColor(Color.argb(255, 52, 73, 94));


        salmonsushitext2.setTypeface(brow);
        salmonsushitext2.setTextSize(20);
        salmonsushitext2.setTextColor(Color.argb(255, 52, 73, 94));


        greesoaptext2.setTypeface(brow);
        greesoaptext2.setTextSize(20);
        greesoaptext2.setTextColor(Color.argb(255, 52, 73, 94));

        cellsoaptext2.setTypeface(brow);
        cellsoaptext2.setTextSize(20);
        cellsoaptext2.setTextColor(Color.argb(255, 52, 73, 94));

        seaspongetext2.setTypeface(brow);
        seaspongetext2.setTextSize(20);
        seaspongetext2.setTextColor(Color.argb(255, 52, 73, 94));

        darkspongetext2.setTypeface(brow);
        darkspongetext2.setTextSize(20);
        darkspongetext2.setTextColor(Color.argb(255, 52, 73, 94));



        sleeppotiontext2.setTypeface(brow);
        sleeppotiontext2.setTextSize(20);
        sleeppotiontext2.setTextColor(Color.argb(255, 52, 73, 94));


        hungerpotiontext2.setTypeface(brow);
        hungerpotiontext2.setTextSize(20);
        hungerpotiontext2.setTextColor(Color.argb(255, 52, 73, 94));

        hygienepotiontext2.setTypeface(brow);
        hygienepotiontext2.setTextSize(20);
        hygienepotiontext2.setTextColor(Color.argb(255, 52, 73, 94));


        lovepotiontext2.setTypeface(brow);
        lovepotiontext2.setTextSize(20);
        lovepotiontext2.setTextColor(Color.argb(255, 52, 73, 94));


        gamepotiontext2.setTypeface(brow);
        gamepotiontext2.setTextSize(20);
        gamepotiontext2.setTextColor(Color.argb(255, 52, 73, 94));

     */    ImageView  fr1 = (ImageView) findViewById(R.id.free1);
                ImageView  fr2 = (ImageView) findViewById(R.id.free2);
                ImageView  fr3 = (ImageView) findViewById(R.id.free3);
                ImageView  fr4 = (ImageView) findViewById(R.id.free4);
                ImageView  fr5 = (ImageView) findViewById(R.id.free5);

                fr1.setVisibility(View.VISIBLE);
                fr2.setVisibility(View.VISIBLE);
                fr3.setVisibility(View.VISIBLE);
                fr4.setVisibility(View.VISIBLE);
                fr5.setVisibility(View.VISIBLE);

        tcoin.setSoundEffectsEnabled(false);
        tcoin.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {





                if(!mutestate[0])
                    soundPool.play(soundID, volume, volume, 1, 0, 1f);

                Drawable x = getResources().getDrawable(R.mipmap.sborder8);
                headermenu.setBackground(x);
                buycoingbutton.setBackground(x);

                disableallchild3.setVisibility(View.VISIBLE);



                if (gamelang == ENGLISH)  Menutext.setText("COIN SHOP");
                else if (gamelang == TURKISH)  Menutext.setText("JETON MARKETİ");
                else if (gamelang == FRENCH)  Menutext.setText("ARGENT BOUTIQUE");
                else if (gamelang == SPANISH) Menutext.setText("TIENDA DE MONEDAS");
                else if (gamelang == RUSSIAN) Menutext.setText("МОНЕТА МАГАЗИН");
                else if (gamelang == CHINESE) Menutext.setText("硬币店");
                else if (gamelang == JAPANESE) Menutext.setText("コインショップ");
                else if (gamelang == PORTUGUESE) Menutext.setText("LOJA DE MOEDAS");
                else   Menutext.setText("COIN SHOP");
                STATE = MARKETEXIT;
                //  mainmenuframe.setVisibility(View.INVISIBLE);
/*
                Button unlockiqtext = (Button) findViewById(R.id.unlockiqbutton);
                Button plu5gametext = (Button) findViewById(R.id.plusgamebutton);
                Button noadtext = (Button) findViewById(R.id.coin10button);
                Button coin2000text = (Button) findViewById(R.id.coin100button);
                Button coin5000text = (Button) findViewById(R.id.coin500button);
                Button coin10000text = (Button) findViewById(R.id.coin1000button);

                SkuDetails skun = bp.getPurchaseListingDetails("unluckiq");
                SkuDetails skun2 = bp.getPurchaseListingDetails("plus5game");
                SkuDetails skun3 = bp.getPurchaseListingDetails("noadd");
                SkuDetails skun4 = bp.getPurchaseListingDetails("coin200");
                SkuDetails skun5 = bp.getPurchaseListingDetails("coin500");
                SkuDetails skun6 = bp.getPurchaseListingDetails("coin1000");

                unlockiqtext.setText(Double.toString(round(skun.priceValue,2))+ " " + skun.currency );
                plu5gametext.setText(Double.toString(round(skun2.priceValue,2))+ " " + skun2.currency );
                noadtext.setText(Double.toString(round(skun3.priceValue,2))+ " " + skun3.currency );
                coin2000text.setText(Double.toString(round(skun4.priceValue,2))+ " " + skun4.currency );
                coin5000text.setText(Double.toString(round(skun5.priceValue,2))+ " " + skun5.currency );
                coin10000text.setText(Double.toString(round(skun6.priceValue,2))+ " " + skun6.currency );*/


                foodmenulayout.setVisibility(View.INVISIBLE);
                canceltomain.setVisibility(View.INVISIBLE);
                foodmenulayout.setVisibility(View.INVISIBLE);

                canceltomain2.setVisibility(View.INVISIBLE);
                mealslayout.setVisibility(View.INVISIBLE);


              //  fastfoodframe.setVisibility(View.INVISIBLE);
                foodmenulayout.setVisibility(View.INVISIBLE);
                mealslayout.setVisibility(View.INVISIBLE);


                printscreenlayout2.setVisibility(View.INVISIBLE);

                share.setVisibility(View.INVISIBLE);
              //  fastfoodframe.setVisibility(View.INVISIBLE);
                mealslayout.setVisibility(View.INVISIBLE);
                foodmenulayout.setVisibility(View.INVISIBLE);
                canceltomain2.setVisibility(View.INVISIBLE);
                mealstofood.setVisibility(View.INVISIBLE);
                cleaninglayout.setVisibility(View.INVISIBLE);
                potionslayout.setVisibility(View.INVISIBLE);

                desertsmenumenulayut.setVisibility(View.INVISIBLE);

                veggiesmenulayout.setVisibility(View.INVISIBLE);
                eyebandrelative.setVisibility(View.INVISIBLE);

                fruitsmenulayout.setVisibility(View.INVISIBLE);
                regionalmenulayout.setVisibility(View.INVISIBLE);
                drinksmenulayout.setVisibility(View.INVISIBLE);
                shopframe.setVisibility(View.VISIBLE);
                coinlayout.setVisibility(View.VISIBLE);
               // coinimage.setVisibility(View.INVISIBLE);
                // setting.setVisibility(View.INVISIBLE);
                buycoingbutton.setVisibility(View.INVISIBLE);

            }
        });

        //meattext2.setText("Meat:" + Integer.toString(marketarray[meatindex]));
        //final TextView coin = (TextView) findViewById(R.id.textView50);


        buycoingbutton.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        buycoingbutton.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:

                        if(!mutestate[0])
                            soundPool.play(soundID, volume, volume, 1, 0, 1f);
                        Drawable x = getResources().getDrawable(R.mipmap.sborder8);
                        headermenu.setBackground(x);
                        buycoingbutton.setBackground(x);

                        if (gamelang == ENGLISH)  Menutext.setText("COIN SHOP");
                        else if (gamelang == TURKISH)  Menutext.setText("JETON MARKETİ");
                        else if (gamelang == FRENCH)  Menutext.setText("ARGENT BOUTIQUE");
                        else if (gamelang == SPANISH) Menutext.setText("TIENDA DE MONEDAS");
                        else if (gamelang == RUSSIAN) Menutext.setText("МОНЕТА МАГАЗИН");
                        else if (gamelang == CHINESE) Menutext.setText("硬币店");
                        else if (gamelang == JAPANESE) Menutext.setText("コインショップ");
                        else if (gamelang == PORTUGUESE) Menutext.setText("LOJA DE MOEDAS");
                        else   Menutext.setText("COIN SHOP");
                        STATE = MARKETEXIT;

/*

                        Button unlockiqtext = (Button) findViewById(R.id.unlockiqbutton);
                        Button plu5gametext = (Button) findViewById(R.id.plusgamebutton);
                        Button noadtext = (Button) findViewById(R.id.coin10button);
                        Button coin2000text = (Button) findViewById(R.id.coin100button);
                        Button coin5000text = (Button) findViewById(R.id.coin500button);
                        Button coin10000text = (Button) findViewById(R.id.coin1000button);

                        SkuDetails skun = bp.getPurchaseListingDetails("unluckiq");
                        SkuDetails skun2 = bp.getPurchaseListingDetails("plus5game");
                        SkuDetails skun3 = bp.getPurchaseListingDetails("noadd");
                        SkuDetails skun4 = bp.getPurchaseListingDetails("coin200");
                        SkuDetails skun5 = bp.getPurchaseListingDetails("coin500");
                        SkuDetails skun6 = bp.getPurchaseListingDetails("coin1000");

                        unlockiqtext.setText(Double.toString(round(skun.priceValue,2))+ " " + skun.currency );
                        plu5gametext.setText(Double.toString(round(skun2.priceValue,2))+ " " + skun2.currency );
                        noadtext.setText(Double.toString(round(skun3.priceValue,2))+ " " + skun3.currency );
                        coin2000text.setText(Double.toString(round(skun4.priceValue,2))+ " " + skun4.currency );
                        coin5000text.setText(Double.toString(round(skun5.priceValue,2))+ " " + skun5.currency );
                        coin10000text.setText(Double.toString(round(skun6.priceValue,2))+ " " + skun6.currency );*/


                        foodmenulayout.setVisibility(View.INVISIBLE);
                        canceltomain.setVisibility(View.INVISIBLE);
                        foodmenulayout.setVisibility(View.INVISIBLE);
                        buycoingbutton.setVisibility(View.INVISIBLE);
                        canceltomain2.setVisibility(View.INVISIBLE);
                        mealslayout.setVisibility(View.INVISIBLE);


                      //  fastfoodframe.setVisibility(View.INVISIBLE);
                        foodmenulayout.setVisibility(View.INVISIBLE);
                        mealslayout.setVisibility(View.INVISIBLE);


                        printscreenlayout2.setVisibility(View.INVISIBLE);

                        share.setVisibility(View.INVISIBLE);
                    //    fastfoodframe.setVisibility(View.INVISIBLE);
                        mealslayout.setVisibility(View.INVISIBLE);
                        foodmenulayout.setVisibility(View.INVISIBLE);
                        canceltomain2.setVisibility(View.INVISIBLE);
                        mealstofood.setVisibility(View.INVISIBLE);
                        cleaninglayout.setVisibility(View.INVISIBLE);
                        potionslayout.setVisibility(View.INVISIBLE);

                        desertsmenumenulayut.setVisibility(View.INVISIBLE);
                        eyebandrelative.setVisibility(View.INVISIBLE);
                        veggiesmenulayout.setVisibility(View.INVISIBLE);

                        fruitsmenulayout.setVisibility(View.INVISIBLE);
                        regionalmenulayout.setVisibility(View.INVISIBLE);
                        drinksmenulayout.setVisibility(View.INVISIBLE);


                        coinlayout.setVisibility(View.VISIBLE);
                        //coinimage.setVisibility(View.INVISIBLE);
                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        buycoingbutton.setAlpha(1f);
                        buycoingbutton.setVisibility(View.INVISIBLE);

                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });





        meat.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        meat.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:


                        if (coin[0] - 35 < 0) {

                            
                            coinok = false;
                            vibrate(200);
                        } else {
                            coin[0] = coin[0] - 35;
                            coinok = true;
                            marketarray[meatindex] = marketarray[meatindex] + 1;
                            if (marketarray[meatindex] <= 0) removefood(meatindex);
                            if (marketarray[meatindex] == 1) addfood(meatindex);
                            if (!mutestate[0]) soundPool6.play(soundID6, volume, volume, 1, 0, 1f);

                            tcoin.setText(Integer.toString(coin[0]));
                            printfood(meatindex);

                        }
                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        meat.setAlpha(1f);


                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });
        pizzabutton.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        pizzabutton.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:



                        if (coin[0] - 20 < 0) {

                            
                            coinok = false;
                            vibrate(100);

                        } else {
                            coin[0] = coin[0] - 20;
                            coinok = true;
                            marketarray[pizzaindex] = marketarray[pizzaindex] + 1;
                            if (marketarray[pizzaindex] <= 0) removefood(pizzaindex);
                            if (marketarray[pizzaindex] == 1) addfood(pizzaindex);
                            if (!mutestate[0]) soundPool6.play(soundID6, volume, volume, 1, 0, 1f);

                            tcoin.setText(Integer.toString(coin[0]));
                            printfood(pizzaindex);

                        }
                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        pizzabutton.setAlpha(1f);


                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });

        //appleimg,bostonrollimg,carrotimg,frenchtoastimg,meatarmimg, medisaladimg,noodleimg,mixedsaladimg, onionringsv,orangeimg,porkimg,mixedrollimg, salmonsushiimg,soupimg,squidimg,cokeimg,brownieimg,cheesecakeimg,cheeseimg, juiceimg;


        applebutton.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        applebutton.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:




                        if (coin[0] - 8 < 0) {

                            
                            coinok = false;
                            vibrate(100);
                        } else {
                            coin[0] = coin[0] - 8;
                            coinok = true;
                            marketarray[appleindex] = marketarray[appleindex] + 1;
                            if (marketarray[appleindex] <= 0) removefood(appleindex);
                            if (marketarray[appleindex] == 1) addfood(appleindex);
                            if (!mutestate[0]) soundPool6.play(soundID6, volume, volume, 1, 0, 1f);
                            tcoin.setText(Integer.toString(coin[0]));
                            printfood(appleindex);

                        }
                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        applebutton.setAlpha(1f);


                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });


        bostonrollbutton.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        bostonrollbutton.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:


                        if (coin[0] - 60 < 0) {

                            
                            coinok = false;
                            vibrate(100);
                        } else {
                            coinok = true;
                            coin[0] = coin[0] - 60;
                            marketarray[bostonrollindex] = marketarray[bostonrollindex] + 1;
                            if (marketarray[bostonrollindex] <= 0) removefood(bostonrollindex);
                            if (marketarray[bostonrollindex] == 1) addfood(bostonrollindex);

                            if (!mutestate[0]) soundPool6.play(soundID6, volume, volume, 1, 0, 1f);
                            tcoin.setText(Integer.toString(coin[0]));
                            printfood(bostonrollindex);
                        }

                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        bostonrollbutton.setAlpha(1f);


                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });


        carrotbutton.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        carrotbutton.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:


                        if (coin[0]  - 7 < 0) {

                            
                            coinok = false;
                            vibrate(100);
                        } else {
                            coin[0] = coin[0] - 7;
                            coinok = true;
                            marketarray[carrotindex] = marketarray[carrotindex] + 1;
                            if (marketarray[carrotindex] <= 0) removefood(carrotindex);
                            if (marketarray[carrotindex] == 1) addfood(carrotindex);
                            if (!mutestate[0]) soundPool6.play(soundID6, volume, volume, 1, 0, 1f);

                            tcoin.setText(Integer.toString(coin[0]));
                            printfood(carrotindex);

                        }
                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        carrotbutton.setAlpha(1f);


                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });


        frenchtoastbutton.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        frenchtoastbutton.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:


                        if (coin[0] - 12 < 0) {

                            
                            coinok = false;
                            vibrate(100);

                        } else {
                            coin[0] = coin[0] - 12;
                            coinok = true;
                            marketarray[frenchtoastindex] = marketarray[frenchtoastindex] + 1;
                            if (marketarray[frenchtoastindex] <= 0) removefood(frenchtoastindex);
                            if (marketarray[frenchtoastindex] == 1) addfood(frenchtoastindex);

                            if (!mutestate[0]) soundPool6.play(soundID6, volume, volume, 1, 0, 1f);
                            tcoin.setText(Integer.toString(coin[0]));
                            printfood(frenchtoastindex);
                        }
                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        frenchtoastbutton.setAlpha(1f);


                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });


        meatarmbutton.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        meatarmbutton.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:





                        if (coin[0] - 12 < 0) {

                            
                            coinok = false;
                            vibrate(100);

                        } else {

                            coin[0] = coin[0] - 12;
                            coinok = true;
                            marketarray[meatarmindex] = marketarray[meatarmindex] + 1;
                            if (marketarray[meatarmindex] <= 0) removefood(meatarmindex);
                            if (marketarray[meatarmindex] == 1) addfood(meatarmindex);

                            if (!mutestate[0]) soundPool6.play(soundID6, volume, volume, 1, 0, 1f);
                            tcoin.setText(Integer.toString(coin[0]));
                            printfood(meatarmindex);

                        }
                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        meatarmbutton.setAlpha(1f);


                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });


        noodlebutton.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        noodlebutton.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:


                        if (coin[0] - 15 < 0) {

                            
                            coinok = false;
                            vibrate(100);

                        } else {
                            coin[0] = coin[0] - 15;
                            coinok = true;
                            marketarray[noodleindex] = marketarray[noodleindex] + 1;
                            if (marketarray[noodleindex] <= 0) removefood(noodleindex);
                            if (marketarray[noodleindex] == 1) addfood(noodleindex);
                            if (!mutestate[0]) soundPool6.play(soundID6, volume, volume, 1, 0, 1f);
                            tcoin.setText(Integer.toString(coin[0]));
                            printfood(noodleindex);
                        }
                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        noodlebutton.setAlpha(1f);


                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });


        mixedsaladbutton.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        mixedsaladbutton.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:

                        if (coin[0] - 60 < 0) {

                            
                            vibrate(100);
                            coinok = false;

                        } else {

                            coin[0] = coin[0] - 60;
                            coinok = true;
                            marketarray[mixedsaladindex] = marketarray[mixedsaladindex] + 1;
                            if (marketarray[mixedsaladindex] <= 0) removefood(mixedsaladindex);
                            if (marketarray[mixedsaladindex] == 1) addfood(mixedsaladindex);

                            if (!mutestate[0]) soundPool6.play(soundID6, volume, volume, 1, 0, 1f);
                            tcoin.setText(Integer.toString(coin[0]));
                            printfood(mixedsaladindex);


                        }
                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        mixedsaladbutton.setAlpha(1f);


                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });


        medisaladbutton.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        medisaladbutton.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:




                        if (coin[0] - 18 < 0) {

                            
                            coinok = false;
                            vibrate(100);

                        } else {
                            coin[0] = coin[0] - 18;
                            coinok = true;
                            marketarray[medisaladindex] = marketarray[medisaladindex] + 1;
                            if (marketarray[medisaladindex] <= 0) removefood(medisaladindex);
                            if (marketarray[medisaladindex] == 1) addfood(medisaladindex);

                            if (!mutestate[0]) soundPool6.play(soundID6, volume, volume, 1, 0, 1f);
                            tcoin.setText(Integer.toString(coin[0]));
                            printfood(medisaladindex);
                        }
                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        medisaladbutton.setAlpha(1f);


                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });

        //eyelids();
        onionringbutton.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        onionringbutton.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:



                        if (coin[0] - 24 < 0) {

                            
                            coinok = false;
                            vibrate(100);

                        } else {

                            coin[0] = coin[0] - 24;
                            coinok = true;
                            marketarray[onionringsindex] = marketarray[onionringsindex] + 1;
                            if (marketarray[onionringsindex] <= 0) removefood(onionringsindex);
                            if (marketarray[onionringsindex] == 1) addfood(onionringsindex);

                            if (!mutestate[0]) soundPool6.play(soundID6, volume, volume, 1, 0, 1f);
                            tcoin.setText(Integer.toString(coin[0]));
                            printfood(onionringsindex);
                        }
                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        onionringbutton.setAlpha(1f);


                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });

        orangebutton.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        orangebutton.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:




                        if (coin[0] - 9 < 0) {

                            
                            coinok = false;
                            vibrate(100);

                        } else {

                            coin[0] = coin[0] - 9;
                            coinok = true;
                            marketarray[orangeindex] = marketarray[orangeindex] + 1;
                            if (marketarray[orangeindex] <= 0) removefood(orangeindex);
                            if (marketarray[orangeindex] == 1) addfood(orangeindex);
                            if (!mutestate[0]) soundPool6.play(soundID6, volume, volume, 1, 0, 1f);

                            tcoin.setText(Integer.toString(coin[0]));
                            printfood(orangeindex);
                        }
                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        orangebutton.setAlpha(1f);


                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });


        porkbutton.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        porkbutton.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:




                        if (coin[0] - 27 < 0) {

                            
                            coinok = false;
                            vibrate(100);

                        } else {
                            coin[0] = coin[0] - 27;
                            coinok = true;
                            marketarray[porkindex] = marketarray[porkindex] + 1;
                            if (marketarray[porkindex] <= 0) removefood(porkindex);
                            if (marketarray[porkindex] == 1) addfood(porkindex);
                            if (!mutestate[0]) soundPool6.play(soundID6, volume, volume, 1, 0, 1f);

                            tcoin.setText(Integer.toString(coin[0]));
                            printfood(porkindex);

                        }
                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        porkbutton.setAlpha(1f);


                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });

        mixedrollbutton.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        mixedrollbutton.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:


                        if (coin[0] - 60 < 0) {

                            
                            coinok = false;
                            vibrate(100);

                        } else {
                            coin[0] = coin[0] - 60;
                            coinok = true;
                            marketarray[mixedrollindex] = marketarray[mixedrollindex] + 1;
                            if (marketarray[mixedrollindex] <= 0) removefood(mixedrollindex);
                            if (marketarray[mixedrollindex] == 1) addfood(mixedrollindex);
                            if (!mutestate[0]) soundPool6.play(soundID6, volume, volume, 1, 0, 1f);
                            tcoin.setText(Integer.toString(coin[0]));
                            printfood(mixedrollindex);

                        }
                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        mixedrollbutton.setAlpha(1f);


                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });


        salmonsushibutton.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        salmonsushibutton.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:




                        if (coin[0] - 60 < 0) {

                            
                            coinok = false;
                            vibrate(100);

                        } else {
                            coin[0] = coin[0] - 60;
                            coinok = true;
                            marketarray[salmonsushiindex] = marketarray[salmonsushiindex] + 1;
                            if (marketarray[salmonsushiindex] <= 0) removefood(salmonsushiindex);
                            if (marketarray[salmonsushiindex] == 1) addfood(salmonsushiindex);

                            if (!mutestate[0]) soundPool6.play(soundID6, volume, volume, 1, 0, 1f);
                            tcoin.setText(Integer.toString(coin[0]));
                            printfood(salmonsushiindex);

                        }
                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        salmonsushibutton.setAlpha(1f);


                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });

        final RelativeLayout coinwinlayout = (RelativeLayout) findViewById(R.id.iquplevel);
        final RelativeLayout pluscoinlayout = (RelativeLayout) findViewById(R.id.pluscoinlayout);
        final RelativeLayout pluscoinlayout2 = (RelativeLayout) findViewById(R.id.pluscoinlayout2);
        final RelativeLayout warningquestion2 = (RelativeLayout) findViewById(R.id.warningbox2);
        final RelativeLayout pluslifelayout = (RelativeLayout) findViewById(R.id.plusonelifelayout);
        final RelativeLayout pluslifelayout3 = (RelativeLayout) findViewById(R.id.pluscoinlayout3);
        final RelativeLayout pluslifelayout4 = (RelativeLayout) findViewById(R.id.warningbox3);

        final Button coikokbutton = (Button) findViewById(R.id.button32);
        final Button coikokbutton2 = (Button) findViewById(R.id.button322);
        final Button coikokbutton3 = (Button) findViewById(R.id.button3222);
        final Button coikokbutton4 = (Button) findViewById(R.id.button3221);
        final Button coikokbutton5 = (Button) findViewById(R.id.button32221);
        final TextView textcoin = (TextView) findViewById(R.id.textcoin);
        final Button coikokbutton6 = (Button) findViewById(R.id.button362);
        final Button coikokbutton7 = (Button) findViewById(R.id.button363);


        coikokbutton7.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        coikokbutton7.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:

                        coikokbutton7.setEnabled(false);
                        if(!mutestate[0])
                            soundPool.play(soundID, volume, volume, 1, 0, 1f);

                        coinbackpressflag = true;

                        final Animation shake = AnimationUtils.loadAnimation(x, R.anim.righttoleft);
                        disableallchild.setVisibility(View.INVISIBLE);
                        shake.setDuration(SLIDEANIMDUR);
                        pluscoinlayout8();
                        pluslifelayout4.setAnimation(shake);
                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        coikokbutton7.setAlpha(1);


                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });



        coikokbutton6.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        coikokbutton6.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:
                        if(!mutestate[0])
                            soundPool.play(soundID, volume, volume, 1, 0, 1f);

                        coinbackpressflag = true;

                        final Animation shake = AnimationUtils.loadAnimation(x, R.anim.righttoleft);
                        disableallchild.setVisibility(View.INVISIBLE);
                        shake.setDuration(SLIDEANIMDUR);
                        pluscoinlayout7();
                        warningquestion2.setAnimation(shake);
                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        coikokbutton6.setAlpha(1);


                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });



        coikokbutton5.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        coikokbutton5.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:
                        if(!mutestate[0])
                            soundPool.play(soundID, volume, volume, 1, 0, 1f);

                        coinbackpressflag = true;

                        final Animation shake = AnimationUtils.loadAnimation(x, R.anim.righttoleft);
                        disableallchild.setVisibility(View.INVISIBLE);
                        shake.setDuration(SLIDEANIMDUR);
                        pluscoinlayout6();
                        pluslifelayout3.setAnimation(shake);
                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        coikokbutton5.setAlpha(1);


                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });


        coikokbutton4.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        coikokbutton4.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:
                        if(!mutestate[0])
                            soundPool.play(soundID, volume, volume, 1, 0, 1f);


                        coinbackpressflag = true;
                        final Animation shake = AnimationUtils.loadAnimation(x, R.anim.righttoleft);
                        disableallchild.setVisibility(View.INVISIBLE);
                        shake.setDuration(SLIDEANIMDUR);
                        pluscoinlayout5();

                        gamestar++;
                        if (gamestar > MAXGAMEPLAY) gamestar = MAXGAMEPLAY;

                        editor.putInt("gamestar", gamestar);
                        editor.commit();

                        pluslifelayout.setAnimation(shake);
                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        coikokbutton4.setAlpha(1);


                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });


        coikokbutton3.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        coikokbutton3.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:
                        if(!mutestate[0])
                            soundPool.play(soundID, volume, volume, 1, 0, 1f);

                        coinbackpressflag = true;
                        pluscoinlayout2.setVisibility(View.INVISIBLE);
                        final Animation shake = AnimationUtils.loadAnimation(x, R.anim.righttoleft);
                        disableallchild.setVisibility(View.INVISIBLE);
                        shake.setDuration(SLIDEANIMDUR);
                        pluscoinlayout2();

                       /* if (videogo) {
                            pluscoinaward(20);
                           // pluscoinlayout2.setAnimation(shake);
                            videogo = false;
                            //editor.putBoolean("videogo", videogo);
                            //editor.commit();
                        }*/


                        if (facebookgo || GoodlegO || instago || twittergo) {
                            pluscoinaward(50);
                            facebookgo = false;
                            GoodlegO = false;
                            instago = false;
                            twittergo = false;


                            editor.putBoolean("twittergo", twittergo);
                            editor.putBoolean("instago", instago);
                            editor.putBoolean("GoodlegO", GoodlegO);
                            editor.putBoolean("facebookgo", facebookgo);
                            editor.commit();
                        }

                        else {

                            pluscoinaward(20);
                            // pluscoinlayout2.setAnimation(shake);
                            videogo = false;
                        }





                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        coikokbutton3.setAlpha(1);


                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });


        coikokbutton2.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        coikokbutton2.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:
                        if(!mutestate[0])
                            soundPool.play(soundID, volume, volume, 1, 0, 1f);
                        pluscoinlayout.setVisibility(View.INVISIBLE);

                        final Animation shake = AnimationUtils.loadAnimation(x, R.anim.righttoleft);
                        disableallchild.setVisibility(View.INVISIBLE);
                        shake.setDuration(SLIDEANIMDUR);
                        coinbackpressflag = true;
                        coinflip();


                        if (!mutestate[0]) soundPool6.play(soundID6, volume, volume, 1, 0, 1f);


                        textcoin.setVisibility(View.VISIBLE);
                        ValueAnimator animator = new ValueAnimator();
                        animator.setObjectValues(coin[0]-10, coin[0]);
                        animator.setDuration(500);
                        animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {
                            public void onAnimationUpdate(ValueAnimator animation) {
                                textcoin.setText("" + (int) animation.getAnimatedValue());


                            }

                        });
                        animator.start();



                        pluscoinlayout();




                        pluscoinlayout.setAnimation(shake);
                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        coikokbutton2.setAlpha(1f);


                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });


        coikokbutton.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        coikokbutton.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:
                        if(!mutestate[0])
                            soundPool.play(soundID, volume, volume, 1, 0, 1f);
                        final Animation shake = AnimationUtils.loadAnimation(x, R.anim.righttoleft);
                        disableallchild.setVisibility(View.INVISIBLE);
                        shake.setDuration(SLIDEANIMDUR);
                        coinwinlayout();
                        coinwinlayout.setAnimation(shake);
                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        coikokbutton.setAlpha(1f);

                        coinbackpressflag = true;
                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });

      final  Button soupbuybutton = (Button) findViewById(R.id.soupbuybutton);
        soupbuybutton.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        soupbuybutton.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:



                        if (coin[0] - 15 < 0) {

                            
                            coinok = false;
                            vibrate(100);

                        } else {

                            coin[0] = coin[0] - 15;
                            coinok = true;
                            marketarray[soupindex] = marketarray[soupindex] + 1;
                            if (marketarray[soupindex] <= 0) removefood(soupindex);
                            if (marketarray[soupindex] == 1) addfood(soupindex);

                            if (!mutestate[0]) soundPool6.play(soundID6, volume, volume, 1, 0, 1f);
                            tcoin.setText(Integer.toString(coin[0]));
                            printfood(soupindex);
                        }
                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        soupbuybutton.setAlpha(1f);


                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });


        squidbutton.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        squidbutton.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:



                        if (coin[0] - 60 < 0) {

                            
                            coinok = false;
                            vibrate(100);

                        } else {
                            coin[0] = coin[0] - 60;
                            coinok = true;
                            marketarray[squidindex] = marketarray[squidindex] + 1;
                            if (marketarray[squidindex] <= 0) removefood(squidindex);
                            if (marketarray[squidindex] == 1) addfood(squidindex);
                            if (!mutestate[0]) soundPool6.play(soundID6, volume, volume, 1, 0, 1f);

                            tcoin.setText(Integer.toString(coin[0]));
                            printfood(squidindex);
                        }
                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        squidbutton.setAlpha(1f);


                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });

        cokebutton.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        cokebutton.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:



                        if (coin[0]  - 18 < 0) {
                            vibrate(100);

                            
                            coinok = false;

                        } else {
                            coinok = true;
                            coin[0] = coin[0] - 18;
                            marketarray[cokeindex] = marketarray[cokeindex] + 1;
                            if (marketarray[cokeindex] <= 0) removefood(cokeindex);
                            if (marketarray[cokeindex] == 1) addfood(cokeindex);

                            if (!mutestate[0]) soundPool6.play(soundID6, volume, volume, 1, 0, 1f);
                            tcoin.setText(Integer.toString(coin[0]));
                            printfood(cokeindex);
                        }
                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        cokebutton.setAlpha(1f);


                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });


        browniebutton.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        browniebutton.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:



                        if (coin[0] - 8 < 0) {

                            
                            coinok = false;
                            vibrate(100);

                        } else {

                            coin[0] = coin[0] - 8;
                            coinok = true;
                            marketarray[brownieindex] = marketarray[brownieindex] + 1;
                            if (marketarray[brownieindex] <= 0) removefood(brownieindex);
                            if (marketarray[brownieindex] == 1) addfood(brownieindex);

                            if (!mutestate[0]) soundPool6.play(soundID6, volume, volume, 1, 0, 1f);
                            tcoin.setText(Integer.toString(coin[0]));
                            printfood(brownieindex);
                        }
                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        browniebutton.setAlpha(1f);


                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });


        cheesecakebutton.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        cheesecakebutton.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:




                        if (coin[0] - 10 < 0) {

                            
                            coinok = false;
                            vibrate(100);

                        } else {
                            coinok = true;coin[0] = coin[0] - 10;
                            marketarray[cheesecakeindex] = marketarray[cheesecakeindex] + 1;
                            if (marketarray[cheesecakeindex] <= 0) removefood(cheesecakeindex);
                            if (marketarray[cheesecakeindex] == 1) addfood(cheesecakeindex);

                            if (!mutestate[0]) soundPool6.play(soundID6, volume, volume, 1, 0, 1f);
                            tcoin.setText(Integer.toString(coin[0]));
                            printfood(cheesecakeindex);
                        }
                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        cheesecakebutton.setAlpha(1f);


                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });

        cheesebutton.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        cheesebutton.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:




                        if (coin[0] - 10< 0) {

                            
                            coinok = false;
                            vibrate(100);

                        } else {
                            coin[0] = coin[0] - 10;
                            coinok = true;
                            marketarray[cheeseindex] = marketarray[cheeseindex] + 1;
                            if (marketarray[cheeseindex] <= 0) removefood(cheeseindex);
                            if (marketarray[cheeseindex] == 1) addfood(cheeseindex);

                            if (!mutestate[0]) soundPool6.play(soundID6, volume, volume, 1, 0, 1f);
                            tcoin.setText(Integer.toString(coin[0]));
                            printfood(cheeseindex);
                        }
                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        cheesebutton.setAlpha(1f);


                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });

        juicebutton.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        juicebutton.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:



                        if (coin[0] - 12< 0) {

                            
                            coinok = false;
                            vibrate(100);

                        } else {
                            coinok = true;coin[0] = coin[0] - 12;
                            marketarray[juiceindex] = marketarray[juiceindex] + 1;
                            if (marketarray[juiceindex] <= 0) removefood(juiceindex);
                            if (marketarray[juiceindex] == 1) addfood(juiceindex);

                            if (!mutestate[0]) soundPool6.play(soundID6, volume, volume, 1, 0, 1f);
                            tcoin.setText(Integer.toString(coin[0]));
                            printfood(juiceindex);
                        }
                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        juicebutton.setAlpha(1f);


                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });


        cellspongebutton.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        cellspongebutton.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:



                        if (coin[0]- 10 < 0) {


                            coinok = false;
                            vibrate(100);

                        } else {
                            coinok = true; coin[0] = coin[0] - 10;
                            marketarray[cellspongeindex] = marketarray[cellspongeindex] + 1;
                            if (marketarray[cellspongeindex] <= 0) removefood(cellspongeindex);
                            if (marketarray[cellspongeindex] == 1) addfood(cellspongeindex);

                            if (!mutestate[0]) soundPool6.play(soundID6, volume, volume, 1, 0, 1f);
                            tcoin.setText(Integer.toString(coin[0]));
                            printfood(cellspongeindex);
                        }
                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        cellspongebutton.setAlpha(1f);


                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });


        darkspongebutton.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        darkspongebutton.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:



                        if (coin[0]- 10 < 0) {


                            coinok = false;
                            vibrate(100);

                        } else {coin[0] = coin[0] - 10;
                            coinok = true;
                            marketarray[darkspongeindex] = marketarray[darkspongeindex] + 1;
                            if (marketarray[darkspongeindex] <= 0) removefood(darkspongeindex);
                            if (marketarray[darkspongeindex] == 1) addfood(darkspongeindex);
                            if (!mutestate[0]) soundPool6.play(soundID6, volume, volume, 1, 0, 1f);

                            tcoin.setText(Integer.toString(coin[0]));
                            printfood(darkspongeindex);
                        }
                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        darkspongebutton.setAlpha(1f);


                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });


        seaspongebutton.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        seaspongebutton.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:



                        if (coin[0] - 10 < 0) {


                            coinok = false;
                            vibrate(100);

                        } else {
                            coinok = true; coin[0] = coin[0] - 10;
                            marketarray[seaspongeindex] = marketarray[seaspongeindex] + 1;
                            if (marketarray[seaspongeindex] <= 0) removefood(seaspongeindex);
                            if (marketarray[seaspongeindex] == 1) addfood(seaspongeindex);

                            if (!mutestate[0]) soundPool6.play(soundID6, volume, volume, 1, 0, 1f);
                            tcoin.setText(Integer.toString(coin[0]));
                            printfood(seaspongeindex);
                        }
                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        seaspongebutton.setAlpha(1f);


                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });


        sleeppotionbutton.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        sleeppotionbutton.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:



                        if (coin[0]- 125 < 0) {

                            
                            coinok = false;
                            vibrate(100);

                        } else {
                            coinok = true;coin[0] = coin[0] - 125;
                            marketarray[sleeppotionindex] = marketarray[sleeppotionindex] + 1;
                            if (marketarray[sleeppotionindex] <= 0) removefood(sleeppotionindex);
                            if (marketarray[sleeppotionindex] == 1) addfood(sleeppotionindex);

                            if (!mutestate[0]) soundPool6.play(soundID6, volume, volume, 1, 0, 1f);
                            tcoin.setText(Integer.toString(coin[0]));
                            printfood(sleeppotionindex);
                        }
                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        sleeppotionbutton.setAlpha(1f);


                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });


        hungerpotionbutton.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        hungerpotionbutton.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:



                        if (coin[0] - 100 < 0) {

                            
                            coinok = false;
                            vibrate(100);

                        } else {
                            coinok = true;coin[0] = coin[0] - 100;
                            marketarray[hungerpotionindex] = marketarray[hungerpotionindex] + 1;
                            if (marketarray[hungerpotionindex] <= 0) removefood(hungerpotionindex);
                            if (marketarray[hungerpotionindex] == 1) addfood(hungerpotionindex);
                            if (!mutestate[0]) soundPool6.play(soundID6, volume, volume, 1, 0, 1f);

                            tcoin.setText(Integer.toString(coin[0]));
                            printfood(hungerpotionindex);
                        }
                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        hungerpotionbutton.setAlpha(1f);


                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });


        hygienpotionbutton.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        hygienpotionbutton.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:



                        if (coin[0] - 50 < 0) {

                            
                            coinok = false;
                            vibrate(100);

                        } else {
                            coinok = true;coin[0] = coin[0] - 50;
                            marketarray[hygienepotionindex] = marketarray[hygienepotionindex] + 1;
                            if (marketarray[hygienepotionindex] <= 0)
                                removefood(hygienepotionindex);
                            if (marketarray[hygienepotionindex] == 1) addfood(hygienepotionindex);
                            if (!mutestate[0]) soundPool6.play(soundID6, volume, volume, 1, 0, 1f);

                            tcoin.setText(Integer.toString(coin[0]));
                            printfood(hygienepotionindex);
                        }
                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        hygienpotionbutton.setAlpha(1f);


                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });


        lovepotionbutton.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        lovepotionbutton.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:



                        if (coin[0] - 75< 0) {

                            
                            coinok = false;
                            vibrate(100);

                        } else {
                            coinok = true;coin[0] = coin[0] - 75;
                            marketarray[lovepotionindex] = marketarray[lovepotionindex] + 1;
                            if (marketarray[lovepotionindex] <= 0) removefood(lovepotionindex);
                            if (marketarray[lovepotionindex] == 1) addfood(lovepotionindex);

                            if (!mutestate[0]) soundPool6.play(soundID6, volume, volume, 1, 0, 1f);
                            tcoin.setText(Integer.toString(coin[0]));
                            printfood(lovepotionindex);
                        }
                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        lovepotionbutton.setAlpha(1f);


                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });

        gamepotionbutton.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        gamepotionbutton.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:



                        if (coin[0]  - 150< 0) {

                            
                            coinok = false;
                            vibrate(100);

                        } else {
                            coinok = true; coin[0] = coin[0] - 150;
                            marketarray[gamepotionindex] = marketarray[gamepotionindex] + 1;
                            if (marketarray[gamepotionindex] <= 0) removefood(gamepotionindex);
                            if (marketarray[gamepotionindex] == 1) addfood(gamepotionindex);
                            if (!mutestate[0]) soundPool6.play(soundID6, volume, volume, 1, 0, 1f);

                            tcoin.setText(Integer.toString(coin[0]));
                            printfood(gamepotionindex);
                        }
                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        gamepotionbutton.setAlpha(1f);


                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });


        allinpotionbutton.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        allinpotionbutton.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:



                        if (coin[0] - 200< 0) {

                            
                            coinok = false;
                            vibrate(100);

                        } else {
                            coinok = true; coin[0] = coin[0] - 200;
                            marketarray[allinpotionindex] = marketarray[allinpotionindex] + 1;
                            if (marketarray[allinpotionindex] <= 0) removefood(allinpotionindex);
                            if (marketarray[allinpotionindex] == 1) addfood(allinpotionindex);

                            if (!mutestate[0]) soundPool6.play(soundID6, volume, volume, 1, 0, 1f);
                            tcoin.setText(Integer.toString(coin[0]));
                            printfood(allinpotionindex);
                        }
                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        allinpotionbutton.setAlpha(1f);


                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });



        soap1button.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        soap1button.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:



                        if (coin[0] - 10 < 0) {


                            coinok = false;
                            vibrate(100);

                        } else {
                            coinok = true; coin[0] = coin[0] - 10;
                            marketarray[soap1index] = marketarray[soap1index] + 1;
                            if (marketarray[soap1index] <= 0) removefood(soap1index);
                            if (marketarray[soap1index] == 1) addfood(soap1index);

                            if (!mutestate[0]) soundPool6.play(soundID6, volume, volume, 1, 0, 1f);
                            tcoin.setText(Integer.toString(coin[0]));
                            printfood(soap1index);
                        }
                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        soap1button.setAlpha(1f);


                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });

        soap2button.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        soap2button.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:



                        if (coin[0] - 10< 0) {


                            coinok = false;
                            vibrate(100);

                        } else {
                            coinok = true;coin[0] = coin[0] - 10;
                            marketarray[soap2index] = marketarray[soap2index] + 1;
                            if (marketarray[soap2index] <= 0) removefood(soap2index);
                            if (marketarray[soap2index] == 1) addfood(soap2index);

                            if (!mutestate[0]) soundPool6.play(soundID6, volume, volume, 1, 0, 1f);
                            tcoin.setText(Integer.toString(coin[0]));
                            printfood(soap2index);
                        }
                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        soap2button.setAlpha(1f);


                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });


        greensoapbutton.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        greensoapbutton.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:



                        if (coin[0] - 10< 0) {


                            coinok = false;
                            vibrate(100);

                        } else {
                            coinok = true; coin[0] = coin[0] - 10;
                            marketarray[greensoapindex] = marketarray[greensoapindex] + 1;
                            if (marketarray[greensoapindex] <= 0) removefood(greensoapindex);
                            if (marketarray[greensoapindex] == 1) addfood(greensoapindex);

                            if (!mutestate[0]) soundPool6.play(soundID6, volume, volume, 1, 0, 1f);
                            tcoin.setText(Integer.toString(coin[0]));
                            printfood(greensoapindex);
                        }
                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        greensoapbutton.setAlpha(1f);


                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });


        watermelonbutton.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        watermelonbutton.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:



                        if (coin[0] - 18 < 0) {

                            
                            coinok = false;
                            vibrate(100);

                        } else {
                            coinok = true; coin[0] = coin[0] - 18;
                            marketarray[watermelonindex] = marketarray[watermelonindex] + 1;
                            if (marketarray[watermelonindex] <= 0) removefood(watermelonindex);
                            if (marketarray[watermelonindex] == 1) addfood(watermelonindex);

                            if (!mutestate[0]) soundPool6.play(soundID6, volume, volume, 1, 0, 1f);
                            tcoin.setText(Integer.toString(coin[0]));
                            printfood(watermelonindex);
                        }
                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        watermelonbutton.setAlpha(1f);


                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });

        tomatobutton.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        tomatobutton.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:



                        if (coin[0] - 8 < 0) {

                            
                            coinok = false;
                            vibrate(100);

                        } else {
                            coinok = true; coin[0] = coin[0] - 8;
                            marketarray[tomatoindex] = marketarray[tomatoindex] + 1;
                            if (marketarray[tomatoindex] <= 0) removefood(tomatoindex);
                            if (marketarray[tomatoindex] == 1) addfood(tomatoindex);
                            if (!mutestate[0]) soundPool6.play(soundID6, volume, volume, 1, 0, 1f);
                            tcoin.setText(Integer.toString(coin[0]));
                            printfood(tomatoindex);
                        }
                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        tomatobutton.setAlpha(1f);


                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });


        pumpkinbutton.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        pumpkinbutton.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:



                        if (coin[0] - 26 < 0) {

                            
                            coinok = false;
                            vibrate(100);

                        } else {
                            coinok = true;coin[0] = coin[0] - 26;
                            marketarray[pumpkinindex] = marketarray[pumpkinindex] + 1;
                            if (marketarray[pumpkinindex] <= 0) removefood(pumpkinindex);
                            if (marketarray[pumpkinindex] == 1) addfood(pumpkinindex);

                            if (!mutestate[0]) soundPool6.play(soundID6, volume, volume, 1, 0, 1f);
                            tcoin.setText(Integer.toString(coin[0]));
                            printfood(pumpkinindex);
                        }
                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        pumpkinbutton.setAlpha(1f);


                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });

        peesbutton.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        peesbutton.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:



                        if (coin[0] - 10< 0) {

                            
                            coinok = false;
                            vibrate(100);

                        } else {
                            coinok = true;coin[0] = coin[0] - 10;
                            marketarray[peesindex] = marketarray[peesindex] + 1;
                            if (marketarray[peesindex] <= 0) removefood(peesindex);
                            if (marketarray[peesindex] == 1) addfood(peesindex);

                            if (!mutestate[0]) soundPool6.play(soundID6, volume, volume, 1, 0, 1f);
                            tcoin.setText(Integer.toString(coin[0]));
                            printfood(peesindex);
                        }
                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        peesbutton.setAlpha(1f);


                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });

        kiwibutton.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        kiwibutton.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:



                        if (coin[0] - 23< 0) {

                            
                            coinok = false;
                            vibrate(100);

                        } else {
                            coinok = true; coin[0] = coin[0] - 23;
                            marketarray[kiwiindex] = marketarray[kiwiindex] + 1;
                            if (marketarray[kiwiindex] <= 0) removefood(kiwiindex);
                            if (marketarray[kiwiindex] == 1) addfood(kiwiindex);

                            if (!mutestate[0]) soundPool6.play(soundID6, volume, volume, 1, 0, 1f);
                            tcoin.setText(Integer.toString(coin[0]));
                            printfood(kiwiindex);
                        }
                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        kiwibutton.setAlpha(1f);


                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });

        hotdogbutton.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        hotdogbutton.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:



                        if (coin[0]- 18 < 0) {

                            
                            coinok = false;
                            vibrate(100);

                        } else {
                            coinok = true;coin[0] = coin[0] - 18;
                            marketarray[hotdogindex] = marketarray[hotdogindex] + 1;
                            if (marketarray[hotdogindex] <= 0) removefood(hotdogindex);
                            if (marketarray[hotdogindex] == 1) addfood(hotdogindex);
                            if (!mutestate[0]) soundPool6.play(soundID6, volume, volume, 1, 0, 1f);
                            tcoin.setText(Integer.toString(coin[0]));
                            printfood(hotdogindex);
                        }
                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        hotdogbutton.setAlpha(1f);


                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });

        cornbutton.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        cornbutton.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:



                        if (coin[0] - 12 < 0) {

                            
                            coinok = false;
                            vibrate(100);

                        } else {
                            coinok = true; coin[0] = coin[0] - 12;
                            marketarray[cornindex] = marketarray[cornindex] + 1;
                            if (marketarray[cornindex] <= 0) removefood(cornindex);
                            if (marketarray[cornindex] == 1) addfood(cornindex);

                            if (!mutestate[0]) soundPool6.play(soundID6, volume, volume, 1, 0, 1f);
                            tcoin.setText(Integer.toString(coin[0]));
                            printfood(cornindex);
                        }
                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        cornbutton.setAlpha(1f);


                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });

        chilisbutton.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        chilisbutton.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:



                        if (coin[0]- 20 < 0) {

                            
                            coinok = false;
                            vibrate(100);

                        } else {
                            coinok = true;coin[0] = coin[0] - 20;
                            marketarray[chilisindex] = marketarray[chilisindex] + 1;
                            if (marketarray[chilisindex] <= 0) removefood(chilisindex);
                            if (marketarray[chilisindex] == 1) addfood(chilisindex);

                            if (!mutestate[0]) soundPool6.play(soundID6, volume, volume, 1, 0, 1f);
                            tcoin.setText(Integer.toString(coin[0]));
                            printfood(chilisindex);
                        }
                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        chilisbutton.setAlpha(1f);


                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });

        broccolibutton.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        broccolibutton.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:



                        if (coin[0]- 24 < 0) {

                            
                            coinok = false;
                            vibrate(100);

                        } else {
                            coinok = true;coin[0] = coin[0] - 24;
                            marketarray[broccoliindex] = marketarray[broccoliindex] + 1;
                            if (marketarray[broccoliindex] <= 0) removefood(broccoliindex);
                            if (marketarray[broccoliindex] == 1) addfood(broccoliindex);

                            if (!mutestate[0]) soundPool6.play(soundID6, volume, volume, 1, 0, 1f);
                            tcoin.setText(Integer.toString(coin[0]));
                            printfood(broccoliindex);
                        }
                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        broccolibutton.setAlpha(1f);


                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });

        bananabutton.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        bananabutton.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:



                        if (coin[0]- 27 < 0) {

                            
                            coinok = false;
                            vibrate(100);

                        } else {
                            coinok = true;coin[0] = coin[0] - 27;
                            marketarray[bananaindex] = marketarray[bananaindex] + 1;
                            if (marketarray[bananaindex] <= 0) removefood(bananaindex);
                            if (marketarray[bananaindex] == 1) addfood(bananaindex);

                            if (!mutestate[0]) soundPool6.play(soundID6, volume, volume, 1, 0, 1f);
                            tcoin.setText(Integer.toString(coin[0]));
                            printfood(bananaindex);
                        }
                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        bananabutton.setAlpha(1f);


                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });

        siskebapbutton.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        siskebapbutton.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:



                        if (coin[0] - 20< 0) {

                            
                            coinok = false;
                            vibrate(100);

                        } else {
                            coinok = true;coin[0] = coin[0] - 20;
                            marketarray[siskebapindex] = marketarray[siskebapindex] + 1;
                            if (marketarray[siskebapindex] <= 0) removefood(siskebapindex);
                            if (marketarray[siskebapindex] == 1) addfood(siskebapindex);

                            if (!mutestate[0]) soundPool6.play(soundID6, volume, volume, 1, 0, 1f);
                            tcoin.setText(Integer.toString(coin[0]));
                            printfood(siskebapindex);
                        }
                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        siskebapbutton.setAlpha(1f);


                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });

        regional1button.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        regional1button.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:



                        if (coin[0] - 24< 0) {

                            
                            coinok = false;
                            vibrate(100);

                        } else {
                            coinok = true;coin[0] = coin[0] - 24;
                            marketarray[regional1index] = marketarray[regional1index] + 1;
                            if (marketarray[regional1index] <= 0) removefood(regional1index);
                            if (marketarray[regional1index] == 1) addfood(regional1index);

                            if (!mutestate[0]) soundPool6.play(soundID6, volume, volume, 1, 0, 1f);
                            tcoin.setText(Integer.toString(coin[0]));
                            printfood(regional1index);
                        }
                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        regional1button.setAlpha(1f);


                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });


        regional2button.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        regional2button.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:



                        if (coin[0] - 27 < 0) {

                            
                            coinok = false;
                            vibrate(100);

                        } else {
                            coinok = true; coin[0] = coin[0] - 27;
                            marketarray[regional2index] = marketarray[regional2index] + 1;
                            if (marketarray[regional2index] <= 0) removefood(regional2index);
                            if (marketarray[regional2index] == 1) addfood(regional2index);

                            if (!mutestate[0]) soundPool6.play(soundID6, volume, volume, 1, 0, 1f);
                            tcoin.setText(Integer.toString(coin[0]));
                            printfood(regional2index);
                        }
                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        regional2button.setAlpha(1f);


                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });

        regional3button.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        regional3button.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:



                        if (coin[0] - 18 < 0) {

                            
                            coinok = false;
                            vibrate(100);

                        } else {
                            coinok = true;coin[0] = coin[0] - 18;
                            marketarray[regional3index] = marketarray[regional3index] + 1;
                            if (marketarray[regional3index] <= 0) removefood(regional3index);
                            if (marketarray[regional3index] == 1) addfood(regional3index);

                            if (!mutestate[0]) soundPool6.play(soundID6, volume, volume, 1, 0, 1f);
                            tcoin.setText(Integer.toString(coin[0]));
                            printfood(regional3index);
                        }
                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        regional3button.setAlpha(1f);


                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });

        regional4button.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        regional4button.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:



                        if (coin[0] - 30 < 0) {

                            
                            coinok = false;
                            vibrate(100);

                        } else {
                            coinok = true;coin[0] = coin[0] - 30;
                            marketarray[regional4index] = marketarray[regional4index] + 1;
                            if (marketarray[regional4index] <= 0) removefood(regional4index);
                            if (marketarray[regional4index] == 1) addfood(regional4index);
                            if (!mutestate[0]) soundPool6.play(soundID6, volume, volume, 1, 0, 1f);
                            tcoin.setText(Integer.toString(coin[0]));
                            printfood(regional4index);
                        }
                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        regional4button.setAlpha(1f);


                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });

        regional5button.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        regional5button.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:



                        if (coin[0] - 60 < 0) {

                            
                            coinok = false;
                            vibrate(100);

                        } else {
                            coinok = true;coin[0] = coin[0] - 60;
                            marketarray[regional5index] = marketarray[regional5index] + 1;
                            if (marketarray[regional5index] <= 0) removefood(regional5index);
                            if (marketarray[regional5index] == 1) addfood(regional5index);

                            if (!mutestate[0]) soundPool6.play(soundID6, volume, volume, 1, 0, 1f);
                            tcoin.setText(Integer.toString(coin[0]));
                            printfood(regional5index);
                        }
                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        regional5button.setAlpha(1f);


                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });


        final RelativeLayout instalayout = (RelativeLayout) findViewById(R.id.coinlayoutinsta);
        final Button instalayout1 = (Button) findViewById(R.id.imagedesert521);
        final Button instalayout2 = (Button) findViewById(R.id.instabutton);

        final RelativeLayout instalayout11 = (RelativeLayout) findViewById(R.id.instarel);


        final RelativeLayout twitlayout = (RelativeLayout) findViewById(R.id.coinlayouttwit);
        final Button twitlayout1 = (Button) findViewById(R.id.imagedesert5221);
        final Button twitlayout2 = (Button) findViewById(R.id.twitterbutton);

        final RelativeLayout twitlayout11 = (RelativeLayout) findViewById(R.id.twitrel);







        final RelativeLayout googlelayout = (RelativeLayout) findViewById(R.id.coinlayoutfacrel2);
        final Button googlelayout1 = (Button) findViewById(R.id.imagedesert522);
        final Button googlelayout2 = (Button) findViewById(R.id.facebutton22);

        final RelativeLayout googlelayout11 = (RelativeLayout) findViewById(R.id.facerel2);

        final RelativeLayout unlcokiqlayout = (RelativeLayout) findViewById(R.id.unlockiq);
        final Button unlcokiqimage = (Button) findViewById(R.id.imageunlockiq);
        final Button unlockiqbutton = (Button) findViewById(R.id.unlockiqbutton);
        final RelativeLayout unlockiqlayout2 = (RelativeLayout) findViewById(R.id.unlockiq2);

        final RelativeLayout mult2layout = (RelativeLayout) findViewById(R.id.mult2);
        final Button mult2image = (Button) findViewById(R.id.imagemult2);
        final Button mult2button = (Button) findViewById(R.id.mult2button);
        final RelativeLayout mult2layout2 = (RelativeLayout) findViewById(R.id.mult22);


        final RelativeLayout videolayout = (RelativeLayout) findViewById(R.id.coinlayoutcoinvideo);
        final Button coinvideo = (Button) findViewById(R.id.coinvideoimg);
        final Button coinvideo2 = (Button) findViewById(R.id.coinvideobutton);
        final RelativeLayout coinvideolayout = (RelativeLayout) findViewById(R.id.coinvideorel);

        final RelativeLayout facelayout = (RelativeLayout) findViewById(R.id.coinlayoutfacrel);
        final Button facelayout1 = (Button) findViewById(R.id.imagedesert52);
        final Button facelayout12 = (Button) findViewById(R.id.facebutton);

        final RelativeLayout facelayout11 = (RelativeLayout) findViewById(R.id.facerel);

        coin2img.setSoundEffectsEnabled(false);

        coin2img.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                coin[0] = coin[0] + 1000;


                final MediaPlayer clickaudio = MediaPlayer.create(getApplicationContext(), R.raw.coinabove10);
                if(!mutestate[0]) {
                    clickaudio.start();
                    clickaudio.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                        public void onCompletion(MediaPlayer mp) {
                            clickaudio.release();

                        }

                        ;
                    });
                }
                coinflip();
                tcoin.setText(Integer.toString(coin[0]));
            }
        });


        final RelativeLayout coin500 = (RelativeLayout) findViewById(R.id.coin500rel);


        final RelativeLayout coin500layout = (RelativeLayout) findViewById(R.id.coinlayoutcoin500);
        final Button coin500l1 = (Button) findViewById(R.id.coin500img);
        final Button coin500l2 = (Button) findViewById(R.id.coin500button);


        final RelativeLayout plusgame = (RelativeLayout) findViewById(R.id.plusgamerel);


        final RelativeLayout plusgamelayout = (RelativeLayout) findViewById(R.id.coinlayoutplus5game);
        final Button plusgamel1 = (Button) findViewById(R.id.plusgameimg);
        final Button plusgamel2 = (Button) findViewById(R.id.plusgamebutton);

        final boolean isAvailable = BillingProcessor.isIabServiceAvailable(this);

        final Button questionplus5game = (Button) findViewById(R.id.questionplus5);
        final Button questionplus5game2 = (Button) findViewById(R.id.questionplus52);
        final Button questionunlockiq = (Button) findViewById(R.id.questionunlock );
        final Button questionunlockiq2 = (Button) findViewById(R.id.questionunlock2);

        final Button questionmult2 = (Button) findViewById(R.id.questionmult2 );
        final Button questionmult22 = (Button) findViewById(R.id.questionmult22);

        final Button questionnodd2 = (Button) findViewById(R.id.questionnoadd2);
        final Button questionnodd = (Button) findViewById(R.id.questionnoadd);
        final TextView textquestion = (TextView) findViewById(R.id.textView872);


        final RelativeLayout iquplevel = (RelativeLayout) findViewById(R.id.warningbox2);
        final Button questionunlock = (Button) findViewById(R.id.questionunlock);
        final Button questionunlock2 = (Button) findViewById(R.id.questionunlock2);


        final Button questionnmult2 = (Button) findViewById(R.id.questionmult2);
        final Button questionnmult22 = (Button) findViewById(R.id.questionmult22);






      /*  final Button coin100text = (Button) findViewById(R.id.coin100button);


        SkuDetails skun = bp.getPurchaseListingDetails("android.test.purchased");


        coin100text.setText(Double.toString(skun.priceValue));*/


        final RelativeLayout warningquestion = (RelativeLayout) findViewById(R.id.warningbox2);
        questionplus5game.setVisibility(View.VISIBLE);
        questionplus5game.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        questionplus5game.setScaleX(BSCALE);
                        questionplus5game.setScaleY(BSCALE);
                        questionplus5game.setAlpha(BALPHA);
                        disableallchild.setVisibility(View.VISIBLE);
                        questionplus5game.setVisibility(View.INVISIBLE);
                        questionplus5game2.setVisibility(View.VISIBLE);
                        warningquestion.setVisibility(View.VISIBLE);
                        final Animation shake = AnimationUtils.loadAnimation(x, R.anim.lefttoright);
                        coinbackpressflag = false;
                        shake.setDuration(SLIDEANIMDUR);
                        warningquestion.setAnimation(shake);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:

                        questionplus5game.setEnabled(false);
                        questionnodd.setEnabled(false);
                        questionunlockiq.setEnabled(false);
                        questionmult2 .setEnabled(false);


                        final MediaPlayer clickaudio2 = MediaPlayer.create(getApplicationContext(), R.raw.popupsound);
                        if(!mutestate[0]) {
                            clickaudio2.start();
                            clickaudio2.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                                public void onCompletion(MediaPlayer mp) {
                                    clickaudio2.release();

                                }

                                ;
                            });
                        }

                        if (gamelang == ENGLISH)  textquestion.setText("Maximum right to play for all games will be 5.");
                        else if (gamelang == TURKISH)  textquestion.setText("Tüm oyunlar için oynama hakkı maksimum 5 olacaktır.");
                        else if (gamelang == FRENCH)  textquestion.setText("Le droit maximum de jouer pour tous les jeux sera de 5.");
                        else if (gamelang == SPANISH) textquestion.setText("Máximo derecho a jugar para todos los juegos será de 5.");
                        else if (gamelang == RUSSIAN) textquestion.setText("Максимальное право играть на все игры будут 5.");
                        else if (gamelang == CHINESE) textquestion.setText("所有游戏的最大游戏权限为5");
                        else if (gamelang == JAPANESE) textquestion.setText("すべてのゲームの最大プレー権は5");
                        else if (gamelang == PORTUGUESE) textquestion.setText("O máximo direito de jogar para todos os jogos será de 5.");
                        else   textquestion.setText("Maximum right to play for all games will be 5.");

                        new CountDownTimer(3000, 100) {
                            public void onTick(long milsec) {


                            }

                            public void onFinish() {

                                questionplus5game.setVisibility(View.VISIBLE);
                                questionplus5game2.setVisibility(View.INVISIBLE);

                                questionnodd.setVisibility(View.VISIBLE);
                                questionnodd2.setVisibility(View.INVISIBLE);

                                questionunlock2.setVisibility(View.INVISIBLE);
                                questionunlock.setVisibility(View.VISIBLE);

                                disableallchild.setVisibility(View.INVISIBLE);
                                questionnmult2.setVisibility(View.VISIBLE);
                                questionnmult22.setVisibility(View.INVISIBLE);

                                questionplus5game.setEnabled(true);
                                questionnodd.setEnabled(true);
                                questionunlock.setEnabled(true);
                                questionnmult2 .setEnabled(true);
                            }
                        }.start();


                        questionplus5game.setScaleX(1f);
                        questionplus5game.setScaleY(1f);
                        questionplus5game.setAlpha(1f);

                        break;
                    case MotionEvent.ACTION_CANCEL: {
                        break;
                    }
                }
                return true;
            }
        });


        questionunlockiq2.setVisibility(View.INVISIBLE);
        questionunlockiq.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        questionunlockiq.setScaleX(BSCALE);
                        questionunlockiq.setScaleY(BSCALE);
                        questionunlockiq.setAlpha(BALPHA);
                        v.invalidate();
                        disableallchild.setVisibility(View.VISIBLE);
                        questionunlockiq.setVisibility(View.INVISIBLE);
                        questionunlockiq2.setVisibility(View.VISIBLE);
                        final Animation shake = AnimationUtils.loadAnimation(x, R.anim.lefttoright);
                        coinbackpressflag = false;
                        // questionunlockiq.setEnabled(false);
                        shake.setDuration(SLIDEANIMDUR);
                        warningquestion.setAnimation(shake);
                        break;
                    }
                    case MotionEvent.ACTION_UP:
                        questionplus5game.setEnabled(false);
                        questionnodd.setEnabled(false);
                        questionunlockiq.setEnabled(false);
                        questionmult2 .setEnabled(false);
                        warningquestion.setVisibility(View.VISIBLE);

                        final MediaPlayer clickaudio2 = MediaPlayer.create(getApplicationContext(), R.raw.popupsound);
                        if(!mutestate[0]) {
                            clickaudio2.start();
                            clickaudio2.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                                public void onCompletion(MediaPlayer mp) {
                                    clickaudio2.release();

                                }

                                ;
                            });
                        }

                        if (gamelang == ENGLISH)  textquestion.setText("All items in the market will be unlocked.");
                        else if (gamelang == TURKISH)  textquestion.setText("Tüm ürünlerin kilidi açılacaktır.");
                        else if (gamelang == FRENCH)  textquestion.setText("Tous les éléments seront déverrouillés.");
                        else if (gamelang == SPANISH) textquestion.setText("Todos los artículos en el mercado serán desbloqueados.");
                        else if (gamelang == RUSSIAN) textquestion.setText("Все детали на рынке будут разблокированы.");
                        else if (gamelang == CHINESE) textquestion.setText("市场上的所有项目将被解锁");
                        else if (gamelang == JAPANESE) textquestion.setText("市場のすべてのアイテムはロックされません");
                        else if (gamelang == PORTUGUESE) textquestion.setText("Todos os itens no mercado serão desbloqueados.");
                        else   textquestion.setText("All items in the market will be unlocked.");


                        new CountDownTimer(3000, 100) {
                            public void onTick(long milsec) {


                            }

                            public void onFinish() {

                                questionplus5game.setVisibility(View.VISIBLE);
                                questionplus5game2.setVisibility(View.INVISIBLE);
                                disableallchild.setVisibility(View.INVISIBLE);
                                questionnodd.setVisibility(View.VISIBLE);
                                questionnodd2.setVisibility(View.INVISIBLE);

                                questionunlock2.setVisibility(View.INVISIBLE);
                                questionunlock.setVisibility(View.VISIBLE);


                                questionnmult2.setVisibility(View.VISIBLE);
                                questionnmult22.setVisibility(View.INVISIBLE);

                                questionplus5game.setEnabled(true);
                                questionnodd.setEnabled(true);
                                questionunlock.setEnabled(true);
                                questionnmult2 .setEnabled(true);
                            }
                        }.start();

                        questionunlockiq.setScaleX(1f);
                        questionunlockiq.setScaleY(1f);
                        questionunlockiq.setAlpha(1f);

                        break;
                    case MotionEvent.ACTION_CANCEL: {
                        break;
                    }
                }
                return true;
            }
        });
        questionnodd2.setVisibility(View.INVISIBLE);

        questionnodd.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        questionnodd.setScaleX(BSCALE);
                        questionnodd.setScaleY(BSCALE);
                        questionnodd.setAlpha(BALPHA);
                        v.invalidate();

                        disableallchild.setVisibility(View.VISIBLE);
                        questionnodd.setVisibility(View.INVISIBLE);
                        questionnodd2.setVisibility(View.VISIBLE);
                        warningquestion.setVisibility(View.VISIBLE);
                        final Animation shake = AnimationUtils.loadAnimation(x, R.anim.lefttoright);
                        coinbackpressflag = false;
                        shake.setDuration(SLIDEANIMDUR);
                        warningquestion.setAnimation(shake);
                        break;
                    }
                    case MotionEvent.ACTION_UP:

                        questionplus5game.setEnabled(false);
                        questionnodd.setEnabled(false);
                        questionunlockiq.setEnabled(false);
                        questionmult2 .setEnabled(false);


                        final MediaPlayer clickaudio2 = MediaPlayer.create(getApplicationContext(), R.raw.popupsound);
                        if(!mutestate[0]) {
                            clickaudio2.start();
                            clickaudio2.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                                public void onCompletion(MediaPlayer mp) {
                                    clickaudio2.release();

                                }

                                ;
                            });
                        }

                        if (gamelang == ENGLISH)  textquestion.setText("All in-app ads will be disabled.");
                        else if (gamelang == TURKISH)  textquestion.setText("Tüm uygulama içi reklamlar devre dışı bırakılacaktır.");
                        else if (gamelang == FRENCH)  textquestion.setText("Toutes les annonces intégrées à l'application seront désactivées.");
                        else if (gamelang == SPANISH) textquestion.setText("Todos los anuncios se eliminarán.");
                        else if (gamelang == RUSSIAN) textquestion.setText("Все объявления в приложении будут отключены.");
                        else if (gamelang == CHINESE) textquestion.setText("所有应用内广告都将被停用。");
                        else if (gamelang == JAPANESE) textquestion.setText("すべてのアプリ内広告は無効になります。");
                        else if (gamelang == PORTUGUESE) textquestion.setText("Todos os anúncios no aplicativo serão desativados.");
                        else   textquestion.setText("All in-app ads will be disabled.");

                        new CountDownTimer(3000, 100) {
                            public void onTick(long milsec) {


                            }

                            public void onFinish() {
                                disableallchild.setVisibility(View.INVISIBLE);
                                questionplus5game.setVisibility(View.VISIBLE);
                                questionplus5game2.setVisibility(View.INVISIBLE);

                                questionnodd.setVisibility(View.VISIBLE);
                                questionnodd2.setVisibility(View.INVISIBLE);

                                questionunlock2.setVisibility(View.INVISIBLE);
                                questionunlock.setVisibility(View.VISIBLE);


                                questionnmult2.setVisibility(View.VISIBLE);
                                questionnmult22.setVisibility(View.INVISIBLE);

                                questionplus5game.setEnabled(true);
                                questionnodd.setEnabled(true);
                                questionunlock.setEnabled(true);
                                questionnmult2 .setEnabled(true);
                            }
                        }.start();

                        questionnodd.setScaleX(1f);
                        questionnodd.setScaleY(1f);
                        questionnodd.setAlpha(1f);

                        break;
                    case MotionEvent.ACTION_CANCEL: {
                        break;
                    }
                }
                return true;
            }
        });

        questionmult2.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        questionmult2.setScaleX(BSCALE);
                        questionmult2.setScaleY(BSCALE);
                        questionmult2.setAlpha(BALPHA);
                        v.invalidate();

                        disableallchild.setVisibility(View.VISIBLE);
                        questionmult2.setVisibility(View.INVISIBLE);
                        questionmult22.setVisibility(View.VISIBLE);
                        warningquestion.setVisibility(View.VISIBLE);
                        final Animation shake = AnimationUtils.loadAnimation(x, R.anim.lefttoright);
                        coinbackpressflag = false;
                        shake.setDuration(SLIDEANIMDUR);
                        warningquestion.setAnimation(shake);
                        break;
                    }
                    case MotionEvent.ACTION_UP:

                        questionplus5game.setEnabled(false);
                        questionnodd.setEnabled(false);
                        questionunlockiq.setEnabled(false);
                        questionmult2 .setEnabled(false);


                        final MediaPlayer clickaudio2 = MediaPlayer.create(getApplicationContext(), R.raw.popupsound);
                        if(!mutestate[0]) {
                            clickaudio2.start();
                            clickaudio2.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                                public void onCompletion(MediaPlayer mp) {
                                    clickaudio2.release();

                                }

                                ;
                            });
                        }

                        if (gamelang == ENGLISH)  textquestion.setText("Your gained coins will be doubled.");
                        else if (gamelang == TURKISH)  textquestion.setText("Kazandığınız paralar iki katına çıkarılır.");
                        else if (gamelang == FRENCH)  textquestion.setText("Les pièces gagnées seront doublées.");
                        else if (gamelang == SPANISH) textquestion.setText("Sus monedas ganadas se duplicarán.");
                        else if (gamelang == RUSSIAN) textquestion.setText("Ваши полученные монеты будут удвоены.");
                        else if (gamelang == CHINESE) textquestion.setText("你获得的硬币将增加一倍。");
                        else if (gamelang == JAPANESE) textquestion.setText("コインは2倍になります");
                        else if (gamelang == PORTUGUESE) textquestion.setText("Suas moedas ganhas serão duplicadas.");
                        else   textquestion.setText("Your gained coins will be doubled.");






                        new CountDownTimer(3000, 100) {
                            public void onTick(long milsec) {


                            }

                            public void onFinish() {


                                disableallchild.setVisibility(View.INVISIBLE);
                                questionplus5game.setVisibility(View.VISIBLE);
                                questionplus5game2.setVisibility(View.INVISIBLE);

                                questionnodd.setVisibility(View.VISIBLE);
                                questionnodd2.setVisibility(View.INVISIBLE);

                                questionunlock2.setVisibility(View.INVISIBLE);
                                questionunlock.setVisibility(View.VISIBLE);


                                questionnmult2.setVisibility(View.VISIBLE);
                                questionnmult22.setVisibility(View.INVISIBLE);

                                questionplus5game.setEnabled(true);
                                questionnodd.setEnabled(true);
                                questionunlock.setEnabled(true);
                                questionnmult2 .setEnabled(true);
                            }
                        }.start();




                        questionmult2.setScaleX(1f);
                        questionmult2.setScaleY(1f);
                        questionmult2.setAlpha(1f);

                        break;
                    case MotionEvent.ACTION_CANCEL: {
                        break;
                    }
                }
                return true;
            }
        });


        initInstances();
        initCallbackManager();
        refreshButtonsState();





    final RelativeLayout warningbox3 = (RelativeLayout) findViewById(R.id.warningbox3);
        final Button buttoninfoyes = (Button) findViewById(R.id.button373);
        final TextView textinfoyes = (TextView) findViewById(R.id.textView873);




     /*   buttoninfoyes.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        buttoninfoyes.setScaleX(BSCALE);
                        buttoninfoyes.setScaleY(BSCALE);
                        buttoninfoyes.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:



                        if(!mutestate[0])
                            soundPool.play(soundID, volume, volume, 1, 0, 1f);



                        final Animation shake = AnimationUtils.loadAnimation(x, R.anim.righttoleft);
                        disableallchild.setVisibility(View.INVISIBLE);
                        shake.setDuration(SLIDEANIMDUR);
                        pluscoinlayout8();
                        pluslifelayout4.setAnimation(shake);

                        if(BILLINGSTATE == NOADD)

                        {

                            if (isAvailable) {
                                // continue

                                bp.purchase(GameforActivity.this, "android.test.purchased");
                                // bp.getPurchaseTransactionDetails("coins");
                                }
                            else
                            {
                                Log.d("billing:", "unavailable");

                            }
                        }

                       else if(BILLINGSTATE == UNLOCKIQ)

                        {

                            if (isAvailable) {
                                // continue

                                bp.purchase(GameforActivity.this, "android.test.purchased");
                                // bp.getPurchaseTransactionDetails("coins");
                            }
                            else
                            {
                                Log.d("billing:", "unavailable");

                            }
                        }

                        else if(BILLINGSTATE == PLUS5GAME)

                        {

                            if (isAvailable) {
                                // continue

                                bp.purchase(GameforActivity.this, "android.test.purchased");
                                // bp.getPurchaseTransactionDetails("coins");
                            }
                            else
                            {
                                Log.d("billing:", "unavailable");

                            }
                        }

                            buttoninfoyes.setScaleX(1f);
                        buttoninfoyes.setScaleY(1f);
                        buttoninfoyes.setAlpha(1f);


                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });*/





        if(twitcoin==false)
        {
            twitlayout1.setEnabled(true);
            twitlayout2.setEnabled(true);
            twitlayout11.setEnabled(true);
            twitlayout1.setAlpha(1f);
            twitlayout2.setAlpha(1f);
            twitlayout11.setAlpha(1f);

        }
        else   {
            twitlayout1.setEnabled(false);
            twitlayout2.setEnabled(false);
            twitlayout11.setEnabled(false);

            twitlayout1.setAlpha(0.33f);
            twitlayout2.setAlpha(0.33f);
            twitlayout11.setAlpha(0.33f);

        }

        if(instacoin==false)
        {
            instalayout1.setEnabled(true);
            instalayout2.setEnabled(true);
            instalayout11.setEnabled(true);
            instalayout1.setAlpha(1f);
            instalayout2.setAlpha(1f);
            instalayout11.setAlpha(1f);

        }
        else   {
            instalayout1.setEnabled(false);
            instalayout2.setEnabled(false);
            instalayout11.setEnabled(false);

            instalayout1.setAlpha(0.33f);
            instalayout2.setAlpha(0.33f);
            instalayout11.setAlpha(0.33f);

        }


        if(facecoin==false)
        {
            facelayout1.setEnabled(true);
            facelayout11.setEnabled(true);
            facelayout12.setEnabled(true);
            facelayout1.setAlpha(1f);
            facelayout11.setAlpha(1f);
            facelayout12.setAlpha(1f);

        }
        else   {
            facelayout1.setEnabled(false);
            facelayout11.setEnabled(false);
            facelayout12.setEnabled(false);

            facelayout1.setAlpha(0.33f);
            facelayout11.setAlpha(0.33f);
            facelayout12.setAlpha(0.33f);

        }


        if(googlecoin==false)
        {
            googlelayout1.setEnabled(true);
            googlelayout11.setEnabled(true);
            googlelayout2.setEnabled(true);
            googlelayout1.setAlpha(1f);
            googlelayout11.setAlpha(1f);
            googlelayout2.setAlpha(1f);

        }
        else
        {
            googlelayout1.setEnabled(false);
            googlelayout11.setEnabled(false);
            googlelayout2.setEnabled(false);

            googlelayout1.setAlpha(0.33f);
            googlelayout11.setAlpha(0.33f);
            googlelayout2.setAlpha(0.33f);

        }


        if(plus5gameflag==false )
        {
            plusgame.setEnabled(true);
            plusgamel1.setEnabled(true);
            plusgamel2.setEnabled(true);
            plusgame.setAlpha(1f);
            plusgamel1.setAlpha(1f);
            plusgamel2.setAlpha(1f);

            questionplus5game.setEnabled(true);
            questionplus5game.setAlpha(1f);

        }

        else
        {

            plusgame.setEnabled(false);
            plusgamel1.setEnabled(false);
            plusgamel2.setEnabled(false);
            plusgame.setAlpha(0.33f);
            plusgamel1.setAlpha(0.33f);
            plusgamel2.setAlpha(0.33f);

            questionplus5game.setEnabled(false);
            questionplus5game.setAlpha(0.33f);

        }

        if(mult2flag==false )
        {
            mult2layout2.setEnabled(true);
            mult2button.setEnabled(true);
            mult2image.setEnabled(true);
            mult2layout2.setAlpha(1f);

            mult2button.setAlpha(1f);
            mult2image.setAlpha(1f);
            questionmult2.setEnabled(true);
            questionmult2.setAlpha(1f);

        }


        else
        {
            mult2layout2.setEnabled(false);
            mult2button.setEnabled(false);
            mult2image.setEnabled(false);

            mult2layout2.setAlpha(0.33f);
            mult2button.setAlpha(0.33f);
            mult2image.setAlpha(0.33f);

            questionmult2.setEnabled(false);

            questionmult2.setAlpha(0.33f);

        }


        if(unlockiqflag==false )
        {
            unlockiqlayout2.setEnabled(true);
            unlockiqbutton.setEnabled(true);
            unlcokiqimage.setEnabled(true);
            unlockiqlayout2.setAlpha(1f);

            unlockiqbutton.setAlpha(1f);
            unlcokiqimage.setAlpha(1f);
            questionunlockiq.setEnabled(true);
            questionunlockiq.setAlpha(1f);

        }


        else
        {
            unlockiqlayout2.setEnabled(false);
            unlockiqbutton.setEnabled(false);
            unlcokiqimage.setEnabled(false);

            unlockiqlayout2.setAlpha(0.33f);
            unlockiqbutton.setAlpha(0.33f);
            unlcokiqimage.setAlpha(0.33f);

            questionunlockiq.setEnabled(false);

            questionunlockiq.setAlpha(0.33f);

        }

        mult2image.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        mult2layout.setScaleX(BSCALE);
                        mult2layout.setScaleY(BSCALE);
                        mult2layout.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:


                        if(!mutestate[0])
                            soundPool.play(soundID, volume, volume, 1, 0, 1f);

                        BILLINGSTATE = MULTCOIN2;

                        if (isAvailable ) {
                            // continue

                            bp.purchase(GameforActivity.this, "mult2");
                            // bp.getPurchaseTransactionDetails("coins");
                        }
                        else
                        {

                            Log.d("billing:", "unavailable");

                        }

                        mult2layout.setScaleX(1f);
                        mult2layout.setScaleY(1f);
                        mult2layout.setAlpha(1f);


                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });

        mult2button.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        mult2layout.setScaleX(BSCALE);
                        mult2layout.setScaleY(BSCALE);
                        mult2layout.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:


                        if(!mutestate[0])
                            soundPool.play(soundID, volume, volume, 1, 0, 1f);

                        BILLINGSTATE = MULTCOIN2;

                        if (isAvailable ) {
                            // continue

                            bp.purchase(GameforActivity.this, "mult2");
                            // bp.getPurchaseTransactionDetails("coins");
                        }
                        else
                        {

                            Log.d("billing:", "unavailable");

                        }

                        mult2layout.setScaleX(1f);
                        mult2layout.setScaleY(1f);
                        mult2layout.setAlpha(1f);


                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });

        mult2layout2.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        mult2layout.setScaleX(BSCALE);
                        mult2layout.setScaleY(BSCALE);
                        mult2layout.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:


                        if(!mutestate[0])
                            soundPool.play(soundID, volume, volume, 1, 0, 1f);

                        BILLINGSTATE = MULTCOIN2;

                        if (isAvailable ) {
                            // continue

                            bp.purchase(GameforActivity.this, "mult2");
                            // bp.getPurchaseTransactionDetails("coins");
                        }
                        else
                        {

                            Log.d("billing:", "unavailable");

                        }

                        mult2layout.setScaleX(1f);
                        mult2layout.setScaleY(1f);
                        mult2layout.setAlpha(1f);


                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });

        unlockiqlayout2.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        unlcokiqlayout.setScaleX(BSCALE);
                        unlcokiqlayout.setScaleY(BSCALE);
                        unlcokiqlayout.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:


                        if(!mutestate[0])
                            soundPool.play(soundID, volume, volume, 1, 0, 1f);

                       BILLINGSTATE = UNLOCKIQ;

                            if (isAvailable) {
                                // continue

                                bp.purchase(GameforActivity.this, "unluckiq");
                                // bp.getPurchaseTransactionDetails("coins");
                            }
                            else
                            {

                                Log.d("billing:", "unavailable");

                            }

                        unlcokiqlayout.setScaleX(1f);
                        unlcokiqlayout.setScaleY(1f);
                        unlcokiqlayout.setAlpha(1f);


                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });


        unlockiqbutton.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        unlcokiqlayout.setScaleX(BSCALE);
                        unlcokiqlayout.setScaleY(BSCALE);
                        unlcokiqlayout.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:



                        if(!mutestate[0])
                            soundPool.play(soundID, volume, volume, 1, 0, 1f);

                        BILLINGSTATE = UNLOCKIQ;

                        if (isAvailable) {
                            // continue

                            bp.purchase(GameforActivity.this, "unluckiq");
                            // bp.getPurchaseTransactionDetails("coins");
                        }
                        else
                        {

                            Log.d("billing:", "unavailable");

                        }




                        unlcokiqlayout.setScaleX(1f);
                        unlcokiqlayout.setScaleY(1f);
                        unlcokiqlayout.setAlpha(1f);


                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });



        unlcokiqimage.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        unlcokiqlayout.setScaleX(BSCALE);
                        unlcokiqlayout.setScaleY(BSCALE);
                        unlcokiqlayout.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:


                        if(!mutestate[0])
                            soundPool.play(soundID, volume, volume, 1, 0, 1f);

                        BILLINGSTATE = UNLOCKIQ;

                        if (isAvailable ) {
                            // continue

                            bp.purchase(GameforActivity.this, "unluckiq");
                            // bp.getPurchaseTransactionDetails("coins");
                        }
                        else
                        {

                            Log.d("billing:", "unavailable");

                        }



                        unlcokiqlayout.setScaleX(1f);
                        unlcokiqlayout.setScaleY(1f);
                        unlcokiqlayout.setAlpha(1f);


                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });


        plusgamel2.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        plusgamelayout.setScaleX(BSCALE);
                        plusgamelayout.setScaleY(BSCALE);
                        plusgamelayout.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:

                        if(!mutestate[0])
                            soundPool.play(soundID, volume, volume, 1, 0, 1f);

                        BILLINGSTATE = PLUS5GAME;

                        if (isAvailable ) {
                            // continue

                            bp.purchase(GameforActivity.this, "plus5game");
                            // bp.getPurchaseTransactionDetails("coins");
                        }
                        else
                        {

                            Log.d("billing:", "unavailable");

                        }





     /*                   final Button nobutton3 = (Button) findViewById(R.id.button363);
                        nobutton3.setEnabled(true);
                        warningbox3.setVisibility(View.VISIBLE);
                        final Animation shake = AnimationUtils.loadAnimation(x, R.anim.lefttoright);
                        disableallchild.setVisibility(View.VISIBLE);
                        shake.setDuration(SLIDEANIMDUR);
                        warningbox3.setAnimation(shake);
                        final MediaPlayer clickaudio2 = MediaPlayer.create(getApplicationContext(), R.raw.popupsound);
                        if(!mutestate[0]) {
                            clickaudio2.start();
                            clickaudio2.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                                public void onCompletion(MediaPlayer mp) {
                                    clickaudio2.release();

                                }

                                ;
                            });
                        }


                        BILLINGSTATE = PLUS5GAME;


                        Button unlockiqtext = (Button) findViewById(R.id.unlockiqbutton);
                        SkuDetails skun = bp.getPurchaseListingDetails("plus5game");


                        if (gamelang == ENGLISH)  textinfoyes.setText("Click yes to set maximum right to play for all games to 5 for " + Double.toString(round(skun.priceValue,2))+ " " + skun.currency);
                        else if (gamelang == TURKISH)  textinfoyes.setText(Double.toString(round(skun.priceValue,2))+ " " + skun.currency + " harcayarak maksimum oyun oynama hakkınızı 5 çıkarmak için evet'e basınız.");
                        else if (gamelang == FRENCH)  textinfoyes.setText("Cliquez sur Oui pour définir le droit maximal à jouer pour tous les jeux à 5 pour " + Double.toString(round(skun.priceValue,2))+ " " + skun.currency);
                        else if (gamelang == SPANISH) textinfoyes.setText("Haga clic en Sí para configurar el máximo derecho a jugar todos los juegos a 5 para " + Double.toString(round(skun.priceValue,2))+ " " + skun.currency);
                        else if (gamelang == RUSSIAN) textinfoyes.setText("Нажмите кнопку Да, чтобы настроить максимальное право играть во все игры на 5 в течение " + Double.toString(round(skun.priceValue,2))+ " " + skun.currency);
                        else if (gamelang == CHINESE) textinfoyes.setText("單擊是為所有的遊戲玩到5最大權 " + Double.toString(round(skun.priceValue,2))+ " " + skun.currency);
                        else if (gamelang == JAPANESE) textinfoyes.setText(Double.toString(round(skun.priceValue,2))+ " " + skun.currency + " のため5に、すべてのゲームのためにプレーする最大の権利を設定するには、[はい]をクリックします");
                        else if (gamelang == PORTUGUESE) textinfoyes.setText("Clique em Sim para definir máxima direito de jogar para todos os jogos a 5 para " + Double.toString(round(skun.priceValue,2))+ " " + skun.currency);
                        else   textinfoyes.setText("Click yes to set maximum right to play for all games to 5 for " + Double.toString(round(skun.priceValue,2))+ " " + skun.currency);*/

                        plusgamelayout.setScaleX(1f);
                        plusgamelayout.setScaleY(1f);
                        plusgamelayout.setAlpha(1f);


                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });




        plusgamel1.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        plusgamelayout.setScaleX(BSCALE);
                        plusgamelayout.setScaleY(BSCALE);
                        plusgamelayout.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:

                        //coin[0] = coin[0] + 1000;
                        //coinflip();
                        //tcoin.setText(Integer.toString(coin[0]));

                        if(!mutestate[0])
                            soundPool.play(soundID, volume, volume, 1, 0, 1f);
                        BILLINGSTATE = PLUS5GAME;

                        if (isAvailable ) {
                            // continue

                            bp.purchase(GameforActivity.this, "plus5game");
                            // bp.getPurchaseTransactionDetails("coins");
                        }
                        else
                        {

                            Log.d("billing:", "unavailable");

                        }
                        plusgamelayout.setScaleX(1f);
                        plusgamelayout.setScaleY(1f);
                        plusgamelayout.setAlpha(1f);


                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });







        plusgame.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        plusgamelayout.setScaleX(BSCALE);
                        plusgamelayout.setScaleY(BSCALE);
                        plusgamelayout.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:

                        if(!mutestate[0])
                            soundPool.play(soundID, volume, volume, 1, 0, 1f);
                        BILLINGSTATE = PLUS5GAME;

                        if (isAvailable ) {
                            // continue

                            bp.purchase(GameforActivity.this, "plus5game");
                            // bp.getPurchaseTransactionDetails("coins");
                        }
                        else
                        {

                            Log.d("billing:", "unavailable");

                        }
                        plusgamelayout.setScaleX(1f);
                        plusgamelayout.setScaleY(1f);
                        plusgamelayout.setAlpha(1f);


                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });



        coin500.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        coin500layout.setScaleX(BSCALE);
                        coin500layout.setScaleY(BSCALE);
                        coin500layout.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:

                        if(!mutestate[0])
                            soundPool.play(soundID, volume, volume, 1, 0, 1f);

                        if (isAvailable ) {
                            // continue

                            BILLINGSTATE = PURCHASE500;
                            bp.purchase(GameforActivity.this, "coin500");
                            // bp.getPurchaseTransactionDetails("coins");
                            //
                        }
                        else
                        {

                            Log.d("billing:", "unavailable");

                        }
                        coin500layout.setScaleX(1f);
                        coin500layout.setScaleY(1f);
                        coin500layout.setAlpha(1f);


                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });

        coin500l1.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        coin500layout.setScaleX(BSCALE);
                        coin500layout.setScaleY(BSCALE);
                        coin500layout.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:

                        if(!mutestate[0])
                            soundPool.play(soundID, volume, volume, 1, 0, 1f);

                        if (isAvailable) {
                            // continue

                            BILLINGSTATE = PURCHASE500;
                            bp.purchase(GameforActivity.this, "coin500");
                            // bp.getPurchaseTransactionDetails("coins");
                            //
                        }
                        else
                        {

                            Log.d("billing:", "unavailable");

                        }
                        coin500layout.setScaleX(1f);
                        coin500layout.setScaleY(1f);
                        coin500layout.setAlpha(1f);


                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });
        coin500l2.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        coin500layout.setScaleX(BSCALE);
                        coin500layout.setScaleY(BSCALE);
                        coin500layout.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:
                        if(!mutestate[0])
                            soundPool.play(soundID, volume, volume, 1, 0, 1f);

                        if (isAvailable ) {
                            // continue

                            BILLINGSTATE = PURCHASE500;
                            bp.purchase(GameforActivity.this, "coin500");
                            // bp.getPurchaseTransactionDetails("coins");
                            //
                        }
                        else
                        {


                            Log.d("billing:", "unavailable");

                        }
                        coin500layout.setScaleX(1f);
                        coin500layout.setScaleY(1f);
                        coin500layout.setAlpha(1f);


                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });



      /*  advideocoin.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        v.setScaleX(0.85f);
                        v.setScaleY(0.85f);
                        advideocoin.setAlpha(0.33f);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:

                        if (vunglePub.isAdPlayable() == true) {
                            vunglePub.playAd();

                            new CountDownTimer(10000, 1000) {

                                public void onTick(long milsec) {

                                }

                                public void onFinish() {

                                    pluscoinaward(100);

                                }
                            }.start();

                        }

                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        advideocoin.setAlpha(1f);

                        break;
                    case MotionEvent.ACTION_CANCEL: {
                        ImageButton view = (ImageButton) v;
                        view.getBackground().clearColorFilter();
                        view.invalidate();
                        break;
                    }
                }
                return true;
            }
        });*/

        coinvideolayout.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        videolayout.setScaleX(BSCALE);
                        videolayout.setScaleY(BSCALE);
                        videolayout.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:


                        if(!mutestate[0])
                            soundPool.play(soundID, volume, volume, 1, 0, 1f);



                        if(mobInterstitial2.isReady())
                        {
                            final RelativeLayout pluscoinlayout = ( RelativeLayout) findViewById(R.id.pluscoinlayout2);
                            showad2();

                            new CountDownTimer(4000, 100) {

                                public void onTick(long millisUntilFinished) {

                                }

                                public void onFinish() {
                                    pluscoinlayout.setVisibility(View.VISIBLE);
                                    TextView tcoinamount = (TextView) findViewById(R.id.coinamount2);


                                    tcoinamount.setText("+" + Integer.toString(20));


                                    disableallchild.setVisibility(View.VISIBLE);
                                }

                            }.start();




                           // editor.putBoolean("videogo",videogo);
                            //editor.commit();
                        }
                      /*  else if(ad != null && adcolonyloaded) {
                            ad.show();
                            videogo = true;
                          //  editor.putBoolean("videogo",videogo);
                           // editor.commit();
                        }*/

                        else
                        {
                           // AdColony.requestInterstitial( ZONE_ID, listener, ad_options );
                            mobInterstitial2.load();
                            noadsalert();
                        }




                        videolayout.setScaleX(1f);
                        videolayout.setScaleY(1f);
                        videolayout.setAlpha(1f);


                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });


        coinvideo2.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        videolayout.setScaleX(BSCALE);
                        videolayout.setScaleY(BSCALE);
                        videolayout.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:
                        if(!mutestate[0])
                            soundPool.play(soundID, volume, volume, 1, 0, 1f);
                        // if (vunglePub.isAdPlayable() == true) {
                        if(mobInterstitial2.isReady())
                        {
                            final RelativeLayout pluscoinlayout = ( RelativeLayout) findViewById(R.id.pluscoinlayout2);
                            showad2();

                            new CountDownTimer(4000, 100) {

                                public void onTick(long millisUntilFinished) {

                                }

                                public void onFinish() {
                                    pluscoinlayout.setVisibility(View.VISIBLE);
                                    TextView tcoinamount = (TextView) findViewById(R.id.coinamount2);


                                    tcoinamount.setText("+" + Integer.toString(20));


                                    disableallchild.setVisibility(View.VISIBLE);
                                }

                            }.start();

                        }

                      /*  else if(ad != null && adcolonyloaded) {
                            ad.show();
                            videogo = true;
                           // editor.putBoolean("videogo",videogo);
                           // editor.commit();
                        }*/
                        else
                        {
                            mobInterstitial2.load();
                            noadsalert();
                        }


                        videolayout.setScaleX(1f);
                        videolayout.setScaleY(1f);
                        videolayout.setAlpha(1f);


                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });


        coinvideo.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        videolayout.setScaleX(BSCALE);
                        videolayout.setScaleY(BSCALE);
                        videolayout.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:
                        if(!mutestate[0])
                            soundPool.play(soundID, volume, volume, 1, 0, 1f);
                        // if (vunglePub.isAdPlayable() == true) {
                        if(mobInterstitial2.isReady())
                        {
                            final RelativeLayout pluscoinlayout = ( RelativeLayout) findViewById(R.id.pluscoinlayout2);
                            showad2();

                            new CountDownTimer(4000, 100) {

                                public void onTick(long millisUntilFinished) {

                                }

                                public void onFinish() {
                                    pluscoinlayout.setVisibility(View.VISIBLE);
                                    TextView tcoinamount = (TextView) findViewById(R.id.coinamount2);


                                    tcoinamount.setText("+" + Integer.toString(20));


                                    disableallchild.setVisibility(View.VISIBLE);
                                }

                            }.start();

                        }

                      /*  else if(ad != null && adcolonyloaded) {
                            ad.show();
                            videogo = true;
                            //editor.putBoolean("videogo",videogo);
                            //editor.commit();
                        }*/
                        else
                        {
                            //AdColony.requestInterstitial( ZONE_ID, listener, ad_options );
                            mobInterstitial2.load();
                            noadsalert();
                        }

                        videolayout.setScaleX(1f);
                        videolayout.setScaleY(1f);
                        videolayout.setAlpha(1f);


                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });

        twitlayout1.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        twitlayout.setScaleX(BSCALE);
                        twitlayout.setScaleY(BSCALE);
                        twitlayout.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:
                        if(!mutestate[0])
                            soundPool.play(soundID, volume, volume, 1, 0, 1f);
                        if (isOnline()) {
                            Intent googleintent = new Intent(Intent.ACTION_VIEW);
                            //String facebookUrl = getFacebookPageURL(x);
                            googleintent.setData(Uri.parse(getResources().getString(R.string.twitteraccount)));
                            startActivity(googleintent);
                            twitcoin=true;
                            twittergo = true;
                            editor.putBoolean("twittergo",twittergo);
                            editor.putBoolean("twitcoin",twitcoin);
                            editor.commit();
                            twitlayout1.setEnabled(false);
                            twitlayout2.setEnabled(false);
                            twitlayout11.setEnabled(false);
                            twitlayout1.setAlpha(0.33f);
                            twitlayout2.setAlpha(0.33f);
                            twitlayout11.setAlpha(0.33f);
                        }
                        else

                        {
                            alertbox();

                        }






                        twitlayout.setScaleX(1f);
                        twitlayout.setScaleY(1f);
                        twitlayout.setAlpha(1f);


                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });


        twitlayout2.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        twitlayout.setScaleX(BSCALE);
                        twitlayout.setScaleY(BSCALE);
                        twitlayout.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:
                        if(!mutestate[0])
                            soundPool.play(soundID, volume, volume, 1, 0, 1f);

                        if (isOnline()) {
                            Intent googleintent = new Intent(Intent.ACTION_VIEW);
                            //String facebookUrl = getFacebookPageURL(x);
                            googleintent.setData(Uri.parse(getResources().getString(R.string.twitteraccount)));
                            startActivity(googleintent);

                            twitcoin = true;
                            twittergo = true;

                            editor.putBoolean("twitcoin", twitcoin);
                            editor.putBoolean("twittergo", twittergo);

                            editor.commit();
                            twitlayout1.setEnabled(false);
                            twitlayout2.setEnabled(false);
                            twitlayout11.setEnabled(false);
                            twitlayout1.setAlpha(0.33f);
                            twitlayout2.setAlpha(0.33f);
                            twitlayout11.setAlpha(0.33f);


                            twitlayout.setScaleX(1f);
                            twitlayout.setScaleY(1f);
                            twitlayout.setAlpha(1f);
                        }
                        else
                        {alertbox();}

                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });


        twitlayout11.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        twitlayout.setScaleX(BSCALE);
                        twitlayout.setScaleY(BSCALE);
                        twitlayout.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:
                        if(!mutestate[0])
                            soundPool.play(soundID, volume, volume, 1, 0, 1f);

                        if (isOnline()) {
                            Intent googleintent = new Intent(Intent.ACTION_VIEW);
                            //String facebookUrl = getFacebookPageURL(x);
                            googleintent.setData(Uri.parse(getResources().getString(R.string.twitteraccount)));
                            startActivity(googleintent);


                            twitcoin = true;
                            twittergo = true;

                            editor.putBoolean("twitcoin", twitcoin);
                            editor.putBoolean("twittergo", twittergo);

                            editor.commit();
                            twitlayout1.setEnabled(false);
                            twitlayout2.setEnabled(false);
                            twitlayout11.setEnabled(false);
                            twitlayout1.setAlpha(0.33f);
                            twitlayout2.setAlpha(0.33f);
                            twitlayout11.setAlpha(0.33f);


                            twitlayout.setScaleX(1f);
                            twitlayout.setScaleY(1f);
                            twitlayout.setAlpha(1f);
                        }

                        else {

                            alertbox();

                        }

                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });



        instalayout1.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        instalayout.setScaleX(BSCALE);
                        instalayout.setScaleY(BSCALE);
                        instalayout.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:
                        if(!mutestate[0])
                            soundPool.play(soundID, volume, volume, 1, 0, 1f);

                        if (isOnline()) {
                            Intent googleintent = new Intent(Intent.ACTION_VIEW);
                            //String facebookUrl = getFacebookPageURL(x);
                            googleintent.setData(Uri.parse(getResources().getString(R.string.instagramaccount)));
                            startActivity(googleintent);


                            instacoin = true;
                            instago = true;

                            editor.putBoolean("instacoin", instacoin);
                            editor.putBoolean("instago", instago);

                            editor.commit();
                            instalayout1.setEnabled(false);
                            instalayout2.setEnabled(false);
                            instalayout11.setEnabled(false);
                            instalayout1.setAlpha(0.33f);
                            instalayout2.setAlpha(0.33f);
                            instalayout11.setAlpha(0.33f);


                            instalayout.setScaleX(1f);
                            instalayout.setScaleY(1f);
                            instalayout.setAlpha(1f);
                        }

                        else {  alertbox();}

                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });

        instalayout2.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        instalayout.setScaleX(BSCALE);
                        instalayout.setScaleY(BSCALE);
                        instalayout.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:
                        if(!mutestate[0])
                            soundPool.play(soundID, volume, volume, 1, 0, 1f);

                        if (isOnline()) {
                            Intent googleintent = new Intent(Intent.ACTION_VIEW);
                            //String facebookUrl = getFacebookPageURL(x);
                            googleintent.setData(Uri.parse(getResources().getString(R.string.instagramaccount)));
                            startActivity(googleintent);


                            instacoin = true;
                            instago = true;

                            editor.putBoolean("instacoin", instacoin);
                            editor.putBoolean("instago", instago);

                            editor.commit();
                            instalayout1.setEnabled(false);
                            instalayout2.setEnabled(false);
                            instalayout11.setEnabled(false);
                            instalayout1.setAlpha(0.33f);
                            instalayout2.setAlpha(0.33f);
                            instalayout11.setAlpha(0.33f);


                            instalayout.setScaleX(1f);
                            instalayout.setScaleY(1f);
                            instalayout.setAlpha(1f);
                        }

                        else {alertbox();}

                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });

        instalayout11.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        instalayout.setScaleX(BSCALE);
                        instalayout.setScaleY(BSCALE);
                        instalayout.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:
                        if(!mutestate[0])
                            soundPool.play(soundID, volume, volume, 1, 0, 1f);

                        if (isOnline()) {
                            Intent googleintent = new Intent(Intent.ACTION_VIEW);
                            //String facebookUrl = getFacebookPageURL(x);
                            googleintent.setData(Uri.parse(getResources().getString(R.string.instagramaccount)));
                            startActivity(googleintent);

                            instacoin = true;
                            instago = true;

                            editor.putBoolean("instacoin", instacoin);
                            editor.putBoolean("instago", instago);

                            editor.commit();
                            instalayout1.setEnabled(false);
                            instalayout2.setEnabled(false);
                            instalayout11.setEnabled(false);
                            instalayout1.setAlpha(0.33f);
                            instalayout2.setAlpha(0.33f);
                            instalayout11.setAlpha(0.33f);


                            instalayout.setScaleX(1f);
                            instalayout.setScaleY(1f);
                            instalayout.setAlpha(1f);
                        }

                        else { alertbox();}

                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });


        googlelayout1.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        googlelayout.setScaleX(BSCALE);
                        googlelayout.setScaleY(BSCALE);
                        googlelayout.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:




                        if(!mutestate[0])
                            soundPool.play(soundID, volume, volume, 1, 0, 1f);
                        if (isOnline()) {

                            Intent googleintent = new Intent(Intent.ACTION_VIEW);
                            //String facebookUrl = getFacebookPageURL(x);
                            googleintent.setData(Uri.parse(getResources().getString(R.string.googleplusaccount)));
                            startActivity(googleintent);

                            GoodlegO = true;
                            googlecoin = true;

                            editor.putBoolean("GoodlegO", GoodlegO);
                            editor.putBoolean("googlecoin", googlecoin);

                            editor.commit();


                            googlelayout1.setEnabled(false);
                            googlelayout2.setEnabled(false);
                            googlelayout11.setEnabled(false);
                            googlelayout1.setAlpha(0.33f);
                            googlelayout2.setAlpha(0.33f);
                            googlelayout11.setAlpha(0.33f);


                            googlelayout.setScaleX(1f);
                            googlelayout.setScaleY(1f);
                            googlelayout.setAlpha(1f);
                        }
                        else alertbox();

                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });
        googlelayout2.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        googlelayout.setScaleX(BSCALE);
                        googlelayout.setScaleY(BSCALE);
                        googlelayout.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:


                        if(!mutestate[0])
                            soundPool.play(soundID, volume, volume, 1, 0, 1f);
                        if (isOnline()) {
                            Intent googleintent = new Intent(Intent.ACTION_VIEW);
                            //String facebookUrl = getFacebookPageURL(x);
                            googleintent.setData(Uri.parse(getResources().getString(R.string.googleplusaccount)));
                            startActivity(googleintent);
                            GoodlegO = true;
                            googlecoin = true;


                            GoodlegO = true;
                            googlecoin = true;

                            editor.putBoolean("GoodlegO", GoodlegO);
                            editor.putBoolean("googlecoin", googlecoin);

                            editor.commit();
                            googlelayout1.setEnabled(false);
                            googlelayout2.setEnabled(false);
                            googlelayout11.setEnabled(false);
                            googlelayout1.setAlpha(0.33f);
                            googlelayout2.setAlpha(0.33f);
                            googlelayout11.setAlpha(0.33f);

                            googlelayout.setScaleX(1f);
                            googlelayout.setScaleY(1f);
                            googlelayout.setAlpha(1f);
                        }

                        else

                        { alertbox();}

                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });


        googlelayout11.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        googlelayout.setScaleX(BSCALE);
                        googlelayout.setScaleY(BSCALE);
                        googlelayout.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:


                        if(!mutestate[0])
                            soundPool.play(soundID, volume, volume, 1, 0, 1f);

                        if (isOnline()) {
                            Intent googleintent = new Intent(Intent.ACTION_VIEW);
                            //String facebookUrl = getFacebookPageURL(x);
                            googleintent.setData(Uri.parse(getResources().getString(R.string.googleplusaccount)));
                            startActivity(googleintent);


                            GoodlegO = true;
                            googlecoin = true;


                            GoodlegO = true;
                            googlecoin = true;

                            editor.putBoolean("GoodlegO", GoodlegO);
                            editor.putBoolean("googlecoin", googlecoin);

                            editor.commit();
                            googlelayout1.setEnabled(false);
                            googlelayout2.setEnabled(false);
                            googlelayout11.setEnabled(false);
                            googlelayout1.setAlpha(0.33f);
                            googlelayout2.setAlpha(0.33f);
                            googlelayout11.setAlpha(0.33f);
                            googlelayout.setScaleX(1f);
                            googlelayout.setScaleY(1f);
                            googlelayout.setAlpha(1f);
                        }
                        else
                        alertbox();

                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });
        facelayout11.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        facelayout.setScaleX(BSCALE);
                        facelayout.setScaleY(BSCALE);
                        facelayout.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:
                        if(!mutestate[0])
                            soundPool.play(soundID, volume, volume, 1, 0, 1f);

                        if (isOnline()) {
                            Intent facebookIntent = new Intent(Intent.ACTION_VIEW);
                            String facebookUrl = getFacebookPageURL(x);
                            facebookIntent.setData(Uri.parse("https://www.facebook.com/vivobroshome/"));
                            startActivity(facebookIntent);

                       /* new CountDownTimer(10000, 1000) {

                            public void onTick(long milsec) {

                            }

                            public void onFinish() {

                                pluscoinaward(100);

                            }
                        }.start();*/

                            facebookgo = true;
                            facecoin = true;

                            editor.putBoolean("facecoin", facecoin);
                            editor.putBoolean("facebookgo", facebookgo);

                            editor.commit();
                            facelayout1.setEnabled(false);
                            facelayout11.setEnabled(false);
                            facelayout12.setEnabled(false);
                            facelayout1.setAlpha(0.33f);
                            facelayout11.setAlpha(0.33f);
                            facelayout12.setAlpha(0.33f);


                            facelayout.setScaleX(1f);
                            facelayout.setScaleY(1f);
                            facelayout.setAlpha(1f);
                        }

                        else alertbox();

                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });

        facelayout12.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        facelayout.setScaleX(BSCALE);
                        facelayout.setScaleY(BSCALE);
                        facelayout.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:
                        if(!mutestate[0])
                            soundPool.play(soundID, volume, volume, 1, 0, 1f);
                        if (isOnline()) {
                            Intent facebookIntent = new Intent(Intent.ACTION_VIEW);
                            String facebookUrl = getFacebookPageURL(x);
                            facebookIntent.setData(Uri.parse("https://www.facebook.com/vivobroshome/"));
                            startActivity(facebookIntent);

                      /*  new CountDownTimer(10000, 1000) {

                            public void onTick(long milsec) {

                            }

                            public void onFinish() {

                                pluscoinaward(100);

                            }
                        }.start();*/
                            facecoin = true;
                            facebookgo = true;
                            editor.putBoolean("facecoin", facecoin);
                            editor.putBoolean("facebookgo", facebookgo);

                            editor.commit();
                            facelayout1.setEnabled(false);
                            facelayout11.setEnabled(false);
                            facelayout12.setEnabled(false);
                            facelayout1.setAlpha(0.33f);
                            facelayout11.setAlpha(0.33f);
                            facelayout12.setAlpha(0.33f);
                            facelayout.setScaleX(1f);
                            facelayout.setScaleY(1f);
                            facelayout.setAlpha(1f);
                        }

                        else alertbox();

                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });

        facelayout1.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        facelayout.setScaleX(BSCALE);
                        facelayout.setScaleY(BSCALE);
                        facelayout.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:
                        if(!mutestate[0])
                            soundPool.play(soundID, volume, volume, 1, 0, 1f);
                        if (isOnline()) {

                            Intent facebookIntent = new Intent(Intent.ACTION_VIEW);
                            String facebookUrl = getFacebookPageURL(x);
                            facebookIntent.setData(Uri.parse("https://www.facebook.com/vivobroshome/"));
                            startActivity(facebookIntent);

                       /* new CountDownTimer(10000, 1000) {

                            public void onTick(long milsec) {

                            }

                            public void onFinish() {

                                pluscoinaward(100);

                            }
                        }.start();*/
                            facecoin = true;
                            facebookgo = true;
                            editor.putBoolean("facecoin", facecoin);
                            editor.putBoolean("facebookgo", facebookgo);
                            editor.commit();
                            facelayout1.setEnabled(false);
                            facelayout11.setEnabled(false);
                            facelayout12.setEnabled(false);
                            facelayout1.setAlpha(0.33f);
                            facelayout11.setAlpha(0.33f);
                            facelayout12.setAlpha(0.33f);
                            facelayout.setScaleX(1f);
                            facelayout.setScaleY(1f);
                            facelayout.setAlpha(1f);
                        }
                        else alertbox();

                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });

        regional6button.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        regional6button.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:



                        if (coin[0] - 30 < 0) {

                            
                            coinok = false;
                            vibrate(100);

                        } else {
                            coinok = true;  coin[0] = coin[0] - 30;
                            marketarray[regional6index] = marketarray[regional6index] + 1;
                            if (marketarray[regional6index] <= 0) removefood(regional6index);
                            if (marketarray[regional6index] == 1) addfood(regional6index);
                            if (!mutestate[0]) soundPool6.play(soundID6, volume, volume, 1, 0, 1f);
                            tcoin.setText(Integer.toString(coin[0]));
                            printfood(regional6index);
                        }
                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        regional6button.setAlpha(1f);


                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });

        drinks1button.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        drinks1button.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:



                        if (coin[0]- 8 < 0) {

                            
                            coinok = false;
                            vibrate(100);

                        } else {
                            coinok = true;coin[0] = coin[0] - 8;
                            marketarray[drinks1index] = marketarray[drinks1index] + 1;
                            if (marketarray[drinks1index] <= 0) removefood(drinks1index);
                            if (marketarray[drinks1index] == 1) addfood(drinks1index);

                            if (!mutestate[0]) soundPool6.play(soundID6, volume, volume, 1, 0, 1f);
                            tcoin.setText(Integer.toString(coin[0]));
                            printfood(drinks1index);
                        }
                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        drinks1button.setAlpha(1f);


                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });


        drinks2button.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        drinks2button.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:



                        if (coin[0] - 9< 0) {

                            
                            coinok = false;
                            vibrate(100);

                        } else {
                            coinok = true;  coin[0] = coin[0] - 9;
                            marketarray[drinks2index] = marketarray[drinks2index] + 1;
                            if (marketarray[drinks2index] <= 0) removefood(drinks2index);
                            if (marketarray[drinks2index] == 1) addfood(drinks2index);

                            if (!mutestate[0]) soundPool6.play(soundID6, volume, volume, 1, 0, 1f);
                            tcoin.setText(Integer.toString(coin[0]));
                            printfood(drinks2index);
                        }
                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        drinks2button.setAlpha(1f);


                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });

        drinks3button.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        drinks3button.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:



                        if (coin[0] - 10< 0) {

                            
                            coinok = false;
                            vibrate(100);

                        } else {
                            coinok = true;coin[0] = coin[0] - 10;
                            marketarray[drinks3index] = marketarray[drinks3index] + 1;
                            if (marketarray[drinks3index] <= 0) removefood(drinks3index);
                            if (marketarray[drinks3index] == 1) addfood(drinks3index);

                            if (!mutestate[0]) soundPool6.play(soundID6, volume, volume, 1, 0, 1f);
                            tcoin.setText(Integer.toString(coin[0]));
                            printfood(drinks3index);
                        }
                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        drinks3button.setAlpha(1f);


                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });

        drinks4button.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        drinks4button.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:



                        if (coin[0]- 27 < 0) {

                            
                            coinok = false;
                            vibrate(100);

                        } else {
                            coinok = true; coin[0] = coin[0] - 27;
                            marketarray[drinks4index] = marketarray[drinks4index] + 1;
                            if (marketarray[drinks4index] <= 0) removefood(drinks4index);
                            if (marketarray[drinks4index] == 1) addfood(drinks4index);
                            if (!mutestate[0]) soundPool6.play(soundID6, volume, volume, 1, 0, 1f);

                            tcoin.setText(Integer.toString(coin[0]));
                            printfood(drinks4index);
                        }
                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        drinks4button.setAlpha(1f);


                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });

        drinks5button.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        drinks5button.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:



                        if (coin[0]- 15 < 0) {

                            
                            coinok = false;
                            vibrate(100);

                        } else {
                            coinok = true;coin[0] = coin[0] - 15;
                            marketarray[drinks5index] = marketarray[drinks5index] + 1;
                            if (marketarray[drinks5index] <= 0) removefood(drinks5index);
                            if (marketarray[drinks5index] == 1) addfood(drinks5index);

                            if (!mutestate[0]) soundPool6.play(soundID6, volume, volume, 1, 0, 1f);
                            tcoin.setText(Integer.toString(coin[0]));
                            printfood(drinks5index);
                        }
                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        drinks5button.setAlpha(1f);


                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });

        drinks6button.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        drinks6button.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:



                        if (coin[0]- 20 < 0) {

                            
                            coinok = false;
                            vibrate(100);

                        } else {
                            coinok = true;coin[0] = coin[0] - 20;
                            marketarray[drinks6index] = marketarray[drinks6index] + 1;
                            if (marketarray[drinks6index] <= 0) removefood(drinks6index);
                            if (marketarray[drinks6index] == 1) addfood(drinks6index);
                            if (!mutestate[0]) soundPool6.play(soundID6, volume, volume, 1, 0, 1f);

                            tcoin.setText(Integer.toString(coin[0]));
                            printfood(drinks6index);
                        }
                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        drinks6button.setAlpha(1f);


                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });

        desert1button.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        desert1button.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:



                        if (coin[0] - 15< 0) {

                            
                            coinok = false;
                            vibrate(100);

                        } else {
                            coinok = true;coin[0] = coin[0] - 15;
                            marketarray[desert1index] = marketarray[desert1index] + 1;
                            if (marketarray[desert1index] <= 0) removefood(desert1index);
                            if (marketarray[desert1index] == 1) addfood(desert1index);
                            if (!mutestate[0]) soundPool6.play(soundID6, volume, volume, 1, 0, 1f);

                            tcoin.setText(Integer.toString(coin[0]));
                            printfood(desert1index);
                        }
                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        desert1button.setAlpha(1f);


                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });

        desert2button.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        desert2button.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:



                        if (coin[0]- 18 < 0) {

                            
                            coinok = false;
                            vibrate(100);

                        } else {
                            coinok = true;coin[0] = coin[0] - 18;
                            marketarray[desert2index] = marketarray[desert2index] + 1;
                            if (marketarray[desert2index] <= 0) removefood(desert2index);
                            if (marketarray[desert2index] == 1) addfood(desert2index);

                            if (!mutestate[0]) soundPool6.play(soundID6, volume, volume, 1, 0, 1f);
                            tcoin.setText(Integer.toString(coin[0]));
                            printfood(desert2index);
                        }
                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        desert2button.setAlpha(1f);


                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });

        desert3button.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        desert3button.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:



                        if (coin[0]- 12 < 0) {

                            
                            coinok = false;
                            vibrate(100);

                        } else {
                            coinok = true;coin[0] = coin[0] - 12;
                            marketarray[desert3index] = marketarray[desert3index] + 1;
                            if (marketarray[desert3index] <= 0) removefood(desert3index);
                            if (marketarray[desert3index] == 1) addfood(desert3index);

                            if (!mutestate[0]) soundPool6.play(soundID6, volume, volume, 1, 0, 1f);
                            tcoin.setText(Integer.toString(coin[0]));
                            printfood(desert3index);
                        }
                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        desert3button.setAlpha(1f);


                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });

        desert4button.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        desert4button.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:



                        if (coin[0] - 20 < 0) {

                            
                            coinok = false;
                            vibrate(100);

                        } else {
                            coinok = true;coin[0] = coin[0] - 20;
                            marketarray[desert4index] = marketarray[desert4index] + 1;
                            if (marketarray[desert4index] <= 0) removefood(desert4index);
                            if (marketarray[desert4index] == 1) addfood(desert4index);
                            if (!mutestate[0]) soundPool6.play(soundID6, volume, volume, 1, 0, 1f);

                            tcoin.setText(Integer.toString(coin[0]));
                            printfood(desert4index);
                        }
                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        desert4button.setAlpha(1f);


                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });

        desert5button.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        desert5button.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:



                        if (coin[0]- 24 < 0) {

                            
                            coinok = false;
                            vibrate(100);

                        } else {
                            coinok = true;coin[0] = coin[0] - 24;
                            marketarray[desert5index] = marketarray[desert5index] + 1;
                            if (marketarray[desert5index] <= 0) removefood(desert5index);
                            if (marketarray[desert5index] == 1) addfood(desert5index);
                            if (!mutestate[0]) soundPool6.play(soundID6, volume, volume, 1, 0, 1f);

                            tcoin.setText(Integer.toString(coin[0]));
                            printfood(desert5index);
                        }
                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        desert5button.setAlpha(1f);


                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });

        desert6button.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        desert6button.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:



                        if (coin[0] - 13< 0) {

                            
                            coinok = false;
                            vibrate(100);

                        } else {
                            coinok = true; coin[0] = coin[0] - 13;
                            marketarray[desert6index] = marketarray[desert6index] + 1;
                            if (marketarray[desert6index] <= 0) removefood(desert6index);
                            if (marketarray[desert6index] == 1) addfood(desert6index);

                            if (!mutestate[0]) soundPool6.play(soundID6, volume, volume, 1, 0, 1f);
                            tcoin.setText(Integer.toString(coin[0]));
                            printfood(desert6index);
                        }
                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        desert6button.setAlpha(1f);


                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });


        hamburgerbutton.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        hamburgerbutton.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:



                        if (coin[0] - 23< 0) {

                            
                            coinok = false;
                            vibrate(100);

                        } else {
                            coinok = true;coin[0] = coin[0] - 23;
                            marketarray[hamburgerindex] = marketarray[hamburgerindex] + 1;
                            if (marketarray[hamburgerindex] <= 0) removefood(hamburgerindex);
                            if (marketarray[hamburgerindex] == 1) addfood(hamburgerindex);

                            if (!mutestate[0]) soundPool6.play(soundID6, volume, volume, 1, 0, 1f);
                            tcoin.setText(Integer.toString(coin[0]));
                            printfood(hamburgerindex);
                        }
                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        hamburgerbutton.setAlpha(1f);


                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });

        frenchfriesbutton.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        frenchfriesbutton.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:




                        if (coin[0] - 10< 0) {

                            
                            coinok = false;
                            vibrate(100);

                        } else {
                            coinok = true;coin[0] = coin[0] - 10;
                            marketarray[frenchfriesindex] = marketarray[frenchfriesindex] + 1;
                            if (marketarray[frenchfriesindex] <= 0) removefood(frenchfriesindex);
                            if (marketarray[frenchfriesindex] == 1) addfood(frenchfriesindex);
                            if (!mutestate[0]) soundPool6.play(soundID6, volume, volume, 1, 0, 1f);
                            tcoin.setText(Integer.toString(coin[0]));
                            printfood(frenchfriesindex);
                        }
                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        frenchfriesbutton.setAlpha(1f);


                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });


        chickenlegbutton.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        chickenlegbutton.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:

                        if (coin[0]- 15 < 0) {

                            
                            coinok = false;
                            vibrate(100);

                        } else {
                            coinok = true; coin[0] = coin[0] - 15;
                            marketarray[chickenlegindex] = marketarray[chickenlegindex] + 1;
                            if (marketarray[chickenlegindex] <= 0) removefood(chickenlegindex);
                            if (marketarray[chickenlegindex] == 1) addfood(chickenlegindex);

                            if (!mutestate[0]) soundPool6.play(soundID6, volume, volume, 1, 0, 1f);
                            tcoin.setText(Integer.toString(coin[0]));
                            printfood(chickenlegindex);
                        }
                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        chickenlegbutton.setAlpha(1f);


                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });


        fishbutton.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        fishbutton.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:


                        if (coin[0] - 30< 0) {

                            
                            coinok = false;
                            vibrate(100);

                        } else {
                            coinok = true;coin[0] = coin[0] - 30;
                            marketarray[fishindex] = marketarray[fishindex] + 1;
                            if (marketarray[fishindex] <= 0) removefood(fishindex);
                            if (marketarray[fishindex] == 1) addfood(fishindex);

                            if (!mutestate[0]) soundPool6.play(soundID6, volume, volume, 1, 0, 1f);
                            tcoin.setText(Integer.toString(coin[0]));
                            printfood(fishindex);
                        }
                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        fishbutton.setAlpha(1f);


                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });


        final TextView hungertext = (TextView) findViewById(R.id.editText3);
        final TextView hygienetext = (TextView) findViewById(R.id.editText4);
        final TextView bladdertext = (TextView) findViewById(R.id.editText6);
        final TextView sleeptext = (TextView) findViewById(R.id.editText7);
        final TextView lovetext1 = (TextView) findViewById(R.id.editText8);


        //Typeface tf = Typeface.createFromAsset(getAssets(), "irisupsbold.ttf");
       // name.setTypeface(tf);
        name.setTextSize(12);
        name2.setTextSize(12);

       // name.setTextColor(Color.argb(255,52,73,94));

      //  hungertext.setTypeface(tf);
      //  hygienetext.setTypeface(tf);
      //  sleeptext.setTypeface(tf);
      //  bladdertext.setTypeface(tf);
      //  lovetext1.setTypeface(tf);

        addtolayout();


/*
        if (marketarray[meatindex] > 0) {

            addfood(meatindex);

        }


        if (marketarray[cellspongeindex] > 0) {

            addfood(cellspongeindex);

        }


        if (marketarray[darkspongeindex] > 0) {

            addfood(darkspongeindex);

        }


        if (marketarray[seaspongeindex] > 0) {

            addfood(seaspongeindex);

        }


        if (marketarray[sleeppotionindex] > 0) {

            addfood(sleeppotionindex);

        }

        if (marketarray[hungerpotionindex] > 0) {

            addfood(hungerpotionindex);

        }
        if (marketarray[hygienepotionindex] > 0) {

            addfood(hygienepotionindex);

        }

        if (marketarray[lovepotionindex] > 0) {

            addfood(lovepotionindex);

        }

        if (marketarray[gamepotionindex] > 0) {

            addfood(gamepotionindex);

        }

        if (marketarray[allinpotionindex] > 0) {

            addfood(allinpotionindex);

        }


        if (marketarray[greensoapindex] > 0) {

            addfood(greensoapindex);

        }

        if (marketarray[soap1index] > 0) {

            addfood(soap1index);

        }
        if (marketarray[soap2index] > 0) {

            addfood(soap2index);

        }
        if (marketarray[pizzaindex] > 0) {

            addfood(pizzaindex);
        }


        if (marketarray[watermelonindex] > 0) {

            addfood(watermelonindex);
        }
        if (marketarray[tomatoindex] > 0) {

            addfood(tomatoindex);
        }
        if (marketarray[pumpkinindex] > 0) {

            addfood(pumpkinindex);
        }
        if (marketarray[peesindex] > 0) {

            addfood(peesindex);
        }
        if (marketarray[kiwiindex] > 0) {

            addfood(kiwiindex);
        }
        if (marketarray[hotdogindex] > 0) {

            addfood(hotdogindex);
        }
        if (marketarray[cornindex] > 0) {

            addfood(cornindex);
        }
        if (marketarray[chilisindex] > 0) {

            addfood(chilisindex);
        }
        if (marketarray[broccoliindex] > 0) {

            addfood(broccoliindex);
        }
        if (marketarray[bananaindex] > 0) {

            addfood(bananaindex);
        }
        if (marketarray[regional1index] > 0) {

            addfood(regional1index);
        }
        if (marketarray[regional2index] > 0) {

            addfood(regional2index);
        }
        if (marketarray[regional3index] > 0) {

            addfood(regional3index);
        }
        if (marketarray[regional4index] > 0) {

            addfood(regional4index);
        }
        if (marketarray[regional5index] > 0) {

            addfood(regional5index);
        }
        if (marketarray[regional6index] > 0) {

            addfood(regional6index);
        }
        if (marketarray[siskebapindex] > 0) {

            addfood(siskebapindex);
        }
        if (marketarray[drinks1index] > 0) {

            addfood(drinks1index);
        }
        if (marketarray[drinks2index] > 0) {

            addfood(drinks2index);
        }
        if (marketarray[drinks3index] > 0) {

            addfood(drinks3index);
        }
        if (marketarray[drinks4index] > 0) {

            addfood(drinks4index);
        }

        if (marketarray[drinks5index] > 0) {

            addfood(drinks5index);
        }
        if (marketarray[drinks6index] > 0) {

            addfood(drinks6index);
        }

        if (marketarray[desert1index] > 0) {

            addfood(desert1index);
        }

        if (marketarray[desert2index] > 0) {

            addfood(desert2index);
        }
        if (marketarray[desert3index] > 0) {

            addfood(desert3index);
        }
        if (marketarray[desert4index] > 0) {

            addfood(desert4index);
        }
        if (marketarray[desert5index] > 0) {

            addfood(desert5index);
        }
        if (marketarray[desert6index] > 0) {

            addfood(desert6index);
        }

        if (marketarray[hamburgerindex] > 0) {

            addfood(hamburgerindex);
        }

        if (marketarray[frenchfriesindex] > 0) {

            addfood(frenchfriesindex);
        }

        if (marketarray[chickenlegindex] > 0) {

            addfood(chickenlegindex);
        }

        if (marketarray[fishindex] > 0) {

            addfood(fishindex);
        }

        if (marketarray[appleindex] > 0) {

            addfood(appleindex);
        }


        if (marketarray[bostonrollindex] > 0) {

            addfood(bostonrollindex);
        }
        if (marketarray[carrotindex] > 0) {

            addfood(carrotindex);
        }


        if (marketarray[frenchtoastindex] > 0) {

            addfood(frenchtoastindex);
        }
        if (marketarray[meatarmindex] > 0) {

            addfood(meatarmindex);
        }
        if (marketarray[medisaladindex] > 0) {

            addfood(medisaladindex);
        }
        if (marketarray[noodleindex] > 0) {

            addfood(noodleindex);
        }


        if (marketarray[mixedsaladindex] > 0) {

            addfood(mixedsaladindex);
        }
        if (marketarray[onionringsindex] > 0) {

            addfood(onionringsindex);
        }

        if (marketarray[orangeindex] > 0) {

            addfood(orangeindex);
        }
        if (marketarray[porkindex] > 0) {

            addfood(porkindex);
        }
        if (marketarray[mixedrollindex] > 0) {

            addfood(mixedrollindex);
        }
        if (marketarray[salmonsushiindex] > 0) {

            addfood(salmonsushiindex);
        }
        if (marketarray[soupindex] > 0) {

            addfood(soupindex);
        }
        if (marketarray[squidindex] > 0) {

            addfood(squidindex);
        }
        if (marketarray[cokeindex] > 0) {

            addfood(cokeindex);
        }
        if (marketarray[brownieindex] > 0) {

            addfood(brownieindex);
        }
        if (marketarray[cheesecakeindex] > 0) {

            addfood(cheesecakeindex);
        }

        if (marketarray[cheeseindex] > 0) {

            addfood(cheeseindex);
        }

        if (marketarray[juiceindex] > 0) {

            addfood(juiceindex);
        }*/


        //appleimg,bostonrollimg,carrotimg,frenchtoastimg,meatarmimg, medisaladimg,noodleimg,mixedsaladimg, onionringsv,orangeimg,porkimg,mixedrollimg, salmonsushiimg,soupimg,squidimg,cokeimg,brownieimg,cheesecakeimg,cheeseimg, juiceimg;
       // final MediaPlayer drink = MediaPlayer.create(getApplicationContext(), R.raw.drink);
        //final MediaPlayer eastsound = MediaPlayer.create(getApplicationContext(), R.raw.eatsound);






        meaticonimg.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {

                ClipData data = ClipData.newPlainText("", "");
                View.DragShadowBuilder shadowBuilder = new View.DragShadowBuilder(v);
                v.startDrag(data, shadowBuilder, v, 0);
                v.setVisibility(View.INVISIBLE);
                return true;
            }
        });


        pizzaimp.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {

                ClipData data = ClipData.newPlainText("", "");
                View.DragShadowBuilder shadowBuilder = new View.DragShadowBuilder(v);
                v.startDrag(data, shadowBuilder, v, 0);
                v.setVisibility(View.INVISIBLE);
                return true;
            }
        });



        hamburgerimg.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {

                ClipData data = ClipData.newPlainText("", "");
                View.DragShadowBuilder shadowBuilder = new View.DragShadowBuilder(v);
                v.startDrag(data, shadowBuilder, v, 0);
                v.setVisibility(View.INVISIBLE);
                return true;
            }
        });

        watermelonimg.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {

                ClipData data = ClipData.newPlainText("", "");
                View.DragShadowBuilder shadowBuilder = new View.DragShadowBuilder(v);
                v.startDrag(data, shadowBuilder, v, 0);
                v.setVisibility(View.INVISIBLE);
                return true;
            }
        });
        tomatoimg.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {

                ClipData data = ClipData.newPlainText("", "");
                View.DragShadowBuilder shadowBuilder = new View.DragShadowBuilder(v);
                v.startDrag(data, shadowBuilder, v, 0);
                v.setVisibility(View.INVISIBLE);
                return true;
            }
        });
        pumpkinimg.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {

                ClipData data = ClipData.newPlainText("", "");
                View.DragShadowBuilder shadowBuilder = new View.DragShadowBuilder(v);
                v.startDrag(data, shadowBuilder, v, 0);
                v.setVisibility(View.INVISIBLE);
                return true;
            }
        });
        peesimg.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {

                ClipData data = ClipData.newPlainText("", "");
                View.DragShadowBuilder shadowBuilder = new View.DragShadowBuilder(v);
                v.startDrag(data, shadowBuilder, v, 0);
                v.setVisibility(View.INVISIBLE);
                return true;
            }
        });
        kiwiimg.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {

                ClipData data = ClipData.newPlainText("", "");
                View.DragShadowBuilder shadowBuilder = new View.DragShadowBuilder(v);
                v.startDrag(data, shadowBuilder, v, 0);
                v.setVisibility(View.INVISIBLE);
                return true;
            }
        });
        hotdogimg.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {

                ClipData data = ClipData.newPlainText("", "");
                View.DragShadowBuilder shadowBuilder = new View.DragShadowBuilder(v);
                v.startDrag(data, shadowBuilder, v, 0);
                v.setVisibility(View.INVISIBLE);
                return true;
            }
        });
        cornimg.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {

                ClipData data = ClipData.newPlainText("", "");
                View.DragShadowBuilder shadowBuilder = new View.DragShadowBuilder(v);
                v.startDrag(data, shadowBuilder, v, 0);
                v.setVisibility(View.INVISIBLE);
                return true;
            }
        });
        cookieimg.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {

                ClipData data = ClipData.newPlainText("", "");
                View.DragShadowBuilder shadowBuilder = new View.DragShadowBuilder(v);
                v.startDrag(data, shadowBuilder, v, 0);
                v.setVisibility(View.INVISIBLE);
                return true;
            }
        });
        chilisimg.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {

                ClipData data = ClipData.newPlainText("", "");
                View.DragShadowBuilder shadowBuilder = new View.DragShadowBuilder(v);
                v.startDrag(data, shadowBuilder, v, 0);
                v.setVisibility(View.INVISIBLE);
                return true;
            }
        });
        broccoliimg.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {

                ClipData data = ClipData.newPlainText("", "");
                View.DragShadowBuilder shadowBuilder = new View.DragShadowBuilder(v);
                v.startDrag(data, shadowBuilder, v, 0);
                v.setVisibility(View.INVISIBLE);
                return true;
            }
        });
        bananaimg.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {

                ClipData data = ClipData.newPlainText("", "");
                View.DragShadowBuilder shadowBuilder = new View.DragShadowBuilder(v);
                v.startDrag(data, shadowBuilder, v, 0);
                v.setVisibility(View.INVISIBLE);
                return true;
            }
        });
        siskebapimg.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {

                ClipData data = ClipData.newPlainText("", "");
                View.DragShadowBuilder shadowBuilder = new View.DragShadowBuilder(v);
                v.startDrag(data, shadowBuilder, v, 0);
                v.setVisibility(View.INVISIBLE);
                return true;
            }
        });
        regional1img.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {

                ClipData data = ClipData.newPlainText("", "");
                View.DragShadowBuilder shadowBuilder = new View.DragShadowBuilder(v);
                v.startDrag(data, shadowBuilder, v, 0);
                v.setVisibility(View.INVISIBLE);
                return true;
            }
        });
        regional2img.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {

                ClipData data = ClipData.newPlainText("", "");
                View.DragShadowBuilder shadowBuilder = new View.DragShadowBuilder(v);
                v.startDrag(data, shadowBuilder, v, 0);
                v.setVisibility(View.INVISIBLE);
                return true;
            }
        });
        regional3img.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {

                ClipData data = ClipData.newPlainText("", "");
                View.DragShadowBuilder shadowBuilder = new View.DragShadowBuilder(v);
                v.startDrag(data, shadowBuilder, v, 0);
                v.setVisibility(View.INVISIBLE);
                return true;
            }
        });


        regional4img.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {

                ClipData data = ClipData.newPlainText("", "");
                View.DragShadowBuilder shadowBuilder = new View.DragShadowBuilder(v);
                v.startDrag(data, shadowBuilder, v, 0);
                v.setVisibility(View.INVISIBLE);
                return true;
            }
        });
        regional5img.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {

                ClipData data = ClipData.newPlainText("", "");
                View.DragShadowBuilder shadowBuilder = new View.DragShadowBuilder(v);
                v.startDrag(data, shadowBuilder, v, 0);
                v.setVisibility(View.INVISIBLE);
                return true;
            }
        });
        regional6img.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {

                ClipData data = ClipData.newPlainText("", "");
                View.DragShadowBuilder shadowBuilder = new View.DragShadowBuilder(v);
                v.startDrag(data, shadowBuilder, v, 0);
                v.setVisibility(View.INVISIBLE);
                return true;
            }
        });


        drinks1img.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {

                ClipData data = ClipData.newPlainText("", "");
                View.DragShadowBuilder shadowBuilder = new View.DragShadowBuilder(v);
                v.startDrag(data, shadowBuilder, v, 0);
                v.setVisibility(View.INVISIBLE);
                return true;
            }
        });
        drinks2img.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {

                ClipData data = ClipData.newPlainText("", "");
                View.DragShadowBuilder shadowBuilder = new View.DragShadowBuilder(v);
                v.startDrag(data, shadowBuilder, v, 0);
                v.setVisibility(View.INVISIBLE);
                return true;
            }
        });
        drinks3img.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {

                ClipData data = ClipData.newPlainText("", "");
                View.DragShadowBuilder shadowBuilder = new View.DragShadowBuilder(v);
                v.startDrag(data, shadowBuilder, v, 0);
                v.setVisibility(View.INVISIBLE);
                return true;
            }
        });


        drinks4img.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {

                ClipData data = ClipData.newPlainText("", "");
                View.DragShadowBuilder shadowBuilder = new View.DragShadowBuilder(v);
                v.startDrag(data, shadowBuilder, v, 0);
                v.setVisibility(View.INVISIBLE);
                return true;
            }
        });
        drinks5img.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {

                ClipData data = ClipData.newPlainText("", "");
                View.DragShadowBuilder shadowBuilder = new View.DragShadowBuilder(v);
                v.startDrag(data, shadowBuilder, v, 0);
                v.setVisibility(View.INVISIBLE);
                return true;
            }
        });
        drinks6img.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {

                ClipData data = ClipData.newPlainText("", "");
                View.DragShadowBuilder shadowBuilder = new View.DragShadowBuilder(v);
                v.startDrag(data, shadowBuilder, v, 0);
                v.setVisibility(View.INVISIBLE);
                return true;
            }
        });


        desert1img.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {

                ClipData data = ClipData.newPlainText("", "");
                View.DragShadowBuilder shadowBuilder = new View.DragShadowBuilder(v);
                v.startDrag(data, shadowBuilder, v, 0);
                v.setVisibility(View.INVISIBLE);
                return true;
            }
        });
        desert2img.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {

                ClipData data = ClipData.newPlainText("", "");
                View.DragShadowBuilder shadowBuilder = new View.DragShadowBuilder(v);
                v.startDrag(data, shadowBuilder, v, 0);
                v.setVisibility(View.INVISIBLE);
                return true;
            }
        });
        desert3img.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {

                ClipData data = ClipData.newPlainText("", "");
                View.DragShadowBuilder shadowBuilder = new View.DragShadowBuilder(v);
                v.startDrag(data, shadowBuilder, v, 0);
                v.setVisibility(View.INVISIBLE);
                return true;
            }
        });


        desert4img.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {

                ClipData data = ClipData.newPlainText("", "");
                View.DragShadowBuilder shadowBuilder = new View.DragShadowBuilder(v);
                v.startDrag(data, shadowBuilder, v, 0);
                v.setVisibility(View.INVISIBLE);
                return true;
            }
        });
        desert5img.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {

                ClipData data = ClipData.newPlainText("", "");
                View.DragShadowBuilder shadowBuilder = new View.DragShadowBuilder(v);
                v.startDrag(data, shadowBuilder, v, 0);
                v.setVisibility(View.INVISIBLE);
                return true;
            }
        });
        desert6img.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {

                ClipData data = ClipData.newPlainText("", "");
                View.DragShadowBuilder shadowBuilder = new View.DragShadowBuilder(v);
                v.startDrag(data, shadowBuilder, v, 0);
                v.setVisibility(View.INVISIBLE);
                return true;
            }
        });

        sleeppotionimg.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {

                ClipData data = ClipData.newPlainText("", "");
                View.DragShadowBuilder shadowBuilder = new View.DragShadowBuilder(v);
                v.startDrag(data, shadowBuilder, v, 0);
                v.setVisibility(View.INVISIBLE);
                return true;
            }
        });


        hungerpotionimg.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {

                ClipData data = ClipData.newPlainText("", "");
                View.DragShadowBuilder shadowBuilder = new View.DragShadowBuilder(v);
                v.startDrag(data, shadowBuilder, v, 0);
                v.setVisibility(View.INVISIBLE);
                return true;
            }
        });

        hygienepotionimg.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {

                ClipData data = ClipData.newPlainText("", "");
                View.DragShadowBuilder shadowBuilder = new View.DragShadowBuilder(v);
                v.startDrag(data, shadowBuilder, v, 0);
                v.setVisibility(View.INVISIBLE);
                return true;
            }
        });

        lovepotionimg.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {

                ClipData data = ClipData.newPlainText("", "");
                View.DragShadowBuilder shadowBuilder = new View.DragShadowBuilder(v);
                v.startDrag(data, shadowBuilder, v, 0);
                v.setVisibility(View.INVISIBLE);
                return true;
            }
        });

        gamepotionimg.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {

                ClipData data = ClipData.newPlainText("", "");
                View.DragShadowBuilder shadowBuilder = new View.DragShadowBuilder(v);
                v.startDrag(data, shadowBuilder, v, 0);
                v.setVisibility(View.INVISIBLE);
                return true;
            }
        });


        allinpotionimg.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {

                ClipData data = ClipData.newPlainText("", "");
                View.DragShadowBuilder shadowBuilder = new View.DragShadowBuilder(v);
                v.startDrag(data, shadowBuilder, v, 0);
                v.setVisibility(View.INVISIBLE);
                return true;
            }
        });

        greensoapimg.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {

                ClipData data = ClipData.newPlainText("", "");
                View.DragShadowBuilder shadowBuilder = new View.DragShadowBuilder(v);
                v.startDrag(data, shadowBuilder, v, 0);
                v.setVisibility(View.INVISIBLE);
                return true;
            }
        });



        soap1img.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {

                ClipData data = ClipData.newPlainText("", "");
                View.DragShadowBuilder shadowBuilder = new View.DragShadowBuilder(v);
                v.startDrag(data, shadowBuilder, v, 0);
                v.setVisibility(View.INVISIBLE);
                return true;
            }
        });
        soap2img.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {

                ClipData data = ClipData.newPlainText("", "");
                View.DragShadowBuilder shadowBuilder = new View.DragShadowBuilder(v);
                v.startDrag(data, shadowBuilder, v, 0);
                v.setVisibility(View.INVISIBLE);
                return true;
            }
        });

        cellspongeimg.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {

                ClipData data = ClipData.newPlainText("", "");
                View.DragShadowBuilder shadowBuilder = new View.DragShadowBuilder(v);
                v.startDrag(data, shadowBuilder, v, 0);
                v.setVisibility(View.INVISIBLE);
                return true;
            }
        });
        darkspongeimg.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {

                ClipData data = ClipData.newPlainText("", "");
                View.DragShadowBuilder shadowBuilder = new View.DragShadowBuilder(v);
                v.startDrag(data, shadowBuilder, v, 0);
                v.setVisibility(View.INVISIBLE);
                return true;
            }
        });
        seaspongeimg.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {

                ClipData data = ClipData.newPlainText("", "");
                View.DragShadowBuilder shadowBuilder = new View.DragShadowBuilder(v);
                v.startDrag(data, shadowBuilder, v, 0);
                v.setVisibility(View.INVISIBLE);
                return true;
            }
        });




        frenchfriesimg.setOnTouchListener(new View.OnTouchListener() {
                @Override
                public boolean onTouch(View v, MotionEvent event) {

                    ClipData data = ClipData.newPlainText("", "");
                    View.DragShadowBuilder shadowBuilder = new View.DragShadowBuilder(v);
                    v.startDrag(data, shadowBuilder, v, 0);
                    v.setVisibility(View.INVISIBLE);
                    frenchfriesflag = true;
                    // frenchfriesimg.setEnabled(false
                    return true;

                }
            });

        chickenlegimg.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {

                ClipData data = ClipData.newPlainText("", "");
                View.DragShadowBuilder shadowBuilder = new View.DragShadowBuilder(v);
                v.startDrag(data, shadowBuilder, v, 0);
                v.setVisibility(View.INVISIBLE);
                return true;
            }
        });


        fishimg.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {

                ClipData data = ClipData.newPlainText("", "");
                View.DragShadowBuilder shadowBuilder = new View.DragShadowBuilder(v);
                v.startDrag(data, shadowBuilder, v, 0);
                v.setVisibility(View.INVISIBLE);
                return true;
            }
        });

        appleimg.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {

                ClipData data = ClipData.newPlainText("", "");
                View.DragShadowBuilder shadowBuilder = new View.DragShadowBuilder(v);
                v.startDrag(data, shadowBuilder, v, 0);
                v.setVisibility(View.INVISIBLE);
                return true;
            }
        });

        bostonrollimg.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {

                ClipData data = ClipData.newPlainText("", "");
                View.DragShadowBuilder shadowBuilder = new View.DragShadowBuilder(v);
                v.startDrag(data, shadowBuilder, v, 0);
                v.setVisibility(View.INVISIBLE);
                return true;
            }
        });

        carrotimg.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {

                ClipData data = ClipData.newPlainText("", "");
                View.DragShadowBuilder shadowBuilder = new View.DragShadowBuilder(v);
                v.startDrag(data, shadowBuilder, v, 0);
                v.setVisibility(View.INVISIBLE);
                return true;
            }
        });

        frenchtoastimg.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {

                ClipData data = ClipData.newPlainText("", "");
                View.DragShadowBuilder shadowBuilder = new View.DragShadowBuilder(v);
                v.startDrag(data, shadowBuilder, v, 0);
                v.setVisibility(View.INVISIBLE);
                return true;
            }
        });

        meatarmimg.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {

                ClipData data = ClipData.newPlainText("", "");
                View.DragShadowBuilder shadowBuilder = new View.DragShadowBuilder(v);
                v.startDrag(data, shadowBuilder, v, 0);
                v.setVisibility(View.INVISIBLE);
                return true;
            }
        });

        medisaladimg.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {

                ClipData data = ClipData.newPlainText("", "");
                View.DragShadowBuilder shadowBuilder = new View.DragShadowBuilder(v);
                v.startDrag(data, shadowBuilder, v, 0);
                v.setVisibility(View.INVISIBLE);
                return true;
            }
        });

        noodleimg.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {

                ClipData data = ClipData.newPlainText("", "");
                View.DragShadowBuilder shadowBuilder = new View.DragShadowBuilder(v);
                v.startDrag(data, shadowBuilder, v, 0);
                v.setVisibility(View.INVISIBLE);
                return true;
            }
        });

        mixedsaladimg.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {

                ClipData data = ClipData.newPlainText("", "");
                View.DragShadowBuilder shadowBuilder = new View.DragShadowBuilder(v);
                v.startDrag(data, shadowBuilder, v, 0);
                v.setVisibility(View.INVISIBLE);
                return true;
            }
        });

        onionringimg.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {

                ClipData data = ClipData.newPlainText("", "");
                View.DragShadowBuilder shadowBuilder = new View.DragShadowBuilder(v);
                v.startDrag(data, shadowBuilder, v, 0);
                v.setVisibility(View.INVISIBLE);
                return true;
            }
        });

        orangeimg.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {

                ClipData data = ClipData.newPlainText("", "");
                View.DragShadowBuilder shadowBuilder = new View.DragShadowBuilder(v);
                v.startDrag(data, shadowBuilder, v, 0);
                v.setVisibility(View.INVISIBLE);
                return true;
            }
        });

        porkimg.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {

                ClipData data = ClipData.newPlainText("", "");
                View.DragShadowBuilder shadowBuilder = new View.DragShadowBuilder(v);
                v.startDrag(data, shadowBuilder, v, 0);
                v.setVisibility(View.INVISIBLE);
                return true;
            }
        });

        mixedrollimg.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {

                ClipData data = ClipData.newPlainText("", "");
                View.DragShadowBuilder shadowBuilder = new View.DragShadowBuilder(v);
                v.startDrag(data, shadowBuilder, v, 0);
                v.setVisibility(View.INVISIBLE);
                return true;
            }
        });

        salmonsushiimg.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {

                ClipData data = ClipData.newPlainText("", "");
                View.DragShadowBuilder shadowBuilder = new View.DragShadowBuilder(v);
                v.startDrag(data, shadowBuilder, v, 0);
                v.setVisibility(View.INVISIBLE);
                return true;
            }
        });

        soupimg.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {

                ClipData data = ClipData.newPlainText("", "");
                View.DragShadowBuilder shadowBuilder = new View.DragShadowBuilder(v);
                v.startDrag(data, shadowBuilder, v, 0);
                v.setVisibility(View.INVISIBLE);
                return true;
            }
        });

        squidimg.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {

                ClipData data = ClipData.newPlainText("", "");
                View.DragShadowBuilder shadowBuilder = new View.DragShadowBuilder(v);
                v.startDrag(data, shadowBuilder, v, 0);
                v.setVisibility(View.INVISIBLE);
                return true;
            }
        });


        cokeimg.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {

                ClipData data = ClipData.newPlainText("", "");
                View.DragShadowBuilder shadowBuilder = new View.DragShadowBuilder(v);
                v.startDrag(data, shadowBuilder, v, 0);
                v.setVisibility(View.INVISIBLE);
                return true;
            }
        });

        brownieimg.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {

                ClipData data = ClipData.newPlainText("", "");
                View.DragShadowBuilder shadowBuilder = new View.DragShadowBuilder(v);
                v.startDrag(data, shadowBuilder, v, 0);
                v.setVisibility(View.INVISIBLE);
                return true;
            }
        });


        cheesecakeimg.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {

                ClipData data = ClipData.newPlainText("", "");
                View.DragShadowBuilder shadowBuilder = new View.DragShadowBuilder(v);
                v.startDrag(data, shadowBuilder, v, 0);
                v.setVisibility(View.INVISIBLE);
                return true;
            }
        });

        cheeseimg.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {

                ClipData data = ClipData.newPlainText("", "");
                View.DragShadowBuilder shadowBuilder = new View.DragShadowBuilder(v);
                v.startDrag(data, shadowBuilder, v, 0);
                v.setVisibility(View.INVISIBLE);
                return true;
            }
        });

        juiceimg.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {

                ClipData data = ClipData.newPlainText("", "");
                View.DragShadowBuilder shadowBuilder = new View.DragShadowBuilder(v);
                v.startDrag(data, shadowBuilder, v, 0);
                v.setVisibility(View.INVISIBLE);
                return true;
            }
        });


        //appleimg,bostonrollimg,carrotimg,frenchtoastimg,meatarmimg, medisaladimg,noodleimg,mixedsaladimg, onionringsv,orangeimg,porkimg,mixedrollimg, salmonsushiimg,soupimg,squidimg,cokeimg,brownieimg,cheesecakeimg,cheeseimg, juiceimg;

       // final  TextView lovetext = (TextView) findViewById(R.id.editText8);


        final RelativeLayout circle1 = (RelativeLayout) findViewById(R.id.circle1);
        final RelativeLayout circle2 = (RelativeLayout) findViewById(R.id.circle2);
        final RelativeLayout circle3 = (RelativeLayout) findViewById(R.id.circle3);
        final RelativeLayout circle4 = (RelativeLayout) findViewById(R.id.circle4);
        final RelativeLayout circle5 = (RelativeLayout) findViewById(R.id.circle5);

        circle1.setSoundEffectsEnabled(false);
        circle2.setSoundEffectsEnabled(false);
        circle3.setSoundEffectsEnabled(false);
        circle4.setSoundEffectsEnabled(false);
        circle5.setSoundEffectsEnabled(false);


        circle1.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if(!mutestate[0])
                    soundPool.play(soundID, volume, volume, 1, 0, 1f);
                mode[0] = kitchencount;
                setbuttonstatus();
                segmentkitchen.setAlpha(1f);
                if (showrateflag) showRateDialogForRate(x);
            }
        });



        circle2.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if(!mutestate[0])
                    soundPool.play(soundID, volume, volume, 1, 0, 1f);
                mode[0] = hygienecount;
                setbuttonstatus();
                segmenthygiene.setAlpha(1f);
                if (showrateflag) showRateDialogForRate(x);
            }
        });

        circle3.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if(!mutestate[0])
                    soundPool.play(soundID, volume, volume, 1, 0, 1f);
                mode[0] = kidneycount;
                setbuttonstatus();
                segmentwc.setAlpha(1f);
                if (showrateflag) showRateDialogForRate(x);
            }
        });

        circle4.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if(!mutestate[0])
                    soundPool.play(soundID, volume, volume, 1, 0, 1f);
                mode[0] = sleepcnt;
                setbuttonstatus();
                segmentbedroom.setAlpha(1f);
                if (showrateflag) showRateDialogForRate(x);
            }
        });

        circle5.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if(!mutestate[0])
                    soundPool.play(soundID, volume, volume, 1, 0, 1f);
                mode[0] = gamecount;
                setbuttonstatus();
                segmentgameroom.setAlpha(1f);
                if (showrateflag) showRateDialogForRate(x);
            }
        });





        segmentkitchen.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        //ImageButton view = (ImageButton) v;



                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        segmentkitchen.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:


                        if(!mutestate[0])
                            soundPool.play(soundID, volume, volume, 1, 0, 1f);
                        mode[0] = kitchencount;
                        setbuttonstatus();
                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        segmentkitchen.setAlpha(1f);
                        if (showrateflag) showRateDialogForRate(x);

                       // segmentkitchen.setTextColor(Color.RED);
                       // segmenthygiene.setTextColor(Color.argb(255,158,158,158));
                       // segmentbedroom.setTextColor(Color.argb(255, 158, 158, 158));
                       // segmentgameroom.setTextColor(Color.argb(255, 158, 158, 158));
                       // segmentwc.setTextColor(Color.argb(255, 158, 158, 158));

                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });



        segmentbedroom.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        //ImageButton view = (ImageButton) v;



                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        segmentbedroom.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:

                        if(!mutestate[0])
                            soundPool.play(soundID, volume, volume, 1, 0, 1f);
                       // scroll.setHorizontalScrollBarEnabled(false);
                        mode[0] = sleepcnt;
                        setbuttonstatus();
                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        segmentbedroom.setAlpha(1f);
                      //  x
                        if (showrateflag) showRateDialogForRate(x);
                       // segmenthygiene.setTextColor(Color.argb(255, 158, 158, 158));
                       // segmentkitchen.setTextColor(Color.argb(255, 158, 158, 158));
                       // segmentgameroom.setTextColor(Color.argb(255, 158, 158, 158));
                       // segmentwc.setTextColor(Color.argb(255, 158, 158, 158));




                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });


        segmenthygiene.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        //ImageButton view = (ImageButton) v;



                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        segmenthygiene.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:
                        if(!mutestate[0])
                            soundPool.play(soundID, volume, volume, 1, 0, 1f);
                        mode[0] = hygienecount;
                        setbuttonstatus();
                        if (showrateflag) showRateDialogForRate(x);
                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        segmenthygiene.setAlpha(1f);
                      //  scroll.setHorizontalScrollBarEnabled(false);
                      //  segmenthygiene.setTextColor(Color.RED);
                       // segmentbedroom.setTextColor(Color.argb(255, 158, 158, 158));
                       // segmentkitchen.setTextColor(Color.argb(255, 158, 158, 158));
                       // segmentgameroom.setTextColor(Color.argb(255, 158, 158, 158));
                       // segmentwc.setTextColor(Color.argb(255, 158, 158, 158));


                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });



        segmentgameroom.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        //ImageButton view = (ImageButton) v;


                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        segmentgameroom.setAlpha(BALPHA);
                        // segmenthygiene.setTextColor(Color.argb(255, 158, 158, 158));
                        //segmentkitchen.setTextColor(Color.argb(255, 158, 158, 158));
                        //segmentbedroom.setTextColor(Color.argb(255, 158, 158, 158));
                        //segmentwc.setTextColor(Color.argb(255, 158, 158, 158));


                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:


                       // showad();

                        if(!mutestate[0])
                            soundPool.play(soundID, volume, volume, 1, 0, 1f);
                        mode[0] = gamecount;
                      //  scroll.setHorizontalScrollBarEnabled(true);


                        if (showrateflag) showRateDialogForRate(x);
                        setbuttonstatus();
                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        segmentgameroom.setAlpha(1f);
                        // segmentgameroom.setTextColor(Color.RED);

                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });

        segmentwc.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        //ImageButton view = (ImageButton) v;


                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        segmentwc.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:
                        if(!mutestate[0])
                            soundPool.play(soundID, volume, volume, 1, 0, 1f);
                       // eyesrejectanimation();
                        //eyescircleanimation();
                       // scroll.setHorizontalScrollBarEnabled(false);
                        mode[0] = kidneycount;
                        setbuttonstatus();
                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        segmentwc.setAlpha(1f);
                        if (showrateflag) showRateDialogForRate(x);
                        // segmentwc.setTextColor(Color.RED);

                        // segmenthygiene.setTextColor(Color.argb(255, 158, 158, 158));
                        // segmentkitchen.setTextColor(Color.argb(255, 158, 158, 158));
                        // segmentgameroom.setTextColor(Color.argb(255, 158, 158, 158));
                        // segmentbedroom.setTextColor(Color.argb(255, 158, 158, 158));


                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });


  // final MediaPlayer mpwakeup22 = MediaPlayer.create(getApplicationContext(), R.raw.wakeup);















        setbuttonstatus();
      //
        TextView twarning = (TextView) findViewById(R.id.textView871);

        twarning.setText("Your overall evergy below %20. Feed and Love " + CharacterName);


        final Button buttonok = (Button) findViewById(R.id.button361);
        final RelativeLayout warningrelative= (RelativeLayout) findViewById(R.id.gameenergywarning);
        lin = (FrameLayout) findViewById(R.id.yigit );
        //lin.setOnDragListener(myOnDragListener);


        sortingbtn.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {

                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        sortingbtn.setAlpha(BALPHA);
                        v.invalidate();
                        disableallchild.setVisibility(View.VISIBLE);
                        break;
                    }
                    case MotionEvent.ACTION_UP:

                        if(!mutestate[0])
                            soundPool.play(soundID, volume, volume, 1, 0, 1f);
                        if (sleepbuttonpressed[0] == true) {
                            button_sbm4.setBackgroundResource(R.mipmap.wakeup);


                            SleepStatus = 0;
                            sleepbuttonpressed[0] = false;
                            if(!mutestate[0])
                                soundPool7wakeup.play(soundID7, volume, volume, 1, 0, 1f);
                            increment3(cfour, process[3], process[3] + 1, 3);
                            closeeyes(false);
                            sleepcover(false);
                        }
                        if(gamestar>0&& mProgressStatus[0]>20) {
                            sortgame();
                            disableallchild.setVisibility(View.INVISIBLE);
                        }
                        else if (gamestar <= 0 ) {
                            disablegamebtns();
                            coinwarning.setVisibility(View.VISIBLE);
                            final Animation shake = AnimationUtils.loadAnimation(x, R.anim.lefttoright);
                            disableallchild.setVisibility(View.VISIBLE);
                            shake.setDuration(SLIDEANIMDUR);
                            coinwarning.setAnimation(shake);
                            final MediaPlayer clickaudio2 = MediaPlayer.create(getApplicationContext(), R.raw.popupsound);
                            if(!mutestate[0]) {
                                clickaudio2.start();
                                clickaudio2.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                                    public void onCompletion(MediaPlayer mp) {
                                        clickaudio2.release();

                                    }

                                    ;
                                });
                            }
                        }
                        else if ( mProgressStatus[0]<=20)

                        {disablegamebtns();
                            warningrelative.setVisibility(View.VISIBLE);
                            final Animation shake = AnimationUtils.loadAnimation(x, R.anim.lefttoright);
                            disableallchild.setVisibility(View.VISIBLE);
                            shake.setDuration(SLIDEANIMDUR);
                            warningrelative.setAnimation(shake);
                            final MediaPlayer clickaudio2 = MediaPlayer.create(getApplicationContext(), R.raw.popupsound);
                            if(!mutestate[0]) {
                                clickaudio2.start();
                                clickaudio2.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                                    public void onCompletion(MediaPlayer mp) {
                                        clickaudio2.release();

                                    }

                                    ;
                                });
                            }


                        }
                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        sortingbtn.setAlpha(1f);


                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });




        opgamebtn.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {

                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        opgamebtn.setAlpha(BALPHA);
                        v.invalidate();
                        disableallchild.setVisibility(View.VISIBLE);
                        break;
                    }
                    case MotionEvent.ACTION_UP:
                        if(!mutestate[0])
                            soundPool.play(soundID, volume, volume, 1, 0, 1f);
                        if (sleepbuttonpressed[0] == true) {
                            button_sbm4.setBackgroundResource(R.mipmap.wakeup);


                            SleepStatus = 0;
                            sleepbuttonpressed[0] = false;

                            if(!mutestate[0])
                            soundPool7wakeup.play(soundID7, volume, volume, 1, 0, 1f);
                            increment3(cfour, process[3], process[3] + 1, 3);
                            closeeyes(false);
                            sleepcover(false);
                        }
                        if(gamestar>0 && mProgressStatus[0]>20) {
                            showZaire();
                            disableallchild.setVisibility(View.INVISIBLE);
                        }
                        else if (gamestar <= 0 ) {coinwarning.setVisibility(View.VISIBLE);
                        final Animation shake = AnimationUtils.loadAnimation(x, R.anim.lefttoright);
                            disableallchild.setVisibility(View.VISIBLE);
                            disablegamebtns();
                            final MediaPlayer clickaudio2 = MediaPlayer.create(getApplicationContext(), R.raw.popupsound);
                            if(!mutestate[0]) {
                                clickaudio2.start();
                                clickaudio2.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                                    public void onCompletion(MediaPlayer mp) {
                                        clickaudio2.release();

                                    }

                                    ;
                                });
                            }
                        shake.setDuration(SLIDEANIMDUR);
                        coinwarning.setAnimation(shake);}
                        else if ( mProgressStatus[0]<=20 )

                        {
                            warningrelative.setVisibility(View.VISIBLE);
                            final Animation shake = AnimationUtils.loadAnimation(x, R.anim.lefttoright);
                            disableallchild.setVisibility(View.VISIBLE);
                            shake.setDuration(SLIDEANIMDUR);
                            disablegamebtns();
                            warningrelative.setAnimation(shake);
                            final MediaPlayer clickaudio2 = MediaPlayer.create(getApplicationContext(), R.raw.popupsound);
                            if(!mutestate[0]) {
                                clickaudio2.start();
                                clickaudio2.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                                    public void onCompletion(MediaPlayer mp) {
                                        clickaudio2.release();

                                    }

                                    ;
                                });
                            }

                        }


                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        opgamebtn.setAlpha(1f);


                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });

        colorbtn.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {

                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        colorbtn.setAlpha(BALPHA);
                        v.invalidate();
                        disableallchild.setVisibility(View.VISIBLE);
                        break;
                    }
                    case MotionEvent.ACTION_UP:
                        if(!mutestate[0])
                            soundPool.play(soundID, volume, volume, 1, 0, 1f);
                        if (sleepbuttonpressed[0] == true) {
                            button_sbm4.setBackgroundResource(R.mipmap.wakeup);


                            SleepStatus = 0;
                            sleepbuttonpressed[0] = false;
                            if(!mutestate[0])
                                soundPool7wakeup.play(soundID, volume, volume, 1, 0, 1f);
                            increment3(cfour, process[3], process[3] + 1, 3);
                            closeeyes(false);
                            sleepcover(false);
                        }
                        if(gamestar>0 && mProgressStatus[0]>20)
                        {coldec();

                            disableallchild.setVisibility(View.INVISIBLE);}
                        else if (gamestar <= 0 ) {coinwarning.setVisibility(View.VISIBLE);
                            final Animation shake = AnimationUtils.loadAnimation(x, R.anim.lefttoright);
                            disableallchild.setVisibility(View.VISIBLE);
                            disablegamebtns();
                            final MediaPlayer clickaudio2 = MediaPlayer.create(getApplicationContext(), R.raw.popupsound);
                            if(!mutestate[0]) {
                                clickaudio2.start();
                                clickaudio2.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                                    public void onCompletion(MediaPlayer mp) {
                                        clickaudio2.release();

                                    }

                                    ;
                                });
                            }
                            shake.setDuration(SLIDEANIMDUR);
                            coinwarning.setAnimation(shake);}
                        else if ( mProgressStatus[0]<=20 )

                        {

                            warningrelative.setVisibility(View.VISIBLE);
                            final Animation shake = AnimationUtils.loadAnimation(x, R.anim.lefttoright);
                            disableallchild.setVisibility(View.VISIBLE);
                            shake.setDuration(SLIDEANIMDUR);
                            disablegamebtns();
                            warningrelative.setAnimation(shake);
                            final MediaPlayer clickaudio2 = MediaPlayer.create(getApplicationContext(), R.raw.popupsound);
                            if(!mutestate[0]) {
                                clickaudio2.start();
                                clickaudio2.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                                    public void onCompletion(MediaPlayer mp) {
                                        clickaudio2.release();

                                    }

                                    ;
                                });
                            }

                        }

                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        colorbtn.setAlpha(1f);


                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });

        memorybtn.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {

                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        memorybtn.setAlpha(BALPHA);
                        disableallchild.setVisibility(View.VISIBLE);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:
                        if(!mutestate[0])
                            soundPool.play(soundID, volume, volume, 1, 0, 1f);

                        if (sleepbuttonpressed[0] == true) {
                            button_sbm4.setBackgroundResource(R.mipmap.wakeup);


                            SleepStatus = 0;
                            sleepbuttonpressed[0] = false;
                            if(!mutestate[0])
                                soundPool7wakeup.play(soundID7, volume, volume, 1, 0, 1f);
                            increment3(cfour, process[3], process[3] + 1, 3);
                            closeeyes(false);
                            sleepcover(false);
                        }


                        if (gamestar > 0 && mProgressStatus[0] > 20) {
                            disableallchild.setVisibility(View.INVISIBLE);
                            memgame();
                        } else if (gamestar <= 0) {coinwarning.setVisibility(View.VISIBLE);
                            final Animation shake = AnimationUtils.loadAnimation(x, R.anim.lefttoright);
                            disableallchild.setVisibility(View.VISIBLE);
                            disablegamebtns();
                            final MediaPlayer clickaudio2 = MediaPlayer.create(getApplicationContext(), R.raw.popupsound);
                            if(!mutestate[0]) {
                                clickaudio2.start();
                                clickaudio2.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                                    public void onCompletion(MediaPlayer mp) {
                                        clickaudio2.release();

                                    }

                                    ;
                                });
                            }
                            disablegamebtns();
                            shake.setDuration(SLIDEANIMDUR);
                            coinwarning.setAnimation(shake);}
                        else if (mProgressStatus[0] <= 20)

                        {

                            warningrelative.setVisibility(View.VISIBLE);
                            final Animation shake = AnimationUtils.loadAnimation(x, R.anim.lefttoright);
                            disableallchild.setVisibility(View.VISIBLE);
                            shake.setDuration(SLIDEANIMDUR);
                            disablegamebtns();
                            warningrelative.setAnimation(shake);
                            final MediaPlayer clickaudio2 = MediaPlayer.create(getApplicationContext(), R.raw.popupsound);
                            if(!mutestate[0]) {
                                clickaudio2.start();
                                clickaudio2.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                                    public void onCompletion(MediaPlayer mp) {
                                        clickaudio2.release();

                                    }

                                    ;
                                });
                            }


                        }


                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        memorybtn.setAlpha(1f);


                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });

        disableallchild.setVisibility(View.VISIBLE);

        new CountDownTimer(1000, 100) {

            public void onTick(long millisUntilFinished) {

                //here you can have your logic to set text to edittext
            }

            public void onFinish() {
                disableallchild.setVisibility(View.INVISIBLE);
            }

        }.start();




        colorpickbtn.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {

                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        colorpickbtn.setAlpha(BALPHA);
                        v.invalidate();
                        disableallchild.setVisibility(View.VISIBLE);
                        break;
                    }
                    case MotionEvent.ACTION_UP:
                        if(!mutestate[0])
                            soundPool.play(soundID, volume, volume, 1, 0, 1f);

                        if (sleepbuttonpressed[0] == true) {
                            button_sbm4.setBackgroundResource(R.mipmap.wakeup);


                            SleepStatus = 0;
                            sleepbuttonpressed[0] = false;
                            if(!mutestate[0])
                                soundPool7wakeup.play(soundID7, volume, volume, 1, 0, 1f);
                            increment3(cfour, process[3], process[3] + 1, 3);
                            closeeyes(false);
                            sleepcover(false);
                        }


                        if (gamestar > 0 && mProgressStatus[0] > 20)
                        {colorpickgame();
                            disableallchild.setVisibility(View.INVISIBLE);}
                        else if (gamestar <= 0) {coinwarning.setVisibility(View.VISIBLE);
                            final Animation shake = AnimationUtils.loadAnimation(x, R.anim.lefttoright);
                            disableallchild.setVisibility(View.VISIBLE);
                            disablegamebtns();
                            final MediaPlayer clickaudio2 = MediaPlayer.create(getApplicationContext(), R.raw.popupsound);
                            if(!mutestate[0]) {
                                clickaudio2.start();
                                clickaudio2.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                                    public void onCompletion(MediaPlayer mp) {
                                        clickaudio2.release();

                                    }

                                    ;
                                });
                            }
                            shake.setDuration(SLIDEANIMDUR);
                            coinwarning.setAnimation(shake);}
                        else if (mProgressStatus[0] <= 20)

                        {

                            warningrelative.setVisibility(View.VISIBLE);
                            final Animation shake = AnimationUtils.loadAnimation(x, R.anim.lefttoright);
                            disableallchild.setVisibility(View.VISIBLE);
                            disablegamebtns();
                            shake.setDuration(SLIDEANIMDUR);
                            warningrelative.setAnimation(shake);
                            final MediaPlayer clickaudio2 = MediaPlayer.create(getApplicationContext(), R.raw.popupsound);
                            if(!mutestate[0]) {
                                clickaudio2.start();
                                clickaudio2.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                                    public void onCompletion(MediaPlayer mp) {
                                        clickaudio2.release();

                                    }

                                    ;
                                });
                            }


                        }

                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        colorpickbtn.setAlpha(1f);


                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });








        buttonok.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {

                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        buttonok.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:
                        if(!mutestate[0])
                            soundPool.play(soundID, volume, volume, 1, 0, 1f);



                        final Animation shake = AnimationUtils.loadAnimation(x, R.anim.righttoleft);
                        disableallchild.setVisibility(View.INVISIBLE);
                        shake.setDuration(SLIDEANIMDUR);
                        pluscoinlayout9();
                        warningrelative.setAnimation(shake);
                        coinbackpressflag = true;
                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        buttonok.setAlpha(1f);


                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });


        View.OnTouchListener handleTouchsimp = new View.OnTouchListener() {

            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {

                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        simplicitybtn.setAlpha(BALPHA);
                        v.invalidate();
                        disableallchild.setVisibility(View.VISIBLE);
                        break;
                    }
                    case MotionEvent.ACTION_UP:
                        if(!mutestate[0])
                            soundPool.play(soundID, volume, volume, 1, 0, 1f);
                        if (sleepbuttonpressed[0] == true) {
                            button_sbm4.setBackgroundResource(R.mipmap.wakeup);


                            SleepStatus = 0;
                            sleepbuttonpressed[0] = false;
                            if(!mutestate[0])
                                soundPool7wakeup.play(soundID7, volume, volume, 1, 0, 1f);
                            increment3(cfour, process[3], process[3] + 1, 3);
                            closeeyes(false);
                            sleepcover(false);
                        }
                        if (gamestar > 0 && mProgressStatus[0] > 20) {

                            simpgame();
                        } else if (gamestar <= 0) {coinwarning.setVisibility(View.VISIBLE);
                            final Animation shake = AnimationUtils.loadAnimation(x, R.anim.lefttoright);
                            disableallchild.setVisibility(View.VISIBLE);
                            final MediaPlayer clickaudio2 = MediaPlayer.create(getApplicationContext(), R.raw.popupsound);
                            if(!mutestate[0]) {
                                clickaudio2.start();
                                clickaudio2.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                                    public void onCompletion(MediaPlayer mp) {
                                        clickaudio2.release();

                                    }

                                    ;
                                });
                            }
                            shake.setDuration(SLIDEANIMDUR);
                            coinwarning.setAnimation(shake);}
                        else if (mProgressStatus[0] <= 20)

                        {

                            warningrelative.setVisibility(View.VISIBLE);
                            final Animation shake = AnimationUtils.loadAnimation(x, R.anim.lefttoright);
                            disableallchild.setVisibility(View.VISIBLE);
                            shake.setDuration(SLIDEANIMDUR);
                            warningrelative.setAnimation(shake);
                            final MediaPlayer clickaudio2 = MediaPlayer.create(getApplicationContext(), R.raw.popupsound);
                            if(!mutestate[0]) {
                                clickaudio2.start();
                                clickaudio2.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                                    public void onCompletion(MediaPlayer mp) {
                                        clickaudio2.release();

                                    }

                                    ;
                                });
                            }


                        }

                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        simplicitybtn.setAlpha(1f);


                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        };

       // simplicitybtn.setOnTouchListener(handleTouchsimp);
        simplicitybtn.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {

                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        simplicitybtn.setAlpha(BALPHA);
                        v.invalidate();

                        disableallchild.setVisibility(View.VISIBLE);
                        break;
                    }
                    case MotionEvent.ACTION_UP:

                        if(!mutestate[0])
                            soundPool.play(soundID, volume, volume, 1, 0, 1f);
                        if (sleepbuttonpressed[0] == true) {
                            button_sbm4.setBackgroundResource(R.mipmap.wakeup);


                            SleepStatus = 0;
                            sleepbuttonpressed[0] = false;
                            if(!mutestate[0])
                                soundPool7wakeup.play(soundID7, volume, volume, 1, 0, 1f);
                            increment3(cfour, process[3], process[3] + 1, 3);
                            closeeyes(false);
                            sleepcover(false);
                        }
                        if (gamestar > 0 && mProgressStatus[0] > 20) {

                            disableallchild.setVisibility(View.INVISIBLE);
                            simpgame();
                        } else if (gamestar <= 0) {coinwarning.setVisibility(View.VISIBLE);
                            final Animation shake = AnimationUtils.loadAnimation(x, R.anim.lefttoright);
                            disableallchild.setVisibility(View.VISIBLE);
                            disablegamebtns();
                            final MediaPlayer clickaudio2 = MediaPlayer.create(getApplicationContext(), R.raw.popupsound);
                            if(!mutestate[0]) {
                                clickaudio2.start();
                                clickaudio2.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                                    public void onCompletion(MediaPlayer mp) {
                                        clickaudio2.release();

                                    }

                                    ;
                                });
                            }
                            shake.setDuration(SLIDEANIMDUR);
                            coinwarning.setAnimation(shake);}
                        else if (mProgressStatus[0] <= 20)

                        {
                            disablegamebtns();
                            warningrelative.setVisibility(View.VISIBLE);
                            final Animation shake = AnimationUtils.loadAnimation(x, R.anim.lefttoright);
                            disableallchild.setVisibility(View.VISIBLE);
                            shake.setDuration(SLIDEANIMDUR);
                            warningrelative.setAnimation(shake);
                            final MediaPlayer clickaudio2 = MediaPlayer.create(getApplicationContext(), R.raw.popupsound);
                            if(!mutestate[0]) {
                                clickaudio2.start();
                                clickaudio2.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                                    public void onCompletion(MediaPlayer mp) {
                                        clickaudio2.release();

                                    }

                                    ;
                                });
                            }


                        }


                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        simplicitybtn.setAlpha(1f);


                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });


        final TextView textv = (TextView) findViewById(R.id.textView4);



        final int Heightscreen =  getWindowManager().getDefaultDisplay().getHeight();

        //textv.setText(Float.toString(rx) + "  " +  Float.toString(Heightscreen)+ " " + density1);



        heartratet2 = (TextView) findViewById(R.id.editText2);

        reset = AnimationUtils.loadAnimation(GameforActivity.this, R.anim.slowdown);
        heartimage = (ImageView) findViewById(R.id.testImage);
        pulse2 = AnimationUtils.loadAnimation(GameforActivity.this, R.anim.scale2);
        pulse = AnimationUtils.loadAnimation(this,  R.anim.scale);



        heartbeat();




   /*     final ImageView zoomTarget = (ImageView) findViewById(R.id.testImage); // create heart image
        final ObjectAnimator scaleXAnimator = ObjectAnimator.ofFloat(zoomTarget, "scaleX", 0.85f); // set x scale for the heart animation

        scaleXAnimator.setRepeatMode(ValueAnimator.REVERSE);

        scaleXAnimator.setRepeatCount(1000000); // set animation count

        scaleXAnimator.setDuration(1000); // set the heart animation rate

        final ObjectAnimator scaleYAnimator = ObjectAnimator.ofFloat(zoomTarget, "scaleY", 0.85f); // set y scale for the heart animation

        scaleYAnimator.setRepeatMode(ValueAnimator.REVERSE);

        scaleYAnimator.setRepeatCount(1000000);

        scaleYAnimator.setDuration(1000);

        scaleXAnimator.addListener(new Animator.AnimatorListener() {
            @Override
            public void onAnimationStart(Animator animator) {

                int y;

                if (heart_speed[0] >= 500 && heart_speed[0] < 750) RPM = 85 + i1;
                else if (heart_speed[0] >= 0 && heart_speed[0] < 500) RPM = 90 + i1;
                else if (heart_speed[0] >= 750 && heart_speed[0] < 1000) RPM = 80 + i1;
                else if (heart_speed[0] >= 1000 && heart_speed[0] < 1200) RPM = 75 + i1;
                else if (heart_speed[0] >= 1200 && heart_speed[0] < 1500) RPM = 70 + i1;
                else if (heart_speed[0] >= 1500 && heart_speed[0] < 1800) RPM = 65 + i1;
                else if (heart_speed[0] >= 1800 && heart_speed[0] < 2000) RPM = 60 + i1;


                else RPM = 55;
                final Random r1 = new Random();
                final int i2 = (r1.nextInt(5) + 0);
                t2.setText(Integer.toString(RPM + i2)); // set random variable for RPM
            }

            @Override
            public void onAnimationEnd(Animator animator) {
                //t1.setText(Integer.toString(heart_speed[0]));
            }

            @Override
            public void onAnimationCancel(Animator animator) {

            }

            @Override
            public void onAnimationRepeat(Animator animator) {


                if (mProgressStatus[0] < 200 && mProgressStatus[0] > 80) {
//
//					scaleXAnimator.setDuration(2000);
                    scaleXAnimator.setDuration(1000);
                    heart_speed[0] = 1000;
//					t2.setText(Integer.toString(75));
                } else if (mProgressStatus[0] <= 80 && mProgressStatus[0] > 70) {

                    scaleXAnimator.setDuration(1200);
                    heart_speed[0] = 1200;


                } else if (mProgressStatus[0] <= 70 && mProgressStatus[0] > 60) {

                    scaleXAnimator.setDuration(1500);
                    heart_speed[0] = 1500;


                } else if (mProgressStatus[0] <= 60 && mProgressStatus[0] > 50) {

                    scaleXAnimator.setDuration(1800);
                    heart_speed[0] = 1800;


                } else if (mProgressStatus[0] <= 50 && mProgressStatus[0] > 30) {

                    scaleXAnimator.setDuration(1999);
                    heart_speed[0] = 1999;


                } else {

                    scaleXAnimator.setDuration(2200);
                    heart_speed[0] = 2200;
                }

                SharedPreferences pref;
                pref = getSharedPreferences("info", MODE_PRIVATE);
                final SharedPreferences.Editor editor = pref.edit();


                if (heart_speed[0] >= 500 && heart_speed[0] < 750) RPM = 85 + i1;
                else if (heart_speed[0] >= 0 && heart_speed[0] < 500) RPM = 90 + i1;
                else if (heart_speed[0] >= 750 && heart_speed[0] < 1000) RPM = 80 + i1;
                else if (heart_speed[0] >= 1000 && heart_speed[0] < 1200) RPM = 75 + i1;
                else if (heart_speed[0] >= 1200 && heart_speed[0] < 1500) RPM = 70 + i1;
                else if (heart_speed[0] >= 1500 && heart_speed[0] < 1800) RPM = 65 + i1;
                else if (heart_speed[0] >= 1800 && heart_speed[0] < 2000) RPM = 60 + i1;


                else RPM = 55;
                final Random r1 = new Random();
                final int i2 = (r1.nextInt(5) + 0);
                t2.setText(Integer.toString(RPM + i2));


            }
        });
        scaleYAnimator.addListener(new Animator.AnimatorListener() {
            @Override
            public void onAnimationStart(Animator animator) {

                int y;
                //Random r = new Random();

                //int i1 = (r.nextInt(10) + 0);
                if (heart_speed[0] >= 500 && heart_speed[0] < 750) RPM = 85 + i1;
                else if (heart_speed[0] >= 0 && heart_speed[0] < 500) RPM = 90 + i1;
                else if (heart_speed[0] >= 750 && heart_speed[0] < 1000) RPM = 80 + i1;
                else if (heart_speed[0] >= 1000 && heart_speed[0] < 1200) RPM = 75 + i1;
                else if (heart_speed[0] >= 1200 && heart_speed[0] < 1500) RPM = 70 + i1;
                else if (heart_speed[0] >= 1500 && heart_speed[0] < 1800) RPM = 65 + i1;
                else if (heart_speed[0] >= 1800 && heart_speed[0] < 2000) RPM = 60 + i1;


                else RPM = 55;
                //final Random r1 = new Random();
                //final int i2 = (r1.nextInt(3) + 0);
                t2.setText(Integer.toString(RPM));
            }

            @Override
            public void onAnimationEnd(Animator animator) {
                //t1.setText(Integer.toString(heart_speed[0]));
            }

            @Override
            public void onAnimationCancel(Animator animator) {

            }

            @Override
            public void onAnimationRepeat(Animator animator) {
                if (mProgressStatus[0] < 200 && mProgressStatus[0] > 80) {
//
//					scaleXAnimator.setDuration(2000);
                    scaleYAnimator.setDuration(1000);
                    heart_speed[0] = 1000;
//					t2.setText(Integer.toString(75));
                } else if (mProgressStatus[0] <= 80 && mProgressStatus[0] > 70) {

                    scaleYAnimator.setDuration(1200);
                    heart_speed[0] = 1200;


                } else if (mProgressStatus[0] <= 70 && mProgressStatus[0] > 60) {

                    scaleYAnimator.setDuration(1500);
                    heart_speed[0] = 1500;


                } else if (mProgressStatus[0] <= 60 && mProgressStatus[0] > 50) {

                    scaleYAnimator.setDuration(1800);
                    heart_speed[0] = 1800;


                } else if (mProgressStatus[0] <= 50 && mProgressStatus[0] > 30) {

                    scaleYAnimator.setDuration(1999);
                    heart_speed[0] = 1999;


                } else {

                    scaleYAnimator.setDuration(2200);
                    heart_speed[0] = 2200;
                }


                if (heart_speed[0] >= 500 && heart_speed[0] < 750) RPM = 85 + i1;
                else if (heart_speed[0] >= 0 && heart_speed[0] < 500) RPM = 90 + i1;
                else if (heart_speed[0] >= 750 && heart_speed[0] < 1000) RPM = 80 + i1;
                else if (heart_speed[0] >= 1000 && heart_speed[0] < 1200) RPM = 75 + i1;
                else if (heart_speed[0] >= 1200 && heart_speed[0] < 1500) RPM = 70 + i1;
                else if (heart_speed[0] >= 1500 && heart_speed[0] < 1800) RPM = 65 + i1;
                else if (heart_speed[0] >= 1800 && heart_speed[0] < 2000) RPM = 60 + i1;


                else RPM = 55;
                final Random r1 = new Random();
                final int i2 = (r1.nextInt(5) + 0);
                t2.setText(Integer.toString(RPM + i2));
            }

        });





        set = new AnimatorSet();
        set.playSequentially();
        set.playTogether(scaleXAnimator, scaleYAnimator);
        set.start();*/

        final int[] hygiene_counter={ 1};
        CountDownTimer count;
        final boolean functionCalledRecently = false;

        Random r1 = new Random();
        Random r2 = new Random();
        Random r3 = new Random();
        Random r4 = new Random();

        int min1 = 1;
        int max1 = 99;
        int rand1 = r1.nextInt((max1 - min1) + 1) + min1;
        int rand2 = r1.nextInt((max1 - min1) + 1) + min1;
        int rand3 = r3.nextInt((max1 - min1) + 1) + min1;
        int rand4 = r3.nextInt((max1 - min1) + 1) + min1;


        //final TextView tt1= (TextView) findViewById(R.id.textView51);
        //tt1.setText("+50");
        final TextView xu = (TextView) findViewById(R.id.textcoin);

        if(isplustencoin==true  ) {
            pluscoin2(10);

/*
                if (vibration==true & mutestate[0] ==false) shownotificationloyalty();
                else if (vibration==false & mutestate[0] ==false) shownotificationloyaltynovibs();
                else if (vibration==false & mutestate[0] ==true) shownotificationloyaltynovibsnosound();
                else if (vibration==true & mutestate[0] ==true) shownotificationloyaltynosound();

*/



        }
       /* {

            tt1.setVisibility(View.VISIBLE);
            xu.setVisibility(View.INVISIBLE);
            new CountDownTimer(5000, 1000) {
                public void onTick(long milsec) {

                }

                public void onFinish() {

                    coin[0] = coin[0] + 10;

                    tt1.setVisibility(View.INVISIBLE);
                    xu.setVisibility(View.VISIBLE);
                    isplustencoin=false;
                    xu.setText(Integer.toString(coin[0]));
                }
            }.start();
        }
*/
      /*  new CountDownTimer(4000, 1000) {

            public void onTick(long millisUntilFinished) {
                if (adviewflag) loadads2();
            }

            public void onFinish() {

            }

        }.start();*/
        hygiene_counter[0] =originalcounter;

        final long[] seconds={0};
        count = new CountDownTimer(1000000000, 1000) {


            @Override
            public void onTick(long l) {

                Random r = new Random();
                randomi3 = (r.nextInt(3) +0 );


               // if(!mobInterstitial2.isReady())
                //    mobInterstitial2.load();

                braincounter++;

                if(iq<4) braintimer = 12;
                else if (iq>4 && iq< 8) braintimer = 8;

                else braintimer = 4;

                if(braincounter % braintimer == 0)

                {


                    final ImageView imagebrain = (ImageView) findViewById(R.id.testImagebrain);
                    final ImageView imagebrain2 = (ImageView) findViewById(R.id.testImagebrain);
                    final ObjectAnimator scaleXAnimator2 = ObjectAnimator.ofFloat(imagebrain, "scaleX", 1.15f); // set x scale for the heart animation
                    scaleXAnimator2.setRepeatMode(ValueAnimator.REVERSE);
                    scaleXAnimator2.setRepeatCount(1); // set animation count
                    scaleXAnimator2.setDuration(1000); // set the heart animation rate
                    final ObjectAnimator scaleYAnimator2 = ObjectAnimator.ofFloat(imagebrain, "scaleY", 1.15f); // set y scale for the heart animation
                    scaleYAnimator2.setRepeatMode(ValueAnimator.REVERSE);
                    scaleYAnimator2.setRepeatCount(1);
                    scaleYAnimator2.setDuration(1000);
                    final AnimatorSet setbrain = new AnimatorSet();


                    final ObjectAnimator scaleXAnimator3 = ObjectAnimator.ofFloat(imagebrain2, "scaleX", 1.15f); // set x scale for the heart animation
                    scaleXAnimator3.setRepeatMode(ValueAnimator.REVERSE);
                    scaleXAnimator3.setRepeatCount(1); // set animation count
                    scaleXAnimator3.setDuration(1000); // set the heart animation rate
                    final ObjectAnimator scaleYAnimator3 = ObjectAnimator.ofFloat(imagebrain2, "scaleY", 1.15f); // set y scale for the heart animation
                    scaleYAnimator3.setRepeatMode(ValueAnimator.REVERSE);
                    scaleYAnimator3.setRepeatCount(1);
                    scaleYAnimator3.setDuration(1000);
                    final AnimatorSet setbrain2 = new AnimatorSet();


                    setbrain.playSequentially();
                    setbrain.playTogether(scaleXAnimator2, scaleYAnimator2);
                    setbrain.start();



                    setbrain2.playSequentially();
                    setbrain2.playTogether(scaleXAnimator3, scaleYAnimator3);
                    setbrain2.start();

                }



                int hour = Calendar.getInstance().get(Calendar.HOUR_OF_DAY);
                int minutes = Calendar.getInstance().get(Calendar.MINUTE);
                int sec = Calendar.getInstance().get(Calendar.SECOND);

                editor.putInt("loyaltyhours", hour);
                editor.putInt("loyaltyminutes", minutes);
                editor.putInt("loyaltyseconds", sec);

                editor.commit();
                TextView t22 = (TextView) findViewById(R.id.textView2);
                lock();
                addfunction();
                //double y = process[0] * (0.30) + process[1] * (0.1) + process[3] * (0.30) + process[2] * (0.1) + process[4] * (0.1) + process[5] * (0.1);
                //int x = (int) y;

                final long utcOffset = TimeZone.getDefault().getOffset(System.currentTimeMillis());
                final long DAY_IN_MILLIS = 24*60*60;
                final long DAY_IN_MILLIS2 =24*60*60;
                seconds[0] = System.currentTimeMillis()/1000 + utcOffset/1000;
                //seconds[0] = System.currentTimeMillis()/1000;

                seconds[0]= seconds[0]% DAY_IN_MILLIS    ;
                seconds[0]= seconds[0]% DAY_IN_MILLIS2;


                //t22.setText(Long.toString(seconds[0]));
                if(seconds[0]==0) {

                    pluscoin2(10);



                  /*  if( notification==true)



                    {
                        if (vibration==true & mutestate[0] ==false) shownotificationloyalty();
                        else if (vibration==false & mutestate[0] ==false) shownotificationloyaltynovibs();
                        else if (vibration==false & mutestate[0] ==true) shownotificationloyaltynovibsnosound();
                        else if (vibration==true & mutestate[0] ==true) shownotificationloyaltynosound();
                    }*/


                }
                //hygiene_counter[0] = hygiene_counter[0] + diffcount[0];
                hygiene_counter[0]++;
                originalcounterhunger++;
                        originalcounterhygiene++;
                originalcounterwc++;
                        originalcountersleep++;
                originalcounterlove++;



                SharedPreferences pref;
                pref = getSharedPreferences("info", MODE_PRIVATE);
//Using putXXX - with XXX is type data you want to write like: putString, putInt...   from      Editor object
                final SharedPreferences.Editor editor = pref.edit();


                int hycounter=hygiene_counter[0];


                gamestar =shared1.getInt("gamestar", gamestar);
                //gamestar =shared1.getInt("coin", gamestar);


                editor.putInt("originalcounterhunger",originalcounterhunger);
                editor.putInt("originalcounterhygiene",originalcounterhygiene);
                editor.putInt("originalcounterwc",originalcounterwc);
                editor.putInt("originalcountersleep",originalcountersleep);
                editor.putInt("originalcounterlove",originalcounterlove);
                editor.putInt("originalcounter",hycounter);

                editor.commit();
               // gamestarcounter[0]=gamestarcounter[0]+diffcount[0]; //initialize counter
               // gamestarcounter[0] = shared1.getInt("gamestarcounter", gamestarcounter[0]);

               // gamestarcounter[0] = shared1.getInt("gamestarcounter", gamestarcounter[0]);
               boolean sifirla = shared1.getBoolean("sifirla", false);
                if(sifirla) {gamestarcounter[0] = 0; sifirla = false;
                    editor.putBoolean("sifirla",sifirla);

                    editor.commit();

                }
                gamestarcounter[0]++;
                //Log.d("TimerExample", "Going for... " + gamestarcounter[0]);
                int gcounter=gamestarcounter[0];
                long time2= System.currentTimeMillis();
                time2 = time2/1000; // in minutes
                editor.putLong("time2", time2);
                editor.putLong("time", time2);
                editor.putLong("lastplaytime",time2);
                editor.putInt("gamestarcounter", gcounter);
                editor.commit();


                checkcoinshop();

               // TextView t = (TextView) findViewById(R.id.textcoin);
               // t.setText(Integer.toString(coin[0]));


                checkoverall();
                TextView newlifetimer= (TextView) findViewById(R.id.textView47);



                int gamecount= gamewaittime-(gamestarcounter[0]%gamewaittime);

                if(gamecount%60 <10) newlifetimer.setText(Integer.toString(gamecount/60) + ":0" +Integer.toString( gamecount%60));
                else newlifetimer.setText(Integer.toString(gamecount/60) + ":" +Integer.toString( gamecount%60));

               // debug2.setText(Integer.toString(gamecount/60) + ":" +Integer.toString( gamecount%60));
               if(checkgamestar(gamestarcounter[0]))

               {
                   if (gamestar <MAXGAMEPLAY)
                   gamestar++;

                 //  debug.setText(Integer.toString(gamestar));
                   gamestarcounter[0]=0;
                   //TextView t1t = (TextView) findViewById(R.id.textView13);

                   //t1t.setText(Integer.toString(gamestar));
                    editor.putInt("gamestar",gamestar);
                   editor.commit();
                  /* ImageView starimg = (ImageView) findViewById(R.id.starzimg);
                   if(gamestar==0)starimg.setImageDrawable(getResources().getDrawable(R.mipmap.heartzero));
                   else if(gamestar==1)starimg.setImageDrawable(getResources().getDrawable(R.mipmap.heartone));
                   else if(gamestar==2)starimg.setImageDrawable(getResources().getDrawable(R.mipmap.hearttwo));
                   else if(gamestar==3)starimg.setImageDrawable(getResources().getDrawable(R.mipmap.heartthree));
                   else if(gamestar==4)starimg.setImageDrawable(getResources().getDrawable(R.mipmap.heart4));
                   else if(gamestar==5)starimg.setImageDrawable(getResources().getDrawable(R.mipmap.heartfive));*/


                   //TextView gamestartext = (TextView) findViewById(R.id.gamestar);
                   //gamestartext.setText(  Integer.toString(gamestar));

               }

                if(iq<51) hungerspeed = BELOW50HUNGER;
                else if(iq>50  && iq<101) hungerspeed = ABOVE50HUNGER;
                else hungerspeed = ABOVE100HUNGER;

                if(iq<51) hygienespeed = BELOW50HYGIENE;
                else if(iq>50  && iq<101) hygienespeed = ABOVE50HYGIENE;
                else hygienespeed = ABOVE100HYGIENE;


                if(iq<51) wcspeed = BELOW50WC;
                else if(iq>50  && iq<101) wcspeed = ABOVE50WC;
                else wcspeed = ABOVE100WC;


                if(sleepbuttonpressed[0] == false) {
                    if (iq < 51) sleepspeed = BELOW50SLEEP;
                    else if (iq > 50 && iq < 101) sleepspeed = ABOVE50SLEEP;
                    else sleepspeed = ABOVE100SLEEP;
                }
                else
                {
                    if (iq < 51) sleepspeed = BELOW50NONSLEEP;
                    else if (iq > 50 && iq < 101) sleepspeed = ABOVE50NONSLEEP;
                    else sleepspeed = ABOVE100NONSLEEP;
                }


                if(iq<51) lovespeed = BELOW50LOVE;
                else if(iq>50  && iq<101) lovespeed = ABOVE50SLOVE;
                else lovespeed = ABOVE100LOVE;



                if(checkccount(originalcounterhunger,hungerspeed))

                {
                    incrementeat(c1, process[0], process[0] - 1, 0);
                    originalcounterhunger = 0;
                    editor.putInt("originalcounterhunger",0);
                    editor.commit();

                    editor.putInt("procss0key", process[0]);
                    editor.commit();
                    checkoverall();
                }
                if(checkccount(originalcounterhygiene,hygienespeed))

                {
                    increment(c2, process[1], process[1] - 1, 1);
                    originalcounterhygiene = 0;
                    editor.putInt("originalcounterhygiene",0);
                    editor.commit();

                    editor.putInt("procss1key", process[1]);
                    editor.commit();
                    checkoverall();
                }
                if(checkccount(originalcounterwc,wcspeed))

                {
                    increment2(c3, process[2], process[2] - 1, 2);
                    originalcounterwc = 0;
                    editor.putInt("originalcounterwc",0);
                    editor.commit();

                    editor.putInt("procss2key", process[2]);
                    editor.commit();
                    checkoverall();
                }

                if(checkccount(originalcountersleep,sleepspeed))

                {

                    if(sleepbuttonpressed[0]==true) {
                        increment3(cfour, process[3], process[3] + 1, 5);

                    }
                    else {
                        increment3(cfour, process[3], process[3] - 1, 5);

                    }

                    originalcountersleep = 0;
                    editor.putInt("originalcountersleep",0);
                    editor.commit();

                    editor.putInt("procss3key", process[3]);
                    editor.commit();
                    checkoverall();
                }

                if(checkccount(originalcounterlove,lovespeed))

                {
                    increment4(csix, process[5], process[5] - 1, 5);
                    originalcounterlove = 0;
                    editor.putInt("originalcounterlove",0);
                    editor.commit();

                    editor.putInt("procss5key", process[5]);
                    editor.commit();
                    checkoverall();
                }



                if(checkccount(hygiene_counter[0],hygienespeed))

                {

                }


                editor.putInt("procss0key", process[0]);
                editor.putInt("procss1key", process[1]);
                editor.putInt("procss2key", process[2]);
                editor.putInt("procss3key", process[3]);
                editor.putInt("procss4key", process[4]);
                editor.putInt("procss5key", process[5]);
                editor.commit();

                //mProgressStatus[0] = x;
                //TextView name1 = (TextView) findViewById(R.id.name);
                //mProgress.setProgress(x);
                //name1.setText(Long.toString(x));

            }
            @Override
            public void onFinish() {
                //functionCalledRecently = false;
            }
        }.start();


       // pluscoin2(10);
        final MediaPlayer mpwakeup = MediaPlayer.create(getApplicationContext(), R.raw.wakeup);
       final MediaPlayer mp5 = MediaPlayer.create(getApplicationContext(), R.raw.eating2);
    //    soupbutton.setOnLongClickListener(myOnLongClickListener);

        final Button watchvideo2 =(Button) findViewById(R.id.imageView35);
        final Button cancelcoinwarning =(Button) findViewById(R.id.imageView34);
        final RelativeLayout shopframe2 = (RelativeLayout) findViewById(R.id.market);
        final Button potionswarningbtn =(Button) findViewById(R.id.potionsbutton2);



        TextView t46 = (TextView) findViewById(R.id.textView46);
        TextView t47 = (TextView) findViewById(R.id.textView47);
        TextView t48 = (TextView) findViewById(R.id.textView48);
        TextView t49 = (TextView) findViewById(R.id.textView49);
        TextView t50 = (TextView) findViewById(R.id.textView50);
        Typeface tflat = Typeface.createFromAsset(getAssets(), "sans.ttf");
        t46.setTypeface(tflat);
        t47.setTypeface(tflat);
        t48.setTypeface(tflat);
        t49.setTypeface(tflat);
        t50.setTypeface(tflat);
        watchvideo2.setTypeface(tflat);
        potionswarningbtn.setTypeface(tflat);


     /*   AdColonyInterstitialListener listener = new AdColonyInterstitialListener()
        {
            @Override
            public void onRequestFilled( AdColonyInterstitial ad )
            {
                adcolonyad = ad;
                //ad.show();
            }
        };

        AdColony.requestInterstitial( "vz46a980f592794521af", listener );*/


        watchvideo2.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        watchvideo2.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:

                        if(!mutestate[0])
                            soundPool.play(soundID, volume, volume, 1, 0, 1f);
                        if(mobInterstitial2.isReady())
                    {

                        showad2();
                        gamestarflag = true;
                        final Animation shake = AnimationUtils.loadAnimation(x, R.anim.righttoleft);
                        disableallchild.setVisibility(View.INVISIBLE);

                        coinbackpressflag = true;


                        new CountDownTimer(3000, 1000) {

                            public void onTick(long millisUntilFinished) {

                            }

                            public void onFinish() {

                                shake.setDuration(SLIDEANIMDUR);
                                coinwarning.setAnimation(shake);
                                plusonelife();
                            }

                        }.start();



                     /*   coinwarning.setVisibility(View.INVISIBLE);
                        gamestarflag = true;



                        gamestar++;
                        if (gamestar > MAXGAMEPLAY) gamestar = MAXGAMEPLAY;
                        final Animation shake = AnimationUtils.loadAnimation(x, R.anim.righttoleft);
                        disableallchild.setVisibility(View.INVISIBLE);
                        shake.setDuration(SLIDEANIMDUR);
                        coinwarning.setAnimation(shake);
                        plusonelife();
                        gamestarflag = false;
                        editor.putInt("gamestar", gamestar);
                        editor.commit();*/
                    }

                       /* else if(ad != null && adcolonyloaded) {

                            videogo = false;
                            ad.show();


                            final Animation shake = AnimationUtils.loadAnimation(x, R.anim.righttoleft);
                            disableallchild.setVisibility(View.INVISIBLE);




                            new CountDownTimer(3000, 1000) {

                                public void onTick(long millisUntilFinished) {

                                }

                                public void onFinish() {

                                    shake.setDuration(SLIDEANIMDUR);
                                    coinwarning.setAnimation(shake);
                                    plusonelife();
                                }

                            }.start();


                        }*/
                          else
                          {
                             // AdColony.requestInterstitial( ZONE_ID, listener, ad_options );
                              mobInterstitial2.load();
                              noadsalert();
                          }

                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        watchvideo2.setAlpha(1f);
                        videogo = false;

                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });




        potionswarningbtn.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        potionswarningbtn.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:
                        if(!mutestate[0])
                            soundPool.play(soundID, volume, volume, 1, 0, 1f);
                        Drawable x = getResources().getDrawable(R.mipmap.sborder1);
                        headermenu.setBackground(x);
                        buycoingbutton.setBackground(x);

                        if (gamelang == ENGLISH)  Menutext.setText("POTIONS");
                        else if (gamelang == TURKISH)  Menutext.setText("İKSİRLER");
                        else if (gamelang == FRENCH)  Menutext.setText("POTIONS");
                        else if (gamelang == SPANISH) Menutext.setText("POCIONES");
                        else if (gamelang == RUSSIAN) Menutext.setText("ЗЕЛЬЕ");
                        else if (gamelang == CHINESE) Menutext.setText("中文");
                        else if (gamelang == JAPANESE) Menutext.setText("薬");
                        else if (gamelang == SPANISH) Menutext.setText("POTION");


                        else   Menutext.setText("POTIONS");
                        STATE = MENU;

                        shopframe2.setVisibility(View.VISIBLE);
                        coinwarning.setVisibility(View.INVISIBLE);
                        potionslayout.setVisibility(View.VISIBLE);
                        mealstofood.setVisibility(View.VISIBLE);
                        foodmenulayout.setVisibility(View.INVISIBLE);

                       // fastfoodframe.setVisibility(View.INVISIBLE);

                        veggiesmenulayout.setVisibility(View.INVISIBLE);
                        fruitsmenulayout.setVisibility(View.INVISIBLE);
                        regionalmenulayout.setVisibility(View.INVISIBLE);
                        desertsmenumenulayut.setVisibility(View.INVISIBLE);
                        drinksmenulayout.setVisibility(View.INVISIBLE);
                        cleaninglayout.setVisibility(View.INVISIBLE);

                        desertsmenumenulayut.setVisibility(View.INVISIBLE);

                        veggiesmenulayout.setVisibility(View.INVISIBLE);

                        fruitsmenulayout.setVisibility(View.INVISIBLE);
                        regionalmenulayout.setVisibility(View.INVISIBLE);
                        drinksmenulayout.setVisibility(View.INVISIBLE);





                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        potionswarningbtn.setAlpha(1f);


                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });


        cancelcoinwarning.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        cancelcoinwarning.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:
                        if(!mutestate[0])
                            soundPool.play(soundID, volume, volume, 1, 0, 1f);

                        //pluscoinlayout2.setVisibility(View.INVISIBLE);
                        final Animation shake = AnimationUtils.loadAnimation(x, R.anim.righttoleft);

                        coinbackpressflag = true;

                        editor.putBoolean("zerogamestar", false);
                        editor.commit();

                        disableallchild.setVisibility(View.INVISIBLE);
                        shake.setDuration(SLIDEANIMDUR);
                        coinwarning.setAnimation(shake);

                        pluscoinlayout3();



                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        cancelcoinwarning.setAlpha(1f);

                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });


        final MediaPlayer mp = MediaPlayer.create(getApplicationContext(), R.raw.shower_1);



        button_sbm2.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                ClipData data = ClipData.newPlainText("", "");
                View.DragShadowBuilder shadowBuilder = new View.DragShadowBuilder(v);
                v.startDrag(data, shadowBuilder, v, 0);
                v.setVisibility(View.INVISIBLE);
                return true;
            }

        });

        final MediaPlayer cancel = MediaPlayer.create(getApplicationContext(), R.raw.cancel);




        washhandbutton.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        washhandbutton.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:


                        if ( process[1] >99)

                        {
                            final MediaPlayer clickaudio2 = MediaPlayer.create(getApplicationContext(), R.raw.cancel);
                            if(!mutestate[0]) {
                                clickaudio2.start();
                                clickaudio2.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                                    public void onCompletion(MediaPlayer mp) {
                                        clickaudio2.release();

                                    }

                                    ;
                                });
                            }
                            eyesrejectanimation();
                            if (vibration ==true)
                                vibrate(200);

                        }


                        else {


                            if(!mutestate[0])
                                soundPool2.play(soundID2, volume, volume, 1, 0, 1f);

                           if(washhandflag && process[2]>99) {
                               increment(c2, process[1], process[1] + 15, 1);
                               washhandflag = false;
                               editor.putBoolean("washhandflag",washhandflag);
                               editor.commit();
                           }
                            else
                               increment(c2, process[1], process[1] + 2, 1);
                        }
                        if (sleepbuttonpressed[0] == true) {
                            button_sbm4.setBackgroundResource(R.mipmap.wakeup);


                            SleepStatus = 0;
                            sleepbuttonpressed[0] = false;
                            if(!mutestate[0])
                                soundPool7wakeup.play(soundID7, volume, volume, 1, 0, 1f);
                            increment3(cfour, process[3], process[3] + 1, 3);
                            closeeyes(false);
                            sleepcover(false);
                        }

                        checkoverall();
                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        washhandbutton.setAlpha(1f);

                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });




        button_sbm3.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        button_sbm3.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:


                        if ( process[2] >99)

                        {
                            final MediaPlayer clickaudio2 = MediaPlayer.create(getApplicationContext(), R.raw.cancel);
                            if(!mutestate[0]) {
                                clickaudio2.start();
                                clickaudio2.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                                    public void onCompletion(MediaPlayer mp) {
                                        clickaudio2.release();

                                    }

                                    ;
                                });
                            }
                            eyesrejectanimation();
                            if (vibration ==true)
                            vibrate(200);

                        }


                        else {
                            if (!mutestate[0]) soundPool4.play(soundID4, volume, volume, 1, 0, 1f);
                            washhandflag = true;
                            editor.putBoolean("washhandflag",washhandflag);
                            editor.commit();
                            increment2(c3, process[2], 100, 2);
                            originalcounterwc=0;
                            increment(c2, process[1], process[1] - 10, 1);
                        }



                        if (sleepbuttonpressed[0] == true) {
                            button_sbm4.setBackgroundResource(R.mipmap.wakeup);
                            lamp1.setBackgroundResource(R.mipmap.lampon);
                            lamp2.setBackgroundResource(R.mipmap.lampon);

                            SleepStatus = 0;
                            sleepbuttonpressed[0] = false;
                            if(!mutestate[0])
                                soundPool7wakeup.play(soundID7, volume, volume, 1, 0, 1f);
                            increment3(cfour, process[3], process[3] + 1, 3);
                            closeeyes(false);
                            sleepcover(false);
                        }

                        checkoverall();
                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        button_sbm3.setAlpha(1f);

                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });

        final MediaPlayer mp2 = MediaPlayer.create(getApplicationContext(), R.raw.sleep);



        if ( sleepbuttonpressed[0]==true) {

            button_sbm4.setBackgroundResource(R.mipmap.sleep);
            lamp1.setBackgroundResource(R.mipmap.lampoff);
            lamp2.setBackgroundResource(R.mipmap.lampoff);
            sleepcover(true);
            closeeyes(true);
        } else

        {

            button_sbm4.setBackgroundResource(R.mipmap.wakeup);
            lamp1.setBackgroundResource(R.mipmap.lampon);
            lamp2.setBackgroundResource(R.mipmap.lampon);
            sleepcover(false);
            closeeyes(false);
        }


        lamp2.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        lamp2.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:


                        if (sleepbuttonpressed[0] == false) {

                            button_sbm4.setBackgroundResource(R.mipmap.sleep);
                            lamp1.setBackgroundResource(R.mipmap.lampoff);
                            lamp2.setBackgroundResource(R.mipmap.lampoff);
                            sleepcover(true);
                            SleepStatus = 1;
                            sleepbuttonpressed[0] = true;
                            //sleeplayout.setVisibility(View.VISIBLE);
                            closeeyes(true);
                            final MediaPlayer clickaudio2 = MediaPlayer.create(getApplicationContext(), R.raw.sleep);
                            if(!mutestate[0]) {
                                clickaudio2.start();
                                clickaudio2.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                                    public void onCompletion(MediaPlayer mp) {
                                        clickaudio2.release();

                                    }

                                    ;
                                });
                            }

                        } else

                        {


                            button_sbm4.setBackgroundResource(R.mipmap.wakeup);
                            lamp1.setBackgroundResource(R.mipmap.lampon);
                            lamp2.setBackgroundResource(R.mipmap.lampon);
                            SleepStatus = 0;
                            sleepbuttonpressed[0] = false;
                            sleepcover(false);
                            if(!mutestate[0])
                                soundPool7wakeup.play(soundID7, volume, volume, 1, 0, 1f);
                            closeeyes(false);


                        }
                        checkoverall();
                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        lamp2.setAlpha(1f);

                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });
        lamp1.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        button_sbm4.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:


                        if (sleepbuttonpressed[0] == false) {

                            button_sbm4.setBackgroundResource(R.mipmap.sleep);
                            lamp1.setBackgroundResource(R.mipmap.lampoff);
                            lamp2.setBackgroundResource(R.mipmap.lampoff);
                            sleepcover(true);
                            SleepStatus = 1;
                            sleepbuttonpressed[0] = true;
                            //sleeplayout.setVisibility(View.VISIBLE);
                            closeeyes(true);
                            final MediaPlayer clickaudio2 = MediaPlayer.create(getApplicationContext(), R.raw.sleep);
                            if(!mutestate[0]) {
                                clickaudio2.start();
                                clickaudio2.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                                    public void onCompletion(MediaPlayer mp) {
                                        clickaudio2.release();

                                    }

                                    ;
                                });
                            }

                        } else

                        {


                            button_sbm4.setBackgroundResource(R.mipmap.wakeup);
                            lamp1.setBackgroundResource(R.mipmap.lampon);
                            lamp2.setBackgroundResource(R.mipmap.lampon);
                            SleepStatus = 0;
                            sleepbuttonpressed[0] = false;
                            sleepcover(false);
                            if(!mutestate[0])
                                soundPool7wakeup.play(soundID7, volume, volume, 1, 0, 1f);
                            closeeyes(false);


                        }
                        checkoverall();
                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        button_sbm4.setAlpha(1f);

                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });



        button_sbm4.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        button_sbm4.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:


                        if (sleepbuttonpressed[0] == false) {

                            button_sbm4.setBackgroundResource(R.mipmap.sleep);
                            lamp1.setBackgroundResource(R.mipmap.lampoff);
                            lamp2.setBackgroundResource(R.mipmap.lampoff);
                            sleepcover(true);
                            SleepStatus = 1;
                            sleepbuttonpressed[0] = true;
                            //sleeplayout.setVisibility(View.VISIBLE);
                            closeeyes(true);
                            final MediaPlayer clickaudio2 = MediaPlayer.create(getApplicationContext(), R.raw.sleep);
                            if(!mutestate[0]) {
                                clickaudio2.start();
                                clickaudio2.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                                    public void onCompletion(MediaPlayer mp) {
                                        clickaudio2.release();

                                    }

                                    ;
                                });
                            }

                        } else

                        {


                            button_sbm4.setBackgroundResource(R.mipmap.wakeup);
                            lamp1.setBackgroundResource(R.mipmap.lampon);
                            lamp2.setBackgroundResource(R.mipmap.lampon);
                            SleepStatus = 0;
                            sleepbuttonpressed[0] = false;
                            sleepcover(false);
                            if(!mutestate[0])
                                soundPool7wakeup.play(soundID7, volume, volume, 1, 0, 1f);
                            closeeyes(false);


                        }
                        checkoverall();
                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        button_sbm4.setAlpha(1f);

                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });





        righteyelid.setVisibility(View.INVISIBLE);
        righteyelidback.setVisibility(View.INVISIBLE);
        righteyelidbtm.setVisibility(View.INVISIBLE);
        feyes.setVisibility(View.INVISIBLE);
        fbottom.setVisibility(View.INVISIBLE);
        freyes.setVisibility(View.INVISIBLE);

        main.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {


                switch (event.getActionMasked()) {

                    case MotionEvent.ACTION_DOWN:

                        // redface();
                        //dirt();
                        // final GifView love = (GifView) findViewById(R.id.loveview);
                        final FrameLayout flove = (FrameLayout) findViewById(R.id.lovelayout);
                        // final FrameLayout flove = new FrameLayout(x);
                        final FrameLayout grd = (FrameLayout) findViewById(R.id.yigit);


                        final GifView love = (GifView) findViewById(R.id.loveview);
                        //final GifView love;

                        final GifView imageView = new GifView(x);
                        ViewGroup.MarginLayoutParams lovemargin2 = new ViewGroup.MarginLayoutParams(flove.getLayoutParams());
                        lovemargin2.setMargins((int) event.getRawX() -(int)(density1*13), (int) event.getRawY() - (int)(density1*140), 0, 0);
                        FrameLayout.LayoutParams vp = new FrameLayout.LayoutParams(lovemargin2);
                        vp.height = (int)(density1*50);
                        vp.width = (int)(density1*25);
                        imageView.setLayoutParams(vp);



                        //imageView.speed= 2;
                        //imageView.loadGIFResource(x,R.mipmap.heart12);
                        //grd.addView(imageView);

                        flove.setVisibility(View.VISIBLE);
                        ViewGroup.MarginLayoutParams lovemargin = new ViewGroup.MarginLayoutParams(flove.getLayoutParams());
                        lovemargin.setMargins((int) event.getRawX() - (int)(density1*13), (int) event.getRawY() - (int)(density1*140), 0, 0);
                        FrameLayout.LayoutParams loveparams = new FrameLayout.LayoutParams(lovemargin);
                        loveparams.height = (int)(density1*50);
                        loveparams.width = (int)(density1*25);
                        flove.setLayoutParams(loveparams);
                        //flove.addView(love);

                        //gifimageleft.speed=3;
                        //gifimageleft.loadGIFResource(this, R.mipmap.indesit_krople_woda);
                        //love.setVisibility(View.INVISIBLE);

                        imageView.speed = 2;
                        imageView.loadGIFResource(x, R.mipmap.flyheartgif);
                        //imageView.loadGIFResource(x, R.mipmap.bubblegif3);
                        grd.addView(imageView);
                         if(!mutestate[0])
                              soundPool3.play(soundID3, volume, volume, 1, 0, 1f);
                        //grd.addView(flove);
                        new CountDownTimer(imageView.movie.duration(), 10) {


                            public void onTick(long milsec) {


                                // love.speed = 2;
                                //love.loadGIFResource(x, R.mipmap.heart12);


                            }

                            public void onFinish() {

                                imageView.setVisibility(View.INVISIBLE);
                                imageView.loadGIFResource(x, R.mipmap.vivo9);//imageView.speed=0;
                                imageView.clearAnimation();
                                imageView.invalidate();

                            }
                        }.start();


                        righteyelid.setVisibility(View.INVISIBLE);
                        righteyelidback.setVisibility(View.INVISIBLE);
                        righteyelidbtm.setVisibility(View.INVISIBLE);
                        feyes.setVisibility(View.INVISIBLE);
                        fbottom.setVisibility(View.INVISIBLE);
                        freyes.setVisibility(View.INVISIBLE);
                        heartimage.clearAnimation();
                        heartimage.setAnimation(null);
                        //speedup();


                  //     if (process[5] < 100) {
                           new CountDownTimer(30, 10) {

                               public void onTick(long millisUntilFinished) {

                               }

                               public void onFinish() {
                     //              if (process[5] < 100)
                                   speedup();

                               }

                           }.start();
                      // }




                      /*  if (heartbutton[0] == false)

                        {
                            heartbutton[0] = true;
                            AnimatorSet set2 = new AnimatorSet();
                            set.cancel();


                            final int y = heart_speed[0] - 400;


                            //heart_speed[0] = y;


                            final ObjectAnimator scaleXAnimator2 = ObjectAnimator.ofFloat(zoomTarget, "scaleX", 1.1f);

                            scaleXAnimator2.setRepeatMode(ValueAnimator.REVERSE);

                            scaleXAnimator2.setRepeatCount(3);

                            scaleXAnimator2.setDuration(y);

                            final ObjectAnimator scaleYAnimator2 = ObjectAnimator.ofFloat(zoomTarget, "scaleY", 1.1f);

                            scaleYAnimator2.setRepeatMode(ValueAnimator.REVERSE);

                            scaleYAnimator2.setRepeatCount(3);

                            scaleYAnimator2.setDuration(y);


                            scaleYAnimator2.addListener(new Animator.AnimatorListener() {
                                @Override
                                public void onAnimationStart(Animator animator) {


                                /*    if (heart_speed[0] >= 500 && heart_speed[0] < 750)
                                        RPM = 85 + i1;
                                    else if (heart_speed[0] >= 0 && heart_speed[0] < 500)
                                        RPM = 90 + i1;
                                    else if (heart_speed[0] >= 750 && heart_speed[0] < 1000)
                                        RPM = 85 + i1;
                                    else if (heart_speed[0] >= 1000 && heart_speed[0] < 1200)
                                        RPM = 75 + i1;
                                    else if (heart_speed[0] >= 1200 && heart_speed[0] < 1500)
                                        RPM = 70 + i1;
                                    else if (heart_speed[0] >= 1500 && heart_speed[0] < 1800)
                                        RPM = 65 + i1;
                                    else if (heart_speed[0] >= 1800 && heart_speed[0] < 2000)
                                        RPM = 60 + i1;


                                    else RPM = 55;



                                    if (y >= 500 && y < 750)
                                        RPM = 85 + i1;
                                    else if (y >= 0 && y < 500)
                                        RPM = 90 + i1;
                                    else if (y >= 750 && y < 1000)
                                        RPM = 85 + i1;
                                    else if (y >= 1000 && y < 1200)
                                        RPM = 75 + i1;
                                    else if (y >= 1200 && y < 1500)
                                        RPM = 70 + i1;
                                    else if (y >= 1500 && y < 1800)
                                        RPM = 65 + i1;
                                    else if (y >= 1800 && y < 2000)
                                        RPM = 60 + i1;


                                    else RPM = 55;


                                    final Random r1 = new Random();
                                    final int i2 = (r1.nextInt(2) + 0);
                                    t2.setText(Integer.toString(RPM + i2));
                                    //t2.setText(Integer.toString(120+i1));
                                    //t2.setText("120");

                                }

                                @Override
                                public void onAnimationEnd(Animator animator) {

                                    set.start();
                                    heartbutton[0] = false;

                                }

                                @Override
                                public void onAnimationCancel(Animator animator) {

                                }

                                @Override
                                public void onAnimationRepeat(Animator animator) {
                                    //if(process[0] == 85)
                                    //scaleXAnimator2.setDuration(200);
                                    //scaleYAnimator2.setDuration((200));

                                 /*   if (heart_speed[0] >= 500 && heart_speed[0] < 750)
                                        RPM = 85 + i1;
                                    else if (heart_speed[0] >= 0 && heart_speed[0] < 500)
                                        RPM = 90 + i1;
                                    else if (heart_speed[0] >= 750 && heart_speed[0] < 1000)
                                        RPM = 85 + i1;
                                    else if (heart_speed[0] >= 1000 && heart_speed[0] < 1200)
                                        RPM = 75 + i1;
                                    else if (heart_speed[0] >= 1200 && heart_speed[0] < 1500)
                                        RPM = 70 + i1;
                                    else if (heart_speed[0] >= 1500 && heart_speed[0] < 1800)
                                        RPM = 65 + i1;
                                    else if (heart_speed[0] >= 1800 && heart_speed[0] < 2000)
                                        RPM = 60 + i1;


                                    else RPM = 55;


                                    if (y >= 500 && y < 750)
                                        RPM = 85 + i1;
                                    else if (y >= 0 && y < 500)
                                        RPM = 90 + i1;
                                    else if (y >= 750 && y < 1000)
                                        RPM = 85 + i1;
                                    else if (y >= 1000 && y < 1200)
                                        RPM = 75 + i1;
                                    else if (y >= 1200 && y < 1500)
                                        RPM = 70 + i1;
                                    else if (y >= 1500 && y < 1800)
                                        RPM = 65 + i1;
                                    else if (y >= 1800 && y < 2000)
                                        RPM = 60 + i1;


                                    else RPM = 55;


                                    final Random r1 = new Random();
                                    final int i2 = (r1.nextInt(2) + 0);
                                    ;

                                    t2.setText(Integer.toString(RPM + i2));


                                    //t2.setText("120");
                                }
                            });


  //undelete                          set2.playSequentially();
 //undelete                           set2.playTogether(scaleXAnimator2, scaleYAnimator2);
//undelete                          set2.start();


                        }*/


                       loveincrement5(csix, process[5], process[5] + 3, 5);
                       checkoverall();




                        /* if (process[5]< 50) tearsanimation();
                        else stoptearsanimation();*/


                        float opposite = event.getRawY() - setY - myvalueyfinal;
                        float adjacent = event.getRawX() - setX - myvaluexfinal;
                        float oppositeright = event.getRawY() - setrightY - myvalueyfinalright;
                        float adjacentright = event.getRawX() - setrightX - myvaluexfinalright;


                        double degree = Math.atan(opposite / adjacent);
                        float dX = (float) (distancex * density2 * Math.cos(degree));
                        float dY = (float) (distancey * density2 * Math.sin(degree));

                        double degreeright = Math.atan(oppositeright / adjacentright);
                        float dXright = (float) (distancex * density2 * Math.cos(degreeright));
                        float dYright = (float) (distancey * density2 * Math.sin(degreeright));


                        if (adjacent < 0) {
                            dX = dX * -1;
                            dY = dY * -1;
                        }
                        if (adjacentright < 0) {
                            dXright = dXright * -1;
                            dYright = dYright * -1;
                        }


                        movement.animate()
                                .x(setX + dX)
                                .y(setY + dY)
                                .setDuration(0)
                                .start();


                        righteyeimage.animate()
                                .x(setrightX + dXright)
                                .y(setrightY + dYright)
                                .setDuration(0)
                                .start();

                        break;


                    case MotionEvent.ACTION_MOVE:

                       // debug.setText(Float.toString(event.getRawX()));
                       // debug2.setText(Float.toString(event.getRawY()));
                        //bubble(event.getRawX(), event.getRawY());
                        float opposite1 = event.getRawY() - setY - myvalueyfinal;
                        float adjacent1 = event.getRawX() - setX - myvaluexfinal;

                        float oppositeright1 = event.getRawY() - setrightY - myvalueyfinalright;
                        float adjacentright1 = event.getRawX() - setrightX - myvaluexfinalright;


                        double degree1 = Math.atan(opposite1 / adjacent1);
                        Float dX1 = (float) (distancex * density2 * Math.cos(degree1));
                        Float dY1 = (float) (distancey * density2 * Math.sin(degree1));

                        double degreeright1 = Math.atan(oppositeright1 / adjacentright1);
                        Float dX1right = (float) (distancex * density2 * Math.cos(degreeright1));
                        Float dY1right = (float) (distancey * density2 * Math.sin(degreeright1));


                        if (adjacent1 < 0) {
                            dX1 = dX1 * -1;
                            dY1 = dY1 * -1;
                        }
                        if (adjacentright1 < 0) {
                            dX1right = dX1right * -1;
                            dY1right = dY1right * -1;
                        }
                        // else if (adjacent1 < 0 && opposite1<0){dX1=dX1*-1;}


                        movement.animate()
                                .x(setX + dX1)
                                .y(setY + dY1)
                                .setDuration(0)
                                .start();

                        righteyeimage.animate()
                                .x(setrightX + dX1right)
                                .y(setrightY + dY1right)
                                .setDuration(0)
                                .start();

                        break;

                    case MotionEvent.ACTION_UP:


                        movement.animate()
                                .x(setX)
                                .y(setY)
                                .setDuration(0)
                                .start();

                        righteyeimage.animate()
                                .x(setrightX)
                                .y(setrightY)
                                .setDuration(0)
                                .start();


                    default:
                        return false;
                }
                return true;

            }
        });


       bp = new BillingProcessor(this, "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAoAGY3CL6BvTO/cwRLZ4D3O5w5B21ZO/ThlQNeJz7Cfj8vLC8+NzUxcO82JbHsuxAj1Wg0tTmuCdHUld0gt84enT+rjOqFuFC+7wFbCyWuM+grrM0DZUTP2wJF2IhGbZqFVDHbVBp2eutw8yaPzspvr3kadtUteMCLcNSdgMgKo+X/zEJ9z1rVhTVV+TmB3egpC7UVHkOW09oChFGe9e+kYXNAeDh5MWNgdbdvlDgFCY15nIaLDGRs8pLqaYYrtyod+1mXp0NGnHcvOpUJrWiHVfnFwSl0ZnXKGr3L8CQxLuL7LBoTqeR6HQ8ITKLCVdEbAqm87rFMYmwwK9WpQSI0wIDAQAB", this);


        new CountDownTimer(100, 10) {
            public void onTick(long milsec) {

            }
            public void onFinish() {

               getskudetail();



            }
        }.start();


        final Button startnewgamebtn = (Button) findViewById(R.id.button23);
        final Button gotomain = (Button) findViewById(R.id.button24);

        final ImageButton coinbuy10 = (ImageButton) findViewById(R.id.coin1img);
        final RelativeLayout optionlayout = (RelativeLayout) findViewById(R.id.OptionsLayout);
       // final Switch sound = (Switch) findViewById(R.id.switch2);
        final Button bckbutton = (Button) findViewById(R.id.cancelbtn);

     //   mPbutton_standard = (PlusOneButton)findViewById(R.id.id_plus_one_button_standard);

        try {
            PackageInfo info = getPackageManager().getPackageInfo(
                    getPackageName(),
                    PackageManager.GET_SIGNATURES);
            for (Signature signature : info.signatures) {
                MessageDigest md = MessageDigest.getInstance("SHA");
                md.update(signature.toByteArray());
                Log.d("KeyHash:", Base64.encodeToString(md.digest(), Base64.DEFAULT));
            }
        }
        catch (PackageManager.NameNotFoundException e) {

        }
        catch (NoSuchAlgorithmException e) {

        }

        optionlayout.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View view, MotionEvent motionEvent) {
                return true;
            }
        });




        final String sku ="android.test.purchased";
   //     Bundle buyIntentBundle = mService.getBuyIntent(3, "com.game.hy.vivo",sku, "inapp", "bGoa+V7g/yqDXvKRqq+JTFn4uQZbPiQJo4pf9RzJ");



        final RelativeLayout coin100 = (RelativeLayout) findViewById(R.id.coin100rel);


        final RelativeLayout coin100layout = (RelativeLayout) findViewById(R.id.coinlayoutcoin100);
        final Button coin100l1 = (Button) findViewById(R.id.coin100img);
        final Button coin100l2 = (Button) findViewById(R.id.coin100button);




        final RelativeLayout coin1000 = (RelativeLayout) findViewById(R.id.coin1000rel);


        final RelativeLayout coin1000layout = (RelativeLayout) findViewById(R.id.coinlayoutcoin1000);
        final Button coin1000l1 = (Button) findViewById(R.id.coin1000img);
        final Button coin1000l2 = (Button) findViewById(R.id.coin1000button);

        final RelativeLayout coin10 = (RelativeLayout) findViewById(R.id.coin10rel);


        final RelativeLayout coin10layout = (RelativeLayout) findViewById(R.id.coinlayoutcoin10);
        final Button coin10l1 = (Button) findViewById(R.id.coin10img);
        final Button coin10l2 = (Button) findViewById(R.id.coin10button);


        if(adflag == false ) {


            coin10.setEnabled(true);
            coin10l1.setEnabled(true);
            coin10l2.setEnabled(true);
            coin10layout.setAlpha(1f);
            coin10l1.setAlpha(1f);
            coin10l2.setAlpha(1f);
            questionnodd.setEnabled(true);
            questionnodd.setAlpha(1f);

        }
        else {


            coin10.setEnabled(false);
            coin10l1.setEnabled(false);
            coin10l2.setEnabled(false);
            coin10layout.setAlpha(0.33f);
            coin10l1.setAlpha(0.33f);
            coin10l2.setAlpha(0.33f);
            questionnodd.setEnabled(false);
            questionnodd.setAlpha(0.33f);
        }


        coin10.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        coin10layout.setScaleX(BSCALE);
                        coin10layout.setScaleY(BSCALE);
                        coin10layout.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:

                        if(!mutestate[0])
                            soundPool.play(soundID, volume, volume, 1, 0, 1f);


                        BILLINGSTATE = NOADD;

                        if (isAvailable) {
                            // continue

                            bp.purchase(GameforActivity.this, "noadd");
                            // bp.getPurchaseTransactionDetails("coins");
                        }
                        else
                        {
                            Log.d("billing:", "unavailable");

                        }




                       /* final Button nobutton3 = (Button) findViewById(R.id.button363);
                        nobutton3.setEnabled(true);
                        warningbox3.setVisibility(View.VISIBLE);
                        final Animation shake = AnimationUtils.loadAnimation(x, R.anim.lefttoright);
                        disableallchild.setVisibility(View.VISIBLE);
                        shake.setDuration(SLIDEANIMDUR);
                        warningbox3.setAnimation(shake);
                        final MediaPlayer clickaudio2 = MediaPlayer.create(getApplicationContext(), R.raw.popupsound);
                        if(!mutestate[0]) {
                            clickaudio2.start();
                            clickaudio2.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                                public void onCompletion(MediaPlayer mp) {
                                    clickaudio2.release();

                                }

                                ;
                            });
                        }


                        BILLINGSTATE = NOADD;


                        Button unlockiqtext = (Button) findViewById(R.id.unlockiqbutton);
                        SkuDetails skun = bp.getPurchaseListingDetails("noadd");


                        if (gamelang == ENGLISH)  textinfoyes.setText("Click yes to disable in-app adds for " + Double.toString(round(skun.priceValue,2))+ " " + skun.currency);
                        else if (gamelang == TURKISH)  textinfoyes.setText(Double.toString(round(skun.priceValue,2))+ " " + skun.currency + " harcayarak oyundaki reklamları devre dışı bırakmak  için evet'e basınız.");
                        else if (gamelang == FRENCH)  textinfoyes.setText("Cliquez sur Oui pour désactiver in-app ajoute pour " + Double.toString(round(skun.priceValue,2))+ " " + skun.currency);
                        else if (gamelang == SPANISH) textinfoyes.setText("Haga clic en Sí para desactivar desde la aplicación agrega a  " + Double.toString(round(skun.priceValue,2))+ " " + skun.currency);
                        else if (gamelang == RUSSIAN) textinfoyes.setText("Нажмите кнопку Да, чтобы отключить в приложение добавляет в течение " + Double.toString(round(skun.priceValue,2))+ " " + skun.currency);
                        else if (gamelang == CHINESE) textinfoyes.setText("單擊是在應用停用增加了 " + Double.toString(round(skun.priceValue,2))+ " " + skun.currency);
                        else if (gamelang == JAPANESE) textinfoyes.setText("アプリ内無効にするには、[はい]をクリックします" + Double.toString(round(skun.priceValue,2))+ " " + skun.currency + " のために追加されます");
                        else if (gamelang == PORTUGUESE) textinfoyes.setText("Clique em Sim para desativar o in-app adiciona para " + Double.toString(round(skun.priceValue,2))+ " " + skun.currency);
                        else   textinfoyes.setText("Click yes to disable in-app adds for 2 usd " + Double.toString(round(skun.priceValue,2))+ " " + skun.currency);*/

                        coin10layout.setScaleX(1f);
                        coin10layout.setScaleY(1f);
                        coin10layout.setAlpha(1f);


                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });

        coin10l1.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        coin10layout.setScaleX(BSCALE);
                        coin10layout.setScaleY(BSCALE);
                        coin10layout.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:

                        if(!mutestate[0])
                            soundPool.play(soundID, volume, volume, 1, 0, 1f);

                        BILLINGSTATE = NOADD;

                        if (isAvailable) {
                            // continue

                            bp.purchase(GameforActivity.this, "noadd");
                            // bp.getPurchaseTransactionDetails("coins");
                        }
                        else
                        {
                            Log.d("billing:", "unavailable");

                        }
                        coin10layout.setScaleX(1f);
                        coin10layout.setScaleY(1f);
                        coin10layout.setAlpha(1f);


                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });
        coin10l2.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        coin10layout.setScaleX(BSCALE);
                        coin10layout.setScaleY(BSCALE);
                        coin10layout.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:

                        if(!mutestate[0])
                            soundPool.play(soundID, volume, volume, 1, 0, 1f);

                        BILLINGSTATE = NOADD;

                        if (isAvailable) {
                            // continue

                            bp.purchase(GameforActivity.this, "noadd");
                            // bp.getPurchaseTransactionDetails("coins");
                        }
                        else
                        {
                            Log.d("billing:", "unavailable");

                        }

                        coin10layout.setScaleX(1f);
                        coin10layout.setScaleY(1f);
                        coin10layout.setAlpha(1f);


                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });














        coin1000.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        coin1000layout.setScaleX(BSCALE);
                        coin1000layout.setScaleY(BSCALE);
                        coin1000layout.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:
                        if(!mutestate[0])
                            soundPool.play(soundID, volume, volume, 1, 0, 1f);

                        if (isAvailable) {
                            // continue

                            BILLINGSTATE = PURCHASE1000;
                            bp.purchase(GameforActivity.this, "coin1000");
                           // bp.getPurchaseTransactionDetails("coins");
                            //
                        }
                        else
                        {

                            Log.d("billing:", "unavailable");

                        }



                        coin1000layout.setScaleX(1f);
                        coin1000layout.setScaleY(1f);
                        coin1000layout.setAlpha(1f);


                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });

        coin1000l1.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        coin1000layout.setScaleX(BSCALE);
                        coin1000layout.setScaleY(BSCALE);
                        coin1000layout.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:

                        if(!mutestate[0])
                            soundPool.play(soundID, volume, volume, 1, 0, 1f);
                        if (isAvailable) {
                            // continue

                            BILLINGSTATE = PURCHASE1000;
                            bp.purchase(GameforActivity.this, "coin1000");
                            //bp.getPurchaseTransactionDetails("android.test.purchased");
                            //
                        }
                        else
                        {

                            Log.d("billing:", "unavailable");

                        }


                        coin1000layout.setScaleX(1f);
                        coin1000layout.setScaleY(1f);
                        coin1000layout.setAlpha(1f);


                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });
        coin1000l2.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        coin1000layout.setScaleX(BSCALE);
                        coin1000layout.setScaleY(BSCALE);
                        coin1000layout.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:

                        if(!mutestate[0])
                            soundPool.play(soundID, volume, volume, 1, 0, 1f);
                        if (isAvailable) {
                            // continue

                            BILLINGSTATE = PURCHASE1000;
                            bp.purchase(GameforActivity.this, "coin1000");
                            //bp.getPurchaseTransactionDetails("android.test.purchased");
                            //
                        }
                        else
                        {

                            Log.d("billing:", "unavailable");

                        }


                        coin1000layout.setScaleX(1f);
                        coin1000layout.setScaleY(1f);
                        coin1000layout.setAlpha(1f);


                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });






        coin100.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        coin100layout.setScaleX(BSCALE);
                        coin100layout.setScaleY(BSCALE);
                        coin100layout.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:
                        if(!mutestate[0])
                            soundPool.play(soundID, volume, volume, 1, 0, 1f);

                        if (isAvailable) {
                            // continue

                            BILLINGSTATE = PURCHASE200;
                            bp.purchase(GameforActivity.this, "coin200");



                             //bp.getPurchaseTransactionDetails("coins");
                            //
                        }
                        else
                        {

                            Log.d("billing:", "unavailable");

                        }



                        coin100layout.setScaleX(1f);
                        coin100layout.setScaleY(1f);
                        coin100layout.setAlpha(1f);


                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });

        coin100l1.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        coin100layout.setScaleX(BSCALE);
                        coin100layout.setScaleY(BSCALE);
                        coin100layout.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:

                        if(!mutestate[0])
                            soundPool.play(soundID, volume, volume, 1, 0, 1f);
                        if (isAvailable) {
                            // continue

                            BILLINGSTATE = PURCHASE200;
                          //  bp.purchase(GameforActivity.this, "android.test.purchased");

                            bp.purchase(GameforActivity.this, "coin200");
                            //bp.getPurchaseTransactionDetails("android.test.purchased");
                            //
                        }
                        else
                        {

                            Log.d("billing:", "unavailable");

                        }


                        coin100layout.setScaleX(1f);
                        coin100layout.setScaleY(1f);
                        coin100layout.setAlpha(1f);


                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });
        coin100l2.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        coin100layout.setScaleX(BSCALE);
                        coin100layout.setScaleY(BSCALE);
                        coin100layout.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:

                        if(!mutestate[0])
                            soundPool.play(soundID, volume, volume, 1, 0, 1f);
                        if (isAvailable) {
                            // continue

                            BILLINGSTATE = PURCHASE200;
                          //  bp.purchase(GameforActivity.this, "android.test.purchased");

                            bp.purchase(GameforActivity.this, "coin200");

                           // bp.getPurchaseTransactionDetails("android.test.purchased");
                            //
                        }
                        else
                        {

                            Log.d("billing:", "unavailable");

                        }


                        coin100layout.setScaleX(1f);
                        coin100layout.setScaleY(1f);
                        coin100layout.setAlpha(1f);


                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });
     /*   TextView eyebandtext = (TextView) findViewById(R.id.eyebandetext);
        if (gamelang == ENGLISH) eyebandtext.setTextSize(14);
        else if (gamelang == TURKISH) eyebandtext.setTextSize(14);
        else if (gamelang == FRENCH) eyebandtext.setTextSize(14);
        else if (gamelang == SPANISH) eyebandtext.setTextSize(14);
        else if (gamelang == RUSSIAN) eyebandtext.setTextSize(13);
        else if (gamelang == CHINESE) eyebandtext.setTextSize(14);
        else if (gamelang == JAPANESE) eyebandtext.setTextSize(14);
        else if (gamelang == PORTUGUESE) eyebandtext.setTextSize(14);
        else  eyebandtext.setTextSize(14);*/




        String array[] = { "ENGLISH", "TÜRKÇE", "FRANÇAIS", "ESPAÑOLA","РУССКИЙ","中文", "日本語","PORTUGUÊS"};
        ArrayAdapter<String> sp_adapter = new ArrayAdapter<String>(this, R.layout.spinner, array);
        sp_adapter.setDropDownViewResource
                (R.layout.spinner_selector);
        Spinner sp = (Spinner) findViewById(R.id.spinner);
        sp.setAdapter(sp_adapter);

       // final Locale trlocale= Locale.forLanguageTag("tr-TR");
       //final Locale spnlocale = Locale.forLanguageTag("es-ES");
        final Locale trlocale= new Locale("tr-TR");
        final Locale eslocale= new Locale("es-ES");


    if (gamelang == ENGLISH) sp.setSelection(0);
    else if (gamelang == TURKISH) sp.setSelection(1);
    else if (gamelang == FRENCH) sp.setSelection(2);
    else if (gamelang == SPANISH) sp.setSelection(3);
    else if (gamelang == RUSSIAN) sp.setSelection(4);
    else if (gamelang == CHINESE) sp.setSelection(5);
    else if (gamelang == JAPANESE) sp.setSelection(6);
    else if (gamelang == PORTUGUESE) sp.setSelection(7);
    else {



        if (Locale.getDefault().getLanguage().equals("tr")) sp.setSelection(1);
        else if (Locale.getDefault().getLanguage().equals("en")) sp.setSelection(0);
        else if (Locale.getDefault().getLanguage().equals("fr") || Locale.getDefault().getLanguage().equals("fr_CH") || Locale.getDefault().getLanguage().equals("fr_CA"))
            sp.setSelection(2);
        else if (Locale.getDefault().getLanguage().equals("es")) sp.setSelection(3);
        else if (Locale.getDefault().getLanguage().equals("ru")) sp.setSelection(4);

        else sp.setSelection(0);

    }




        sp.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {

            public void onItemSelected(AdapterView arg0, View arg1,
                                       int arg2, long arg3) {
                Configuration config = new Configuration();
                switch (arg2) {


                    case 0:

                        updateEnglish();

                        break;


                    case 1:


                        updateTurkish();

                        break;

                    case 2:

                        updateFrench();
                        break;
                    case 3:

                        updateSpanish();
                        break;

                    case 4:

                        updateRussian();
                        break;
                    case 5:

                        updateChinese();
                        break;
                    case 6:

                        updateJapanese();
                        break;
                    case 7:

                        updatePorteguese();
                        break;
                    default:

                        break;
                }
                getResources().updateConfiguration(config, null);
            }

            public void onNothingSelected(AdapterView arg0) {
                // TODO Auto-generated method stub

            }
        });



     /*   String sDefSystemLanguage = Locale.getDefault().getLanguage();
        Locale usLocale = new Locale("TR");
       if (Locale.getDefault().getLanguage().equals("tr")) name.setText("ok");
*/



        vibrationswitch.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {

                if (isChecked == false) {


                    vibration = false;
                    editor.putBoolean("vibration", vibration);
                    editor.commit();

                } else

                {

                    vibration = true;
                    vibrate(250);
                    editor.putBoolean("vibration", vibration);
                    editor.commit();

                }


            }
        });

        editor.putBoolean("vibration", vibration);
        editor.commit();
        sound.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {

                if (isChecked == false) {

                    mutestate[0] = true;

                        optionaudio.pause();

                    //manager = (AudioManager) getSystemService(Context.AUDIO_SERVICE);
                    //manager.setStreamMute(AudioManager.STREAM_MUSIC, true);

                    editor.putBoolean("mutestate", true);
                    editor.commit();
                } else

                {
                        optionaudio.start();
                        optionaudio.setLooping(true);

                    //manager = (AudioManager) getSystemService(Context.AUDIO_SERVICE);
                    //manager.setStreamMute(AudioManager.STREAM_MUSIC, false);
                    mutestate[0] = false;
                    editor.putBoolean("mutestate", false);
                    editor.commit();

                }


            }
        });


        optionaudio=MediaPlayer.create(getApplicationContext(), R.raw.optionaudio);




        setting.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        setting.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:

                        if(!mutestate[0])
                            soundPool.play(soundID, volume, volume, 1, 0, 1f);

                        if(!mutestate[0])
                        {
                            optionaudio.start();
                            optionaudio.setLooping(true);
                        }
                        optionsound=true;
                        optionlayout.setVisibility(View.VISIBLE);
                        main.setEnabled(false);
                        //segments.setEnabled(false);
                        //meattext2.setText("Meat:" + Integer.toString(marketarray[meatindex]));
                      //  fastfoodframe.setVisibility(View.INVISIBLE);
                        foodmenulayout.setVisibility(View.INVISIBLE);
                        share.setVisibility(View.INVISIBLE);
                        coinlayout.setVisibility(View.INVISIBLE);
                        disableallchild2option.setVisibility(View.VISIBLE);
                        STATE = MENU;
                       // mAdView.setVisibility(View.INVISIBLE);
                        //segments.setVisibility(View.INVISIBLE);

                        segmentkitchen.setEnabled(false);
                        segmenthygiene.setEnabled(false);
                        segmentbedroom.setEnabled(false);
                        segmentgameroom.setEnabled(false);
                        segmentwc.setEnabled(false);
                        sleeplayout.setEnabled(false);
                        wclayout.setEnabled(false);
                        peebtn.setEnabled(false);
                        button_sbm3.setEnabled(false);
                        washhandbutton.setEnabled(false);
                        button_sbm4.setEnabled(false);
                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        setting.setAlpha(1f);

                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });


        final RelativeLayout wariningbox = (RelativeLayout) findViewById(R.id.warningbox);
        final Button yesbutton = (Button) findViewById(R.id.button36);
        final Button nobutton = (Button) findViewById(R.id.button37);
        final  RelativeLayout mainmenulayout = (RelativeLayout ) findViewById(R.id.Mainmenulayout);
        final Button backtooption = (Button) findViewById(R.id.buttoncontinue);
        final RelativeLayout optlayout = (RelativeLayout) findViewById(R.id.Optionlayout);
        final RelativeLayout faqlayout = (RelativeLayout) findViewById(R.id.faqlayout);
        final Button faqbutton = (Button) findViewById(R.id.faqbutton);
        final RelativeLayout header = (RelativeLayout) findViewById(R.id.header);
        final Button sharelinkbutton = (Button) findViewById(R.id.sharelinkbutton);
        final Button optionbtn = (Button ) findViewById(R.id.button33);

        final Button leaderboard3 = (Button) findViewById(R.id.buttongoogleleader);
        final Button signin3 = (Button) findViewById(R.id.buttongooglesign);




        final Button backtooptfromfaq = (Button) findViewById(R.id.button22);



        yesbutton.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        yesbutton.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:
                        if(!mutestate[0])
                            soundPool.play(soundID, volume, volume, 1, 0, 1f);


                      /*  editor.putInt("newgame",0
                        );
                        resetarray();
                        editor.putInt("MAXGAMEPLAY",3);

                        editor.putBoolean("unlockiqflag", false);
                        editor.putInt("sleepbandpick", 2);
                        editor.commit();
                        editor.putInt("gamestar",3);
                        editor.putInt("procss0key", 101);
                        editor.putInt("procss1key", 101);
                        editor.putInt("procss2key", 101);
                        editor.putInt("procss3key",101);
                        editor.putInt("procss4key", 101);
                        editor.putInt("procss5key", 101);
                        editor.putBoolean("facecoin",false);
                        editor.putBoolean("googlecoin",false);
                        editor.putBoolean("twitcoin",false);
                        editor.putBoolean("instacoin",false);
                        editor.commit();*/



                        //MAXGAMEPLAY = 3;
                        //tcoin.setText(Integer.toString(coin[0]));

                        //editor.commit();





                        go();

                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        yesbutton.setAlpha(1f);

                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });



        nobutton.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        nobutton.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:
                         if(!mutestate[0])
                        soundPool.play(soundID, volume, volume, 1, 0, 1f);
                        coinbackpressflag = true;
                        final Animation shake = AnimationUtils.loadAnimation(x, R.anim.righttoleft);
                        disableallchild2option.setVisibility(View.INVISIBLE);
                        shake.setDuration(SLIDEANIMDUR);
                        wariningbox.setAnimation(shake);
                        warningbox();
                        coinbackpressflag = true;
                        startnewgamebtn.setEnabled(true);
                        faqbutton.setEnabled(true);
                        backtooption.setEnabled(true);
                        sharelinkbutton.setEnabled(true);
                        optionbtn.setEnabled(true);
                        leaderboard3.setEnabled(true);
                        buttoncontact.setEnabled(true);
                        signin3.setTextColor(Color.argb(255,255,255,255));
                        leaderboard3.setTextColor(Color.argb(255,255,255,255));
                        signin3.setEnabled(true);

                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        nobutton.setAlpha(1f);

                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });





        startnewgamebtn.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        startnewgamebtn.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:


                        if(!mutestate[0])
                            soundPool.play(soundID, volume, volume, 1, 0, 1f);
                        wariningbox.setVisibility(View.VISIBLE);
                       coinbackpressflag = false;


                        final Animation shake = AnimationUtils.loadAnimation(x, R.anim.lefttoright);
                        disableallchild2option.setVisibility(View.VISIBLE);
                        final MediaPlayer clickaudio2 = MediaPlayer.create(getApplicationContext(), R.raw.popupsound);
                        if(!mutestate[0]) {
                            clickaudio2.start();
                            clickaudio2.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                                public void onCompletion(MediaPlayer mp) {
                                    clickaudio2.release();

                                }

                                ;
                            });
                        }
                        shake.setDuration(SLIDEANIMDUR);
                        wariningbox.setAnimation(shake);

                        startnewgamebtn.setEnabled(false);
                        faqbutton.setEnabled(false);

                        backtooption.setEnabled(false);
                        sharelinkbutton.setEnabled(false);
                        optionbtn.setEnabled(false);
                        buttoncontact.setEnabled(false);
                        leaderboard3.setEnabled(false);
                        leaderboard3.setTextColor(Color.argb(90,255,255,255));
                        signin3.setTextColor(Color.argb(90,255,255,255));
                        signin3.setEnabled(false);

                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        startnewgamebtn.setAlpha(1f);

                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });





        bckbutton.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        bckbutton.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:
                       // optionlayout.setVisibility(View.INVISIBLE);
                        if(!mutestate[0])
                            soundPool.play(soundID, volume, volume, 1, 0, 1f);


                        optlayout.setVisibility(View.INVISIBLE);
                        mainmenulayout.setVisibility(View.VISIBLE);




                       /*
                        main.setEnabled(true);
                        //segments.setEnabled(false);
                        //meattext2.setText("Meat:" + Integer.toString(marketarray[meatindex]));
                        fastfoodframe.setVisibility(View.VISIBLE);

                        share.setVisibility(View.VISIBLE);
                        //segments.setVisibility(View.INVISIBLE);

                        segmentkitchen.setEnabled(true);
                        segmenthygiene.setEnabled(true);
                        segmentbedroom.setEnabled(true);
                        segmentgameroom.setEnabled(true);
                        segmentwc.setEnabled(true);
                        sleeplayout.setEnabled(true);
                        wclayout.setEnabled(true);
                        peebtn.setEnabled(true);
                        button_sbm3.setEnabled(true);
                        button_sbm4.setEnabled(true);*/
                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        bckbutton.setAlpha(1f);

                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });




        optionbtn.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        optionbtn.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:

                        STATE = OPTIONEXIT;

                        if(!mutestate[0])
                            soundPool.play(soundID, volume, volume, 1, 0, 1f);
                        mainmenulayout.setVisibility(View.INVISIBLE);
                        optlayout.setVisibility(View.VISIBLE);
                        faqlayout.setVisibility(View.INVISIBLE);
                        //header.setVisibility(View.INVISIBLE);

                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        optionbtn.setAlpha(1f);

                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });


        sharelinkbutton.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        sharelinkbutton.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:

                        if(!mutestate[0])
                            soundPool.play(soundID, volume, volume, 1, 0, 1f);
                        String text = "https://play.google.com/store/apps/details?id=com.game.hy.vivo";

                        Intent shareIntent = new Intent();
                        shareIntent.setAction(Intent.ACTION_SEND);
                        shareIntent.putExtra(Intent.EXTRA_TEXT, text);

                        shareIntent.setType("text/plain");
                        shareIntent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);
                        startActivity(Intent.createChooser(shareIntent, sharefreindstext));

                        // quitgame();

                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        sharelinkbutton.setAlpha(1f);

                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });





        backtooptfromfaq.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        backtooptfromfaq.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:
                        if(!mutestate[0])
                            soundPool.play(soundID, volume, volume, 1, 0, 1f);
                        mainmenulayout.setVisibility(View.VISIBLE);
                        optlayout.setVisibility(View.INVISIBLE);
                        faqlayout.setVisibility(View.INVISIBLE);
                        header.setVisibility(View.VISIBLE);

                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        backtooptfromfaq.setAlpha(1f);

                        break;
                    case MotionEvent.ACTION_CANCEL: {


                        break;
                    }
                }
                return true;
            }
        });





        tearsanimation();


        faqbutton.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        faqbutton.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:
                        if(!mutestate[0])
                            soundPool.play(soundID, volume, volume, 1, 0, 1f);
                        mainmenulayout.setVisibility(View.INVISIBLE);
                        optlayout.setVisibility(View.INVISIBLE);
                        faqlayout.setVisibility(View.VISIBLE);
                        header.setVisibility(View.INVISIBLE);
                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        faqbutton.setAlpha(1f);

                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });






        backtooption.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        backtooption.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:
                        if(!mutestate[0])
                            soundPool.play(soundID, volume, volume, 1, 0, 1f);

                        optionsound=false;

                        if (optionaudio.isPlaying()) {
                            optionaudio.pause();
                        }
                        shopframe2.setVisibility(View.VISIBLE);
                        disableallchild2option.setVisibility(View.INVISIBLE);
                        main.setEnabled(false);
                        //segments.setEnabled(false);
                        //meattext2.setText("Meat:" + Integer.toString(marketarray[meatindex]));
                        //mainmenuframe.setVisibility(View.VISIBLE);
                     //   fastfoodframe.setVisibility(View.INVISIBLE);

                       // mAdView.setVisibility(View.VISIBLE);
                        optionlayout.setVisibility(View.INVISIBLE);
                        coinlayout.setVisibility(View.INVISIBLE);
                        STATE = MARKETEXIT;
                        potionslayout.setVisibility(View.INVISIBLE);
                        foodmenulayout.setVisibility(View.VISIBLE);
                        share.setVisibility(View.INVISIBLE);
                        //segments.setVisibility(View.INVISIBLE);
                        Drawable x = getResources().getDrawable(R.mipmap.sborder2);
                        headermenu.setBackground(x);
                        buycoingbutton.setBackground(x);


                        if (gamelang == ENGLISH)  Menutext.setText("MARKET");
                        else if (gamelang == TURKISH)  Menutext.setText("PAZAR");
                        else if (gamelang == FRENCH)  Menutext.setText("MARCHÉ");
                        else if (gamelang == SPANISH) Menutext.setText("MERCADO");
                        else if (gamelang == RUSSIAN) Menutext.setText("РЫНОК");
                        else if (gamelang == CHINESE) Menutext.setText("市场");
                        else if (gamelang == JAPANESE) Menutext.setText("市場");
                        else if (gamelang == PORTUGUESE) Menutext.setText("MERCADO");
                        else   Menutext.setText("MARKET");
                        STATE = MARKETEXIT;
                        segmentkitchen.setEnabled(false);
                        sleeplayout.setEnabled(false);
                        wclayout.setEnabled(false);
                        segmenthygiene.setEnabled(false);
                        segmentbedroom.setEnabled(false);
                        segmentgameroom.setEnabled(false);
                        peebtn.setEnabled(false);
                        button_sbm3.setEnabled(false);
                        washhandbutton.setEnabled(false);
                        button_sbm4.setEnabled(false);
                        segmentwc.setEnabled(false);

                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        backtooption.setAlpha(1f);

                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });




        //gotomain.setTypeface(tf);
        gotomain.setTextSize(25);

        gotomain.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        v.setScaleX(BSCALE);
                        v.setScaleY(BSCALE);
                        gotomain.setAlpha(BALPHA);
                        v.invalidate();
                        break;
                    }
                    case MotionEvent.ACTION_UP:
                        if(!mutestate[0])
                            soundPool.play(soundID, volume, volume, 1, 0, 1f);
                        mainmenulayout.setVisibility(View.VISIBLE);
                        optlayout.setVisibility(View.INVISIBLE);

                        v.setScaleX(1f);
                        v.setScaleY(1f);
                        gotomain.setAlpha(1f);

                        break;
                    case MotionEvent.ACTION_CANCEL: {

                        break;
                    }
                }
                return true;
            }
        });








/*
        mAnimation22 = new TranslateAnimation(0, 0, 0, -10);
        // mAnimation = new TranslateAnimation(0, 0, -20, 0);
        mAnimation22.setDuration(100);
        mAnimation22.setFillAfter(true);
        mAnimation22.setRepeatCount(5);
        mAnimation22.setRepeatMode(Animation.REVERSE);
        fmouthupimg.setAnimation(mAnimation22);
        fmouthupimg.setVisibility(View.VISIBLE);
*/


       final int mx = mouthx;
        final int my = mouthy;
        final int my1=mouthy1;
        final int mx1=mouthx1;

        final int chx = chinx;
        final int chy = chiny;
        final int chx1 = chinx1;
        final int chy1 = chiny1;


        ImageButton soup1 = (ImageButton) findViewById(R.id.buttonsoup);
     //   soupbutton.setOnLongClickListener(myOnLongClickListener);

       final Bitmap croppedBitmapmouth1 = getcliphalf(croppedBitmapmouth);
        final Bitmap croppedBitmapmouth2 = getcliphalfup(croppedBitmapmouthup);

        final FrameLayout flyframe = (FrameLayout) findViewById(R.id.gifflylayout);


        final int[] location ={0,0};

        lin.setOnDragListener(new View.OnDragListener() {
            @Override
            public boolean onDrag(View v, DragEvent event) {

                TextView t = (TextView) findViewById(R.id.textView2);
                String area;


                switch (event.getAction()) {
                    case DragEvent.ACTION_DRAG_STARTED:

                        float startlocx = event.getX();
                        float starlocy = event.getY();


                        carrotimg.setEnabled(false);
                        tomatoimg.setEnabled(false);
                        appleimg.setEnabled(false);
                        bostonrollimg.setEnabled(false);
                        frenchtoastimg.setEnabled(false);
                        meatarmimg.setEnabled(false);
                        medisaladimg.setEnabled(false);
                        noodleimg.setEnabled(false);
                        mixedsaladimg.setEnabled(false);
                        onionringimg.setEnabled(false);
                        orangeimg.setEnabled(false);
                        porkimg.setEnabled(false);
                        mixedrollimg.setEnabled(false);
                        salmonsushiimg.setEnabled(false);
                        soupimg.setEnabled(false);
                        squidimg.setEnabled(false);
                        cokeimg.setEnabled(false);
                        brownieimg.setEnabled(false);
                        cheesecakeimg.setEnabled(false);
                        cheeseimg.setEnabled(false);
                        juiceimg.setEnabled(false);
                        watermelonimg.setEnabled(false);
                        tomatoimg.setEnabled(false);
                        pumpkinimg.setEnabled(false);
                        peesimg.setEnabled(false);
                        kiwiimg.setEnabled(false);
                        hotdogimg.setEnabled(false);
                        cornimg.setEnabled(false);
                        cookieimg.setEnabled(false);
                        chilisimg.setEnabled(false);
                        broccoliimg.setEnabled(false);
                        bananaimg.setEnabled(false);
                        regional1img.setEnabled(false);
                        regional2img.setEnabled(false);
                        regional3img.setEnabled(false);
                        regional4img.setEnabled(false);
                        regional5img.setEnabled(false);
                        regional6img.setEnabled(false);
                        siskebapimg.setEnabled(false);

                        drinks1img.setEnabled(false);
                        drinks2img.setEnabled(false);
                        drinks3img.setEnabled(false);
                        drinks4img.setEnabled(false);
                        drinks5img.setEnabled(false);
                        drinks6img.setEnabled(false);

                        desert1img.setEnabled(false);
                        desert2img.setEnabled(false);
                        desert3img.setEnabled(false);
                        desert4img.setEnabled(false);
                        desert5img.setEnabled(false);
                        desert6img.setEnabled(false);

                        hamburgerimg.setEnabled(false);


                        sleeppotionimg.setEnabled(false);
                        hungerpotionimg.setEnabled(false);
                        hygienepotionimg.setEnabled(false);
                        lovepotionimg.setEnabled(false);
                        gamepotionimg.setEnabled(false);
                        allinpotionimg.setEnabled(false);
                        frenchfriesimg.setEnabled(false);
                        chickenlegimg.setEnabled(false);
                        fishimg.setEnabled(false);


                        View view22 = (View) event.getLocalState();


                       /* if ((v == lin || v==flyframe) && view22.getId() == carrotimg.getId()) {
                            carrotimg.setEnabled(true);

                        }
                        if ((v == lin || v==flyframe) && view22.getId() == tomatoimg.getId()) {
                            tomatoimg.setEnabled(true);

                        }*/




                        //if ((v == lin || v==flyframe) && view22.getId() == frenchfriesimg.getId()) frenchfriesimg.setEnabled(true);
                        //if ((v == lin || v==flyframe) && view22.getId() == tomatoimg.getId()) tomatoimg.setEnabled(true);


                        break;
                    case DragEvent.ACTION_DRAG_ENTERED:


                        break;


                    case DragEvent.ACTION_DRAG_LOCATION:


                        View view3432 = (View) event.getLocalState();


                        float x =event.getX();
                        float y =event.getY();

                        //event.getL
                       // debug.setText(Float.toString(x));
                       // debug2.setText(Float.toString(y));
                        if (sleepbuttonpressed[0] == true) {
                            button_sbm4.setBackgroundResource(R.mipmap.wakeup);


                            SleepStatus = 0;
                            sleepbuttonpressed[0] = false;
                            if(!mutestate[0])
                                soundPool7wakeup.play(soundID7, volume, volume, 1, 0, 1f);
                            increment3(cfour, process[3], process[3] + 1, 3);
                            closeeyes(false);
                            sleepcover(false);
                        }


                        View view34 = (View) event.getLocalState();
                        if ((v == lin || v==flyframe) && view34.getId() == greensoapimg.getId()) {
                           // debug.setText(Float.toString(event.getX()));
                            if((int)event.getX() % 15 == 0 || (int)event.getY() % 15 == 0) {
                                if (process[1] < 100) {
                                    bubble(event.getX(), event.getY() + (115 * density2));
                                    bubbleincrement(c2, process[1], process[1] + 5, 2);
                                    soapflag = true;
                                } else {
                                    final MediaPlayer clickaudio = MediaPlayer.create(getApplicationContext(), R.raw.cancel);
                                    if (!mutestate[0]) {
                                        clickaudio.start();
                                        clickaudio.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                                            public void onCompletion(MediaPlayer mp) {
                                                clickaudio.release();

                                            }

                                            ;
                                        });
                                    }

                                    //if (!mutestate[0]) cancel.start();
                                    eyesrejectanimation();
                                    if (vibration == true)
                                        vibrate(200);
                                }


                                //
                            }

                        }

                        if ((v == lin || v==flyframe) && view34.getId() == soap1img.getId()) {
                            if((int)event.getX() % 15 == 0 || (int)event.getY() % 15 == 0)
                            {
                                if (process[1] < 100) {
                                    bubble(event.getX(), event.getY() + (115 * density2));
                                    bubbleincrement(c2, process[1], process[1] + 5, 2);soapflag = true;
                                } else {
                                    final MediaPlayer clickaudio = MediaPlayer.create(getApplicationContext(), R.raw.cancel);
                                    if (!mutestate[0]) {
                                        clickaudio.start();
                                        clickaudio.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                                            public void onCompletion(MediaPlayer mp) {
                                                clickaudio.release();

                                            }

                                            ;
                                        });
                                    }

                                    //if (!mutestate[0]) cancel.start();
                                    eyesrejectanimation();
                                    if (vibration == true)
                                        vibrate(200);
                                }

                                //
                            }

                        }

                        if ((v == lin || v==flyframe) && view34.getId() == soap2img.getId()) {
                            if((int)event.getX() % 15 == 0 || (int)event.getY() % 15 == 0)
                            {
                                if (process[1] < 100) {
                                    bubble(event.getX(), event.getY() + (115 * density2));
                                    bubbleincrement(c2, process[1], process[1] + 5, 2);soapflag = true;
                                } else {
                                    final MediaPlayer clickaudio = MediaPlayer.create(getApplicationContext(), R.raw.cancel);
                                    if (!mutestate[0]) {
                                        clickaudio.start();
                                        clickaudio.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                                            public void onCompletion(MediaPlayer mp) {
                                                clickaudio.release();

                                            }

                                            ;
                                        });
                                    }

                                    //if (!mutestate[0]) cancel.start();
                                    eyesrejectanimation();
                                    if (vibration == true)
                                        vibrate(200);
                                }

                                //
                            }

                        }


                        if ((v == lin || v==flyframe) && view34.getId() == cellspongeimg.getId()) {
                            if((int)event.getX() % 15 == 0 || (int)event.getY() % 15 == 0)
                            {
                                if (process[1] < 100) {
                                    bubble(event.getX(), event.getY() + (115 * density2));
                                    bubbleincrement(c2, process[1], process[1] + 5, 2);soapflag = true;
                                } else {
                                    final MediaPlayer clickaudio = MediaPlayer.create(getApplicationContext(), R.raw.cancel);
                                    if (!mutestate[0]) {
                                        clickaudio.start();
                                        clickaudio.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                                            public void onCompletion(MediaPlayer mp) {
                                                clickaudio.release();

                                            }

                                            ;
                                        });
                                    }

                                    //if (!mutestate[0]) cancel.start();
                                    eyesrejectanimation();
                                    if (vibration == true)
                                        vibrate(200);
                                }

                                //
                            }

                        }

                        if ((v == lin || v==flyframe)  && view34.getId() == darkspongeimg.getId()) {
                            if((int)event.getX() % 15 == 0 || (int)event.getY() % 15 == 0)
                            {
                                if (process[1] < 100) {
                                    bubble(event.getX(), event.getY() + (115 * density2));
                                    bubbleincrement(c2, process[1], process[1] + 5, 2);soapflag = true;
                                } else {
                                    final MediaPlayer clickaudio = MediaPlayer.create(getApplicationContext(), R.raw.cancel);
                                    if (!mutestate[0]) {
                                        clickaudio.start();
                                        clickaudio.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                                            public void onCompletion(MediaPlayer mp) {
                                                clickaudio.release();

                                            }

                                            ;
                                        });
                                    }

                                    //if (!mutestate[0]) cancel.start();
                                    eyesrejectanimation();
                                    if (vibration == true)
                                        vibrate(200);
                                }

                                //
                            }

                        }

                        if ((v == lin || v==flyframe)  && view34.getId() == seaspongeimg.getId()) {
                            if((int)event.getX() % 15 == 0 || (int)event.getY() % 15 == 0)
                            {
                                if (process[1] < 100) {
                                    bubble(event.getX(), event.getY() + (115 * density2));
                                    bubbleincrement(c2, process[1], process[1] + 5, 2);soapflag = true;
                                } else {
                                    final MediaPlayer clickaudio = MediaPlayer.create(getApplicationContext(), R.raw.cancel);
                                    if (!mutestate[0]) {
                                        clickaudio.start();
                                        clickaudio.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                                            public void onCompletion(MediaPlayer mp) {
                                                clickaudio.release();

                                            }

                                            ;
                                        });
                                    }

                                    //if (!mutestate[0]) cancel.start();
                                    eyesrejectanimation();
                                    if (vibration == true)
                                        vibrate(200);
                                }

                                //
                            }

                        }

                        if (v == lin && view34.getId() == sleeppotionimg.getId()) {
                            //bubble(event.getX(),event.getY()+(115*density2));
                            //potionincrementsleep(cfour, process[3], 100, 3);

                        }

                        if (v == lin && view34.getId() == hungerpotionimg.getId()) {
                            //bubble(event.getX(),event.getY()+(115*density2));
                           // potionincrementhunger(c1, process[0], 100, 0);

                        }


                        if (v == lin && view34.getId() == hygienepotionimg.getId()) {
                           // bubble(event.getX(),event.getY()+(115*density2));
                            //potionincrementhygiene(c2, process[1], 100, 1);

                        }

                        if (v == lin && view34.getId() == lovepotionimg.getId()) {
                           // bubble(event.getX(),event.getY()+(115*density2));
                            //potionincrementlove(csix, process[5], 100, 5);

                        }

                        if (v == lin && view34.getId() == gamepotionimg.getId()) {
                            //bubble(event.getX(),event.getY()+(115*density2));


                        }

                        if (v == lin && view34.getId() == allinpotionimg.getId()) {
                            //bubble(event.getX(),event.getY()+(115*density2));
                           /* potionincrementsleep(cfour, process[3], 100, 3);
                            potionincrementhunger(c1, process[0], 100, 0);
                            potionincrementhygiene(c2, process[1], 100, 1);
                            potionincrementlove(csix, process[5], 100, 5);
                            potionincrementwc(c3,process[2],100,2);*/
                        }



                        int[] location={0,0};



                        float opposite1 = event.getY() - setY - myvalueyfinal2;
                        float adjacent1 = event.getX() - setX - myvaluexfinal;

                        float oppositeright1 = event.getY() - setrightY - myvalueyfinalright2;
                        float adjacentright1 = event.getX() - setrightX - myvaluexfinalright;


                        double degree1 = Math.atan(opposite1 / adjacent1);
                        Float dX1 = (float) (distancex * density2 * Math.cos(degree1));
                        Float dY1 = (float) (distancey * density2 * Math.sin(degree1));

                        double degreeright1 = Math.atan(oppositeright1 / adjacentright1);
                        Float dX1right = (float) (distancex * density2 * Math.cos(degreeright1));
                        Float dY1right = (float) (distancey * density2 * Math.sin(degreeright1));


                        opposite1 = event.getY() - setY - myvalueyfinal2;
                        adjacent1 = event.getX() - setX - myvaluexfinal;

                        oppositeright1 = event.getY() - setrightY - myvalueyfinalright2;
                        adjacentright1 = event.getX() - setrightX - myvaluexfinalright;


                        degree1 = Math.atan(opposite1 / adjacent1);
                        dX1 = (float) (distancex * density2 * Math.cos(degree1));
                        dY1 = (float) (distancey * density2 * Math.sin(degree1));

                        degreeright1 = Math.atan(oppositeright1 / adjacentright1);
                        dX1right = (float) (distancex * density2 * Math.cos(degreeright1));
                        dY1right = (float) (distancey * density2 * Math.sin(degreeright1));


                        if (adjacent1 < 0) {
                            dX1 = dX1 * -1;
                            dY1 = dY1 * -1;
                        }
                        if (adjacentright1 < 0) {
                            dX1right = dX1right * -1;
                            dY1right = dY1right * -1;
                        }
                        // else if (adjacent1 < 0 && opposite1<0){dX1=dX1*-1;}


                        movement.animate()
                                .x(setX + dX1)
                                .y(setY + dY1)
                                .setDuration(0)
                                .start();

                        righteyeimage.animate()
                                .x(setrightX + dX1right)
                                .y(setrightY + dY1right)
                                .setDuration(0)
                                .start();


                        break;
                    case DragEvent.ACTION_DRAG_EXITED:



                        break;
                    case DragEvent.ACTION_DROP:





                        mvm.setImageBitmap(croppedBitmapmouth1);
                        fmouthupimg.setImageBitmap(croppedBitmapmouth2);
                        final Animation mAnimation2;
                        mAnimation2 = new TranslateAnimation(0, 0, 0, 30);
                        // mAnimation = new TranslateAnimation(0, 0, -20, 0);

                       // mAnimation2.setDuration(300);
                        //mAnimation2.setFillAfter(true);
                        //mAnimation2.setRepeatCount(-1);
                        //mAnimation2.setRepeatMode(Animation.REVERSE);
                        //mvm.setAnimation(mAnimation2);
                        mvm.setVisibility(View.VISIBLE);
                        fmouthupimg.setVisibility(View.VISIBLE);
                        View view = (View) event.getLocalState();



                        if (v == lin && view.getId() == pizzaimp.getId()) {


                            if ( process[0] <100)

                            {

                                marketarray[pizzaindex] = marketarray[pizzaindex] - 1;
                                if (marketarray[pizzaindex] <= 0) removefood(pizzaindex);
                                menu(pizzaindex);
                                printfood(pizzaindex);

                                final MediaPlayer clickaudio = MediaPlayer.create(getApplicationContext(), R.raw.eatsound);
                                if(!mutestate[0]) {
                                    clickaudio.start();
                                    clickaudio.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                                        public void onCompletion(MediaPlayer mp) {
                                            clickaudio.release();

                                        }

                                        ;
                                    });
                                }

                            }

                        } else if (v == lin && view.getId() == meaticonimg.getId()) {


                            if ( process[0] <100)

                            {
                                marketarray[meatindex] = marketarray[meatindex] - 1;

                                if (marketarray[meatindex] <= 0) removefood(meatindex);
                                menu(meatindex);
                                printfood(meatindex);


                                final MediaPlayer clickaudio = MediaPlayer.create(getApplicationContext(), R.raw.eatsound);
                                if(!mutestate[0]) {
                                    clickaudio.start();
                                    clickaudio.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                                        public void onCompletion(MediaPlayer mp) {
                                            clickaudio.release();

                                        }

                                        ;
                                    });
                                }
                            }
                        }









                        else if (v == lin && view.getId() == hamburgerimg.getId()) {

                            if ( process[0] <100)

                            {
                                marketarray[hamburgerindex] = marketarray[hamburgerindex] - 1;

                                if (marketarray[hamburgerindex] <= 0) removefood(hamburgerindex);
                                menu(hamburgerindex);
                                printfood(hamburgerindex);

                                final MediaPlayer clickaudio = MediaPlayer.create(getApplicationContext(), R.raw.eatsound);
                                if(!mutestate[0]) {
                                    clickaudio.start();
                                    clickaudio.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                                        public void onCompletion(MediaPlayer mp) {
                                            clickaudio.release();

                                        }

                                        ;
                                    });
                                }
                            }
                        }

                        else if (v == lin && view.getId() == watermelonimg.getId()) {
                            if ( process[0] <100)

                            {
                                marketarray[watermelonindex] = marketarray[watermelonindex] - 1;

                                if (marketarray[watermelonindex] <= 0) removefood(watermelonindex);
                                menu(watermelonindex);
                                printfood(watermelonindex);

                                final MediaPlayer clickaudio = MediaPlayer.create(getApplicationContext(), R.raw.eatsound);
                                if(!mutestate[0]) {
                                    clickaudio.start();
                                    clickaudio.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                                        public void onCompletion(MediaPlayer mp) {
                                            clickaudio.release();

                                        }

                                        ;
                                    });
                                }
                            }
                        }

                        else if (v == lin && view.getId() == tomatoimg.getId()) {
                            if ( process[0] <100)

                            {
                                marketarray[tomatoindex] = marketarray[tomatoindex] - 1;

                                if (marketarray[tomatoindex] <= 0) removefood(tomatoindex);
                                menu(tomatoindex);
                                printfood(tomatoindex);

                                final MediaPlayer clickaudio = MediaPlayer.create(getApplicationContext(), R.raw.eatsound);
                                if(!mutestate[0]) {
                                    clickaudio.start();
                                    clickaudio.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                                        public void onCompletion(MediaPlayer mp) {
                                            clickaudio.release();

                                        }

                                        ;
                                    });
                                }
                            }
                        }

                        else if (v == lin && view.getId() == pumpkinimg.getId()) {
                            if ( process[0] <100)

                            {
                                marketarray[pumpkinindex] = marketarray[pumpkinindex] - 1;

                                if (marketarray[pumpkinindex] <= 0) removefood(pumpkinindex);
                                menu(pumpkinindex);

                                final MediaPlayer clickaudio = MediaPlayer.create(getApplicationContext(), R.raw.eatsound);
                                if(!mutestate[0]) {
                                    clickaudio.start();
                                    clickaudio.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                                        public void onCompletion(MediaPlayer mp) {
                                            clickaudio.release();

                                        }

                                        ;
                                    });
                                }
                            }
                        }
                        else if (v == lin && view.getId() == peesimg.getId()) {

                            if ( process[0] <100)

                            {

                                marketarray[peesindex] = marketarray[peesindex] - 1;

                                if (marketarray[peesindex] <= 0) removefood(peesindex);
                                menu(peesindex);
                                printfood(peesindex);

                                final MediaPlayer clickaudio = MediaPlayer.create(getApplicationContext(), R.raw.eatsound);
                                if(!mutestate[0]) {
                                    clickaudio.start();
                                    clickaudio.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                                        public void onCompletion(MediaPlayer mp) {
                                            clickaudio.release();

                                        }

                                        ;
                                    });
                                }
                            }
                        }
                        else if (v == lin && view.getId() == kiwiimg.getId()) {
                            if ( process[0] <100)

                            {
                                marketarray[kiwiindex] = marketarray[kiwiindex] - 1;

                                if (marketarray[kiwiindex] <= 0) removefood(kiwiindex);
                                menu(kiwiindex);
                                printfood(kiwiindex);

                                final MediaPlayer clickaudio = MediaPlayer.create(getApplicationContext(), R.raw.eatsound);
                                if(!mutestate[0]) {
                                    clickaudio.start();
                                    clickaudio.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                                        public void onCompletion(MediaPlayer mp) {
                                            clickaudio.release();

                                        }

                                        ;
                                    });
                                }
                            }
                        }
                        else if (v == lin && view.getId() == hotdogimg.getId()) {
                            if ( process[0] <100)

                            {
                                marketarray[hotdogindex] = marketarray[hotdogindex] - 1;

                                if (marketarray[hotdogindex] <= 0) removefood(hotdogindex);
                                menu(hotdogindex);
                                printfood(hotdogindex);

                                final MediaPlayer clickaudio = MediaPlayer.create(getApplicationContext(), R.raw.eatsound);
                                if(!mutestate[0]) {
                                    clickaudio.start();
                                    clickaudio.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                                        public void onCompletion(MediaPlayer mp) {
                                            clickaudio.release();

                                        }

                                        ;
                                    });
                                }
                            }
                        }

                        else if (v == lin && view.getId() == cornimg.getId()) {
                            if ( process[0] <100)

                            {
                                marketarray[cornindex] = marketarray[cornindex] - 1;

                                if (marketarray[cornindex] <= 0) removefood(cornindex);
                                menu(cornindex);
                                printfood(cornindex);

                                final MediaPlayer clickaudio = MediaPlayer.create(getApplicationContext(), R.raw.eatsound);
                                if(!mutestate[0]) {
                                    clickaudio.start();
                                    clickaudio.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                                        public void onCompletion(MediaPlayer mp) {
                                            clickaudio.release();

                                        }

                                        ;
                                    });
                                }
                            }
                        }

                        else if (v == lin && view.getId() == chilisimg.getId()) {
                            if ( process[0] <100)

                            {
                                marketarray[chilisindex] = marketarray[chilisindex] - 1;

                                if (marketarray[chilisindex] <= 0) removefood(chilisindex);
                                menu(chilisindex);
                                printfood(chilisindex);

                                final MediaPlayer clickaudio = MediaPlayer.create(getApplicationContext(), R.raw.eatsound);
                                if(!mutestate[0]) {
                                    clickaudio.start();
                                    clickaudio.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                                        public void onCompletion(MediaPlayer mp) {
                                            clickaudio.release();

                                        }

                                        ;
                                    });
                                }
                            }
                        }

                        else if (v == lin && view.getId() == broccoliimg.getId()) {
                            if ( process[0] <100)

                            {
                                marketarray[broccoliindex] = marketarray[broccoliindex] - 1;

                                if (marketarray[broccoliindex] <= 0) removefood(broccoliindex);
                                menu(broccoliindex);
                                printfood(broccoliindex);

                                final MediaPlayer clickaudio = MediaPlayer.create(getApplicationContext(), R.raw.eatsound);
                                if(!mutestate[0]) {
                                    clickaudio.start();
                                    clickaudio.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                                        public void onCompletion(MediaPlayer mp) {
                                            clickaudio.release();

                                        }

                                        ;
                                    });
                                }
                            }
                        }

                        else if (v == lin && view.getId() == bananaimg.getId()) {
                            if ( process[0] <100)

                            {
                                marketarray[bananaindex] = marketarray[bananaindex] - 1;

                                if (marketarray[bananaindex] <= 0) removefood(bananaindex);
                                menu(bananaindex);
                                printfood(bananaindex);

                                final MediaPlayer clickaudio = MediaPlayer.create(getApplicationContext(), R.raw.eatsound);
                                if(!mutestate[0]) {
                                    clickaudio.start();
                                    clickaudio.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                                        public void onCompletion(MediaPlayer mp) {
                                            clickaudio.release();

                                        }

                                        ;
                                    });
                                }
                            }
                        }

                        else if (v == lin && view.getId() == siskebapimg.getId()) {
                            if ( process[0] <100)

                            {
                                marketarray[siskebapindex] = marketarray[siskebapindex] - 1;

                                if (marketarray[siskebapindex] <= 0) removefood(siskebapindex);
                                menu(siskebapindex);
                                printfood(siskebapindex);

                                final MediaPlayer clickaudio = MediaPlayer.create(getApplicationContext(), R.raw.eatsound);
                                if(!mutestate[0]) {
                                    clickaudio.start();
                                    clickaudio.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                                        public void onCompletion(MediaPlayer mp) {
                                            clickaudio.release();

                                        }

                                        ;
                                    });
                                }
                            }
                        }
                        else if (v == lin && view.getId() == regional1img.getId()) {
                            if ( process[0] <100)

                            {
                                marketarray[regional1index] = marketarray[regional1index] - 1;

                                if (marketarray[regional1index] <= 0) removefood(regional1index);
                                menu(regional1index);
                                printfood(regional1index);

                                final MediaPlayer clickaudio = MediaPlayer.create(getApplicationContext(), R.raw.eatsound);
                                if(!mutestate[0]) {
                                    clickaudio.start();
                                    clickaudio.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                                        public void onCompletion(MediaPlayer mp) {
                                            clickaudio.release();

                                        }

                                        ;
                                    });
                                }
                            }
                        }

                        else if (v == lin && view.getId() == regional2img.getId()) {
                            if ( process[0] <100)

                            {
                                marketarray[regional2index] = marketarray[regional2index] - 1;

                                if (marketarray[regional2index] <= 0) removefood(regional2index);
                                menu(regional2index);
                                printfood(regional2index);

                                final MediaPlayer clickaudio = MediaPlayer.create(getApplicationContext(), R.raw.eatsound);
                                if(!mutestate[0]) {
                                    clickaudio.start();
                                    clickaudio.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                                        public void onCompletion(MediaPlayer mp) {
                                            clickaudio.release();

                                        }

                                        ;
                                    });
                                }
                            }
                        }

                        else if (v == lin && view.getId() == regional3img.getId()) {
                            if ( process[0] <100)

                            {
                                marketarray[regional3index] = marketarray[regional3index] - 1;

                                if (marketarray[regional3index] <= 0) removefood(regional3index);
                                menu(regional3index);
                                printfood(regional3index);

                                final MediaPlayer clickaudio = MediaPlayer.create(getApplicationContext(), R.raw.eatsound);
                                if(!mutestate[0]) {
                                    clickaudio.start();
                                    clickaudio.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                                        public void onCompletion(MediaPlayer mp) {
                                            clickaudio.release();

                                        }

                                        ;
                                    });
                                }
                            }
                        }

                        else if (v == lin && view.getId() == regional4img.getId()) {
                            if ( process[0] <100)

                            {
                                marketarray[regional4index] = marketarray[regional4index] - 1;

                                if (marketarray[regional4index] <= 0) removefood(regional4index);
                                menu(regional4index);
                                printfood(regional4index);

                                final MediaPlayer clickaudio = MediaPlayer.create(getApplicationContext(), R.raw.eatsound);
                                if(!mutestate[0]) {
                                    clickaudio.start();
                                    clickaudio.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                                        public void onCompletion(MediaPlayer mp) {
                                            clickaudio.release();

                                        }

                                        ;
                                    });
                                }
                            }
                        }

                        else if (v == lin && view.getId() == regional5img.getId()) {
                            if ( process[0] <100)

                            {
                                marketarray[regional5index] = marketarray[regional5index] - 1;

                                if (marketarray[regional5index] <= 0) removefood(regional5index);
                                menu(regional5index);
                                printfood(regional5index);

                                final MediaPlayer clickaudio = MediaPlayer.create(getApplicationContext(), R.raw.eatsound);
                                if(!mutestate[0]) {
                                    clickaudio.start();
                                    clickaudio.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                                        public void onCompletion(MediaPlayer mp) {
                                            clickaudio.release();

                                        }

                                        ;
                                    });
                                }
                            }
                        }

                        else if (v == lin && view.getId() == regional6img.getId()) {
                            if ( process[0] <100)

                            {
                                marketarray[regional6index] = marketarray[regional6index] - 1;

                                if (marketarray[regional6index] <= 0) removefood(regional6index);
                                menu(regional6index);
                                printfood(regional6index);

                                final MediaPlayer clickaudio = MediaPlayer.create(getApplicationContext(), R.raw.eatsound);
                                if(!mutestate[0]) {
                                    clickaudio.start();
                                    clickaudio.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                                        public void onCompletion(MediaPlayer mp) {
                                            clickaudio.release();

                                        }

                                        ;
                                    });
                                }
                            }
                        }

                        else if (v == lin && view.getId() == drinks1img.getId()) {
                            if ( process[0] <100)

                            {
                                marketarray[drinks1index] = marketarray[drinks1index] - 1;

                                if (marketarray[drinks1index] <= 0) removefood(drinks1index);
                                menu(drinks1index);
                                printfood(drinks1index);
                                drinkflag = true;
                                final MediaPlayer clickaudio = MediaPlayer.create(getApplicationContext(), R.raw.drink);
                                if(!mutestate[0]) {
                                    clickaudio.start();
                                    clickaudio.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                                        public void onCompletion(MediaPlayer mp) {
                                            clickaudio.release();

                                        }

                                        ;
                                    });
                                }
                            }
                        }

                        else if (v == lin && view.getId() == drinks2img.getId()) {
                            if ( process[0] <100)

                            {
                                marketarray[drinks2index] = marketarray[drinks2index] - 1;

                                if (marketarray[drinks2index] <= 0) removefood(drinks2index);
                                menu(drinks2index);
                                printfood(drinks2index);
                                drinkflag = true;
                                final MediaPlayer clickaudio = MediaPlayer.create(getApplicationContext(), R.raw.drink);
                                if(!mutestate[0]) {
                                    clickaudio.start();
                                    clickaudio.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                                        public void onCompletion(MediaPlayer mp) {
                                            clickaudio.release();

                                        }

                                        ;
                                    });
                                }
                            }
                        }
                        else if (v == lin && view.getId() == drinks3img.getId()) {
                            if ( process[0] <100)

                            {
                                marketarray[drinks3index] = marketarray[drinks3index] - 1;

                                if (marketarray[drinks3index] <= 0) removefood(drinks3index);
                                menu(drinks3index);
                                printfood(drinks3index);
                                drinkflag = true;
                                final MediaPlayer clickaudio = MediaPlayer.create(getApplicationContext(), R.raw.drink);
                                if(!mutestate[0]) {
                                    clickaudio.start();
                                    clickaudio.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                                        public void onCompletion(MediaPlayer mp) {
                                            clickaudio.release();

                                        }

                                        ;
                                    });
                                }
                            }
                        }

                        else if (v == lin && view.getId() == drinks4img.getId()) {
                            if ( process[0] <100)

                            {
                                marketarray[drinks4index] = marketarray[drinks4index] - 1;

                                if (marketarray[drinks4index] <= 0) removefood(drinks4index);
                                menu(drinks4index);
                                printfood(drinks4index);
                                drinkflag = true;
                                final MediaPlayer clickaudio = MediaPlayer.create(getApplicationContext(), R.raw.drink);
                                if(!mutestate[0]) {
                                    clickaudio.start();
                                    clickaudio.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                                        public void onCompletion(MediaPlayer mp) {
                                            clickaudio.release();

                                        }

                                        ;
                                    });
                                }
                            }
                        }
                        else if (v == lin && view.getId() == drinks5img.getId()) {
                            if ( process[0] <100)

                            {
                                marketarray[drinks5index] = marketarray[drinks5index] - 1;

                                if (marketarray[drinks5index] <= 0) removefood(drinks5index);
                                menu(drinks5index);
                                printfood(drinks5index);
                                drinkflag = true;
                                final MediaPlayer clickaudio = MediaPlayer.create(getApplicationContext(), R.raw.drink);
                                if(!mutestate[0]) {
                                    clickaudio.start();
                                    clickaudio.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                                        public void onCompletion(MediaPlayer mp) {
                                            clickaudio.release();

                                        }

                                        ;
                                    });
                                }
                            }
                        }

                        else if (v == lin && view.getId() == drinks6img.getId()) {
                            if ( process[0] <100)

                            {
                                marketarray[drinks6index] = marketarray[drinks6index] - 1;

                                if (marketarray[drinks6index] <= 0) removefood(drinks6index);
                                menu(drinks6index);
                                printfood(drinks6index);
                                drinkflag = true;
                                final MediaPlayer clickaudio = MediaPlayer.create(getApplicationContext(), R.raw.drink);
                                if(!mutestate[0]) {
                                    clickaudio.start();
                                    clickaudio.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                                        public void onCompletion(MediaPlayer mp) {
                                            clickaudio.release();

                                        }

                                        ;
                                    });
                                }
                            }
                        }
                        else if (v == lin && view.getId() == desert1img.getId()) {
                            if ( process[0] <100)

                            {
                                marketarray[desert1index] = marketarray[desert1index] - 1;

                                if (marketarray[desert1index] <= 0) removefood(desert1index);
                                menu(desert1index);
                                printfood(desert1index);
                                final MediaPlayer clickaudio = MediaPlayer.create(getApplicationContext(), R.raw.eatsound);
                                if(!mutestate[0]) {
                                    clickaudio.start();
                                    clickaudio.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                                        public void onCompletion(MediaPlayer mp) {
                                            clickaudio.release();

                                        }

                                        ;
                                    });
                                }
                            }
                        }
                        else if (v == lin && view.getId() == desert2img.getId()) {
                            if ( process[0] <100)

                            {
                                marketarray[desert2index] = marketarray[desert2index] - 1;

                                if (marketarray[desert2index] <= 0) removefood(desert2index);
                                menu(desert2index);
                                printfood(desert2index);
                                final MediaPlayer clickaudio = MediaPlayer.create(getApplicationContext(), R.raw.eatsound);
                                if(!mutestate[0]) {
                                    clickaudio.start();
                                    clickaudio.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                                        public void onCompletion(MediaPlayer mp) {
                                            clickaudio.release();

                                        }

                                        ;
                                    });
                                }
                            }
                        }

                        else if (v == lin && view.getId() == desert3img.getId()) {

                            marketarray[desert3index]=marketarray[desert3index]-1;

                            if( marketarray[desert3index]<=0) removefood(desert3index);
                            menu(desert3index);
                            printfood(desert3index);

                            final MediaPlayer clickaudio = MediaPlayer.create(getApplicationContext(), R.raw.eatsound);
                            if(!mutestate[0]) {
                                clickaudio.start();
                                clickaudio.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                                    public void onCompletion(MediaPlayer mp) {
                                        clickaudio.release();

                                    }

                                    ;
                                });
                            }
                        }

                        else if (v == lin && view.getId() == desert4img.getId()) {
                            if ( process[0] <100)

                            {
                                marketarray[desert4index] = marketarray[desert4index] - 1;

                                if (marketarray[desert4index] <= 0) removefood(desert4index);
                                menu(desert4index);
                                printfood(desert4index); final MediaPlayer clickaudio = MediaPlayer.create(getApplicationContext(), R.raw.eatsound);
                                if(!mutestate[0]) {
                                    clickaudio.start();
                                    clickaudio.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                                        public void onCompletion(MediaPlayer mp) {
                                            clickaudio.release();

                                        }

                                        ;
                                    });
                                }
                            }
                        }


                        else if (v == lin && view.getId() == desert5img.getId()) {
                            if ( process[0] <100)

                            {
                                marketarray[desert5index] = marketarray[desert5index] - 1;

                                if (marketarray[desert5index] <= 0) removefood(desert5index);
                                menu(desert5index);
                                printfood(desert5index); final MediaPlayer clickaudio = MediaPlayer.create(getApplicationContext(), R.raw.eatsound);
                                if(!mutestate[0]) {
                                    clickaudio.start();
                                    clickaudio.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                                        public void onCompletion(MediaPlayer mp) {
                                            clickaudio.release();

                                        }

                                        ;
                                    });
                                }
                            }
                        }
                        else if (v == lin && view.getId() == desert6img.getId()) {
                            if ( process[0] <100)

                            {
                                marketarray[desert6index] = marketarray[desert6index] - 1;

                                if (marketarray[desert6index] <= 0) removefood(desert6index);
                                menu(desert6index);
                                printfood(desert6index); final MediaPlayer clickaudio = MediaPlayer.create(getApplicationContext(), R.raw.eatsound);
                                if(!mutestate[0]) {
                                    clickaudio.start();
                                    clickaudio.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                                        public void onCompletion(MediaPlayer mp) {
                                            clickaudio.release();

                                        }

                                        ;
                                    });
                                }
                            }
                        }



                        else if (v == lin && view.getId() == cellspongeimg.getId()) {
                            if (soapflag) {
                                marketarray[cellspongeindex] = marketarray[cellspongeindex] - 1;

                                if (marketarray[cellspongeindex] <= 0) removefood(cellspongeindex);
                                //menu(greensoapindex);
                                printfood(cellspongeindex);
                                soapflag = false;
                            }
                        }

                        else if (v == lin && view.getId() == sleeppotionimg.getId()) {

                            if ( process[3] >=100 )
                            {


                                final MediaPlayer clickaudio = MediaPlayer.create(getApplicationContext(), R.raw.cancel);
                                if(!mutestate[0]) {
                                    clickaudio.start();
                                    clickaudio.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                                        public void onCompletion(MediaPlayer mp) {
                                            clickaudio.release();

                                        }

                                        ;
                                    });
                                }
                                eyesrejectanimation();
                                //if (!mutestate[0]) cancel.start();
                                // eyesrejectanimation();
                                if (vibration ==true)
                                    vibrate(200);
                            }



                           else {


                                potionincrementsleep(cfour, process[3], 100, 3);
                                movemouth(mx, my, mx1, my1, chx, chx1, chy, chy1);
                                marketarray[sleeppotionindex] = marketarray[sleeppotionindex] - 1;
                                if (marketarray[sleeppotionindex] <= 0)
                                    removefood(sleeppotionindex);
                                //menu(greensoapindex);
                                drinkflag = true;
                                printfood(sleeppotionindex);
                                final MediaPlayer clickaudio = MediaPlayer.create(getApplicationContext(), R.raw.drink);
                                if (!mutestate[0]) {
                                    clickaudio.start();
                                    clickaudio.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                                        public void onCompletion(MediaPlayer mp) {
                                            clickaudio.release();

                                        }

                                        ;
                                    });
                                }
                            }
                        }


                        else if (v == lin && view.getId() == hungerpotionimg.getId()) {


                            if ( process[0] >=100 )
                            {


                                final MediaPlayer clickaudio = MediaPlayer.create(getApplicationContext(), R.raw.cancel);
                                if(!mutestate[0]) {
                                    clickaudio.start();
                                    clickaudio.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                                        public void onCompletion(MediaPlayer mp) {
                                            clickaudio.release();

                                        }

                                        ;
                                    });
                                }
                                eyesrejectanimation();
                                //if (!mutestate[0]) cancel.start();
                                // eyesrejectanimation();
                                if (vibration ==true)
                                    vibrate(200);
                            }


                            else

                            {
                                potionincrementhunger(c1, process[0], 100, 0);
                                //potionincrementhunger(c1, process[0], 100, 0);
                                movemouth(mx, my, mx1, my1, chx, chx1, chy, chy1);
                                marketarray[hungerpotionindex] = marketarray[hungerpotionindex] - 1;

                                if (marketarray[hungerpotionindex] <= 0)
                                    removefood(hungerpotionindex);
                                //menu(greensoapindex);
                                drinkflag = true;
                                printfood(hungerpotionindex);
                                final MediaPlayer clickaudio = MediaPlayer.create(getApplicationContext(), R.raw.drink);
                                if (!mutestate[0]) {
                                    clickaudio.start();
                                    clickaudio.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                                        public void onCompletion(MediaPlayer mp) {
                                            clickaudio.release();

                                        }

                                        ;
                                    });
                                }
                            }



                        }


                        else if (v == lin && view.getId() == hygienepotionimg.getId()) {


                            if ( process[1] >=100 )
                            {


                                final MediaPlayer clickaudio = MediaPlayer.create(getApplicationContext(), R.raw.cancel);
                                if(!mutestate[0]) {
                                    clickaudio.start();
                                    clickaudio.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                                        public void onCompletion(MediaPlayer mp) {
                                            clickaudio.release();

                                        }

                                        ;
                                    });
                                }
                                eyesrejectanimation();
                                //if (!mutestate[0]) cancel.start();
                                // eyesrejectanimation();
                                if (vibration ==true)
                                    vibrate(200);
                            }



                           else {


                                movemouth(mx, my, mx1, my1, chx, chx1, chy, chy1);
                                potionincrementhygiene(c2, process[1], 100, 1);
                                marketarray[hygienepotionindex] = marketarray[hygienepotionindex] - 1;
                                if (marketarray[hygienepotionindex] <= 0)
                                    removefood(hygienepotionindex);
                                //menu(greensoapindex);
                                printfood(hygienepotionindex);
                                drinkflag = true;
                                final MediaPlayer clickaudio = MediaPlayer.create(getApplicationContext(), R.raw.drink);
                                if (!mutestate[0]) {
                                    clickaudio.start();
                                    clickaudio.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                                        public void onCompletion(MediaPlayer mp) {
                                            clickaudio.release();

                                        }

                                        ;
                                    });
                                }
                            }

                        }


                        else if (v == lin && view.getId() == lovepotionimg.getId()) {


                            if ( process[5] >=100 )
                            {


                                final MediaPlayer clickaudio = MediaPlayer.create(getApplicationContext(), R.raw.cancel);
                                if(!mutestate[0]) {
                                    clickaudio.start();
                                    clickaudio.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                                        public void onCompletion(MediaPlayer mp) {
                                            clickaudio.release();

                                        }

                                        ;
                                    });
                                }
                                eyesrejectanimation();
                                //if (!mutestate[0]) cancel.start();
                                // eyesrejectanimation();
                                if (vibration ==true)
                                    vibrate(200);
                            }

                            else {

                                potionincrementlove(csix, process[5], 100, 5);
                                movemouth(mx, my, mx1, my1, chx, chx1, chy, chy1);
                                marketarray[lovepotionindex] = marketarray[lovepotionindex] - 1;
                                if (marketarray[lovepotionindex] <= 0) removefood(lovepotionindex);
                                //menu(greensoapindex);
                                printfood(lovepotionindex);
                                drinkflag = true;

                                final MediaPlayer clickaudio = MediaPlayer.create(getApplicationContext(), R.raw.drink);
                                if (!mutestate[0]) {
                                    clickaudio.start();
                                    clickaudio.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                                        public void onCompletion(MediaPlayer mp) {
                                            clickaudio.release();

                                        }

                                        ;
                                    });
                                }
                            }
                        }

                        else if (v == lin && view.getId() == gamepotionimg.getId()) {



                            marketarray[gamepotionindex]=marketarray[gamepotionindex]-1;

                            if( marketarray[gamepotionindex]<=0) removefood(gamepotionindex);
                            //menu(greensoapindex);
                            printfood(gamepotionindex);
                            drinkflag = true;
                            final MediaPlayer clickaudio = MediaPlayer.create(getApplicationContext(), R.raw.drink);
                            if(!mutestate[0]) {
                                clickaudio.start();
                                clickaudio.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                                    public void onCompletion(MediaPlayer mp) {
                                        clickaudio.release();

                                    }

                                    ;
                                });
                            }

                        }

                        else if (v == lin && view.getId() == allinpotionimg.getId()  ) {


                            if ( process[0] >=100 && process[1] >=100 && process[2] >=100 && process[3] >=100 && process[5] >=100)
                            {


                                final MediaPlayer clickaudio = MediaPlayer.create(getApplicationContext(), R.raw.cancel);
                                if(!mutestate[0]) {
                                    clickaudio.start();
                                    clickaudio.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                                        public void onCompletion(MediaPlayer mp) {
                                            clickaudio.release();

                                        }

                                        ;
                                    });
                                }

                                //if (!mutestate[0]) cancel.start();
                                eyesrejectanimation();
                                if (vibration ==true)
                                    vibrate(200);
                            }


                            else {
                                originalcounterhunger = 0;
                                originalcounterhygiene = 0;
                                originalcounterwc = 0;
                                originalcountersleep= 0;
                                originalcounterlove= 0;
                                potionincrementsleep(cfour, process[3], 100, 3);
                                potionincrementhunger(c1, process[0], 100, 0);
                                potionincrementhygiene(c2, process[1], 100, 1);
                                potionincrementlove(csix, process[5], 100, 5);
                                potionincrementwc(c3,process[2],100,2);
                                movemouth(mx, my, mx1, my1, chx, chx1, chy, chy1);

                                marketarray[allinpotionindex]=marketarray[allinpotionindex]-1;

                                if( marketarray[allinpotionindex]<=0) removefood(allinpotionindex);
                                //menu(greensoapindex);
                                printfood(allinpotionindex);

                                drinkflag = true;
                                final MediaPlayer clickaudio = MediaPlayer.create(getApplicationContext(), R.raw.drink);
                                if(!mutestate[0]) {
                                    clickaudio.start();
                                    clickaudio.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                                        public void onCompletion(MediaPlayer mp) {
                                            clickaudio.release();

                                        }

                                        ;
                                    });
                                }


                            }
                        }



                        else if (v == lin && view.getId() == darkspongeimg.getId()) {

                            if (soapflag) {
                                marketarray[darkspongeindex] = marketarray[darkspongeindex] - 1;

                                if (marketarray[darkspongeindex] <= 0) removefood(darkspongeindex);
                                //menu(greensoapindex);
                                printfood(darkspongeindex);
                                soapflag = false;
                            }
                        }


                        else if (v == lin && view.getId() == seaspongeimg.getId()) {
                            if (soapflag) {
                                marketarray[seaspongeindex] = marketarray[seaspongeindex] - 1;

                                if (marketarray[seaspongeindex] <= 0) removefood(seaspongeindex);
                                //menu(greensoapindex);
                                printfood(seaspongeindex);soapflag = false;
                            }
                        }




                        else if (v == lin && view.getId() == greensoapimg.getId()) {
                            if (soapflag) {
                                marketarray[greensoapindex] = marketarray[greensoapindex] - 1;

                                if (marketarray[greensoapindex] <= 0) removefood(greensoapindex);
                                //menu(greensoapindex);
                                printfood(greensoapindex);soapflag = false;
                            }
                        }

                        else if (v == lin && view.getId() == soap1img.getId()) {
                            if (soapflag) {
                                marketarray[soap1index] = marketarray[soap1index] - 1;

                                if (marketarray[soap1index] <= 0) removefood(soap1index);
                                //menu(greensoapindex);
                                printfood(soap1index);soapflag = false;
                            }

                        }
                        else if (v == lin && view.getId() == soap2img.getId()) {
                            if (soapflag) {
                                marketarray[soap2index] = marketarray[soap2index] - 1;

                                if (marketarray[soap2index] <= 0) removefood(soap2index);
                                //menu(greensoapindex);
                                printfood(soap2index);soapflag = false;
                            }
                        }




                        else if (v == lin && view.getId() == frenchfriesimg.getId()) {
                            if ( process[0] <100)

                            {
                                marketarray[frenchfriesindex] = marketarray[frenchfriesindex] - 1;

                                if (marketarray[frenchfriesindex] <= 0)
                                    removefood(frenchfriesindex);
                                menu(frenchfriesindex);
                                printfood(frenchfriesindex);  final MediaPlayer clickaudio = MediaPlayer.create(getApplicationContext(), R.raw.eatsound);
                                if(!mutestate[0]) {
                                    clickaudio.start();
                                    clickaudio.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                                        public void onCompletion(MediaPlayer mp) {
                                            clickaudio.release();

                                        }

                                        ;
                                    });
                                }
                            }
                        }


                        else if (v == lin && view.getId() == chickenlegimg.getId()) {



                            if ( process[0] <100)

                            {


                            marketarray[chickenlegindex]=marketarray[chickenlegindex]-1;

                            if( marketarray[chickenlegindex]<=0) removefood(chickenlegindex);
                            menu(chickenlegindex);
                            printfood(chickenlegindex); final MediaPlayer clickaudio = MediaPlayer.create(getApplicationContext(), R.raw.eatsound);
                                if(!mutestate[0]) {
                                    clickaudio.start();
                                    clickaudio.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                                        public void onCompletion(MediaPlayer mp) {
                                            clickaudio.release();

                                        }

                                        ;
                                    });
                                }
                            }

                        }

                        else if (v == lin && view.getId() == fishimg.getId()) {


                            if ( process[0] <100)

                            {
                                marketarray[fishindex] = marketarray[fishindex] - 1;

                                if (marketarray[fishindex] <= 0) removefood(fishindex);
                                menu(fishindex);
                                printfood(fishindex); final MediaPlayer clickaudio = MediaPlayer.create(getApplicationContext(), R.raw.eatsound);
                                if(!mutestate[0]) {
                                    clickaudio.start();
                                    clickaudio.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                                        public void onCompletion(MediaPlayer mp) {
                                            clickaudio.release();

                                        }

                                        ;
                                    });
                                }
                            }
                        }


                        else if (v == lin && view.getId() == appleimg.getId()) {

                            if ( process[0] <100)

                            {

                                marketarray[appleindex] = marketarray[appleindex] - 1;

                                if (marketarray[appleindex] <= 0) removefood(appleindex);
                                menu(appleindex);
                                printfood(appleindex); final MediaPlayer clickaudio = MediaPlayer.create(getApplicationContext(), R.raw.eatsound);
                                if(!mutestate[0]) {
                                    clickaudio.start();
                                    clickaudio.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                                        public void onCompletion(MediaPlayer mp) {
                                            clickaudio.release();

                                        }

                                        ;
                                    });
                                }
                            }
                        }

                        else if (v == lin && view.getId() == bostonrollimg.getId()) {

                            if ( process[0] <100)

                            {
                                marketarray[bostonrollindex] = marketarray[bostonrollindex] - 1;

                                if (marketarray[bostonrollindex] <= 0) removefood(bostonrollindex);
                                menu(bostonrollindex);
                                printfood(bostonrollindex); final MediaPlayer clickaudio = MediaPlayer.create(getApplicationContext(), R.raw.eatsound);
                                if(!mutestate[0]) {
                                    clickaudio.start();
                                    clickaudio.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                                        public void onCompletion(MediaPlayer mp) {
                                            clickaudio.release();

                                        }

                                        ;
                                    });
                                }
                            }
                        }
                        else if (v == lin && view.getId() == carrotimg.getId()) {

                            if ( process[0] <100)

                            {

                                marketarray[carrotindex] = marketarray[carrotindex] - 1;

                                if (marketarray[carrotindex] <= 0) removefood(carrotindex);
                                menu(carrotindex);
                                printfood(carrotindex); final MediaPlayer clickaudio = MediaPlayer.create(getApplicationContext(), R.raw.eatsound);
                                if(!mutestate[0]) {
                                    clickaudio.start();
                                    clickaudio.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                                        public void onCompletion(MediaPlayer mp) {
                                            clickaudio.release();

                                        }

                                        ;
                                    });
                                }

                            }
                        }

                        else if (v == lin && view.getId() == frenchtoastimg.getId()) {

                            if ( process[0] <100)

                            {

                                marketarray[frenchtoastindex] = marketarray[frenchtoastindex] - 1;

                                if (marketarray[frenchtoastindex] <= 0)
                                    removefood(frenchtoastindex);
                                menu(frenchtoastindex);
                                printfood(frenchtoastindex); final MediaPlayer clickaudio = MediaPlayer.create(getApplicationContext(), R.raw.eatsound);
                                if(!mutestate[0]) {
                                    clickaudio.start();
                                    clickaudio.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                                        public void onCompletion(MediaPlayer mp) {
                                            clickaudio.release();

                                        }

                                        ;
                                    });
                                }
                            }
                        }

                        else if (v == lin && view.getId() == meatarmimg.getId()) {

                            if ( process[0] <100)

                            {

                                marketarray[meatarmindex] = marketarray[meatarmindex] - 1;

                                if (marketarray[meatarmindex] <= 0) removefood(meatarmindex);
                                menu(meatarmindex);
                                printfood(meatarmindex); final MediaPlayer clickaudio = MediaPlayer.create(getApplicationContext(), R.raw.eatsound);
                                if(!mutestate[0]) {
                                    clickaudio.start();
                                    clickaudio.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                                        public void onCompletion(MediaPlayer mp) {
                                            clickaudio.release();

                                        }

                                        ;
                                    });
                                }
                            }
                        }

                        else if (v == lin && view.getId() == medisaladimg.getId()) {

                            if ( process[0] <100)

                            {

                                marketarray[medisaladindex] = marketarray[medisaladindex] - 1;

                                if (marketarray[medisaladindex] <= 0) removefood(medisaladindex);
                                menu(medisaladindex);
                                printfood(medisaladindex); final MediaPlayer clickaudio = MediaPlayer.create(getApplicationContext(), R.raw.eatsound);
                                if(!mutestate[0]) {
                                    clickaudio.start();
                                    clickaudio.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                                        public void onCompletion(MediaPlayer mp) {
                                            clickaudio.release();

                                        }

                                        ;
                                    });
                                }
                            }
                        }

                        else if (v == lin && view.getId() == noodleimg.getId()) {
                            if ( process[0] <100)

                            {
                                marketarray[noodleindex] = marketarray[noodleindex] - 1;

                                if (marketarray[noodleindex] <= 0) removefood(noodleindex);
                                menu(noodleindex);
                                printfood(noodleindex);
                                final MediaPlayer clickaudio = MediaPlayer.create(getApplicationContext(), R.raw.eatsound);
                                if (!mutestate[0]) {
                                    clickaudio.start();
                                    clickaudio.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                                        public void onCompletion(MediaPlayer mp) {
                                            clickaudio.release();

                                        }

                                        ;
                                    });
                                }
                            }
                        }

                        else if (v == lin && view.getId() == mixedsaladimg.getId()) {


                            if ( process[0] <100)

                            {

                                marketarray[mixedsaladindex] = marketarray[mixedsaladindex] - 1;

                                if (marketarray[mixedsaladindex] <= 0) removefood(mixedsaladindex);
                                menu(mixedsaladindex);
                                printfood(mixedsaladindex); final MediaPlayer clickaudio = MediaPlayer.create(getApplicationContext(), R.raw.eatsound);
                                if(!mutestate[0]) {
                                    clickaudio.start();
                                    clickaudio.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                                        public void onCompletion(MediaPlayer mp) {
                                            clickaudio.release();

                                        }

                                        ;
                                    });
                                }
                            }
                        }
                        else if (v == lin && view.getId() == onionringimg.getId()) {

                            if ( process[0] <100)

                            {

                                marketarray[onionringsindex] = marketarray[onionringsindex] - 1;

                                if (marketarray[onionringsindex] <= 0) removefood(onionringsindex);
                                menu(onionringsindex);
                                printfood(onionringsindex);
                                final MediaPlayer clickaudio = MediaPlayer.create(getApplicationContext(), R.raw.drink);
                                if(!mutestate[0]) {
                                    clickaudio.start();
                                    clickaudio.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                                        public void onCompletion(MediaPlayer mp) {
                                            clickaudio.release();

                                        }

                                        ;
                                    });
                                }
                            }
                        }

                        else if (v == lin && view.getId() == orangeimg.getId()) {

                            if ( process[0] <100)

                            {

                                marketarray[orangeindex] = marketarray[orangeindex] - 1;

                                if (marketarray[orangeindex] <= 0) removefood(orangeindex);
                                menu(orangeindex);
                                printfood(orangeindex); final MediaPlayer clickaudio = MediaPlayer.create(getApplicationContext(), R.raw.eatsound);
                                if(!mutestate[0]) {
                                    clickaudio.start();
                                    clickaudio.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                                        public void onCompletion(MediaPlayer mp) {
                                            clickaudio.release();

                                        }

                                        ;
                                    });
                                }
                            }
                        }

                        else if (v == lin && view.getId() == porkimg.getId()) {

                            if ( process[0] <100)

                            {

                                marketarray[porkindex] = marketarray[porkindex] - 1;

                                if (marketarray[porkindex] <= 0) removefood(porkindex);
                                menu(porkindex);
                                printfood(porkindex); final MediaPlayer clickaudio = MediaPlayer.create(getApplicationContext(), R.raw.eatsound);
                                if(!mutestate[0]) {
                                    clickaudio.start();
                                    clickaudio.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                                        public void onCompletion(MediaPlayer mp) {
                                            clickaudio.release();

                                        }

                                        ;
                                    });
                                }
                            }
                        }

                        else if (v == lin && view.getId() == mixedrollimg.getId()) {


                            if ( process[0] <100)

                            {
                                marketarray[mixedrollindex] = marketarray[mixedrollindex] - 1;

                                if (marketarray[mixedrollindex] <= 0) removefood(mixedrollindex);
                                menu(mixedrollindex);
                                printfood(mixedrollindex); final MediaPlayer clickaudio = MediaPlayer.create(getApplicationContext(), R.raw.eatsound);
                                if(!mutestate[0]) {
                                    clickaudio.start();
                                    clickaudio.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                                        public void onCompletion(MediaPlayer mp) {
                                            clickaudio.release();

                                        }

                                        ;
                                    });
                                }
                            }
                        }

                        else if (v == lin && view.getId() == salmonsushiimg.getId()) {


                            if ( process[0] <100)

                            {

                                marketarray[salmonsushiindex] = marketarray[salmonsushiindex] - 1;

                                if (marketarray[salmonsushiindex] <= 0)
                                    removefood(salmonsushiindex);
                                menu(salmonsushiindex);
                                printfood(salmonsushiindex); final MediaPlayer clickaudio = MediaPlayer.create(getApplicationContext(), R.raw.eatsound);
                                if(!mutestate[0]) {
                                    clickaudio.start();
                                    clickaudio.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                                        public void onCompletion(MediaPlayer mp) {
                                            clickaudio.release();

                                        }

                                        ;
                                    });
                                }
                            }
                        }

                        else if (v == lin && view.getId() == soupimg.getId()) {


                            if ( process[0] <100)

                            {

                                marketarray[soupindex] = marketarray[soupindex] - 1;

                                if (marketarray[soupindex] <= 0) removefood(soupindex);
                                menu(soupindex);
                                printfood(soupindex); final MediaPlayer clickaudio = MediaPlayer.create(getApplicationContext(), R.raw.eatsound);
                                if(!mutestate[0]) {
                                    clickaudio.start();
                                    clickaudio.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                                        public void onCompletion(MediaPlayer mp) {
                                            clickaudio.release();

                                        }

                                        ;
                                    });
                                }
                            }
                        }

                        else if (v == lin && view.getId() == squidimg.getId()) {


                            if ( process[0] <100)

                            {

                                marketarray[squidindex] = marketarray[squidindex] - 1;

                                if (marketarray[squidindex] <= 0) removefood(squidindex);
                                menu(squidindex);
                                printfood(squidindex); final MediaPlayer clickaudio = MediaPlayer.create(getApplicationContext(), R.raw.eatsound);
                                if(!mutestate[0]) {
                                    clickaudio.start();
                                    clickaudio.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                                        public void onCompletion(MediaPlayer mp) {
                                            clickaudio.release();

                                        }

                                        ;
                                    });
                                }
                            }
                        }

                        else if (v == lin && view.getId() == cokeimg.getId()) {

                            marketarray[cokeindex]=marketarray[cokeindex]-1;

                            if( marketarray[cokeindex]<=0) removefood(cokeindex);
                            menu(cokeindex);
                            drinkflag = true;
                            printfood(cokeindex); final MediaPlayer clickaudio = MediaPlayer.create(getApplicationContext(), R.raw.drink);
                            if(!mutestate[0]) {
                                clickaudio.start();
                                clickaudio.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                                    public void onCompletion(MediaPlayer mp) {
                                        clickaudio.release();

                                    }

                                    ;
                                });
                            }

                        }

                        else if (v == lin && view.getId() == brownieimg.getId()) {

                            if ( process[0] <100)

                            {

                                marketarray[brownieindex] = marketarray[brownieindex] - 1;

                                if (marketarray[brownieindex] <= 0) removefood(brownieindex);
                                menu(brownieindex);
                                printfood(brownieindex); final MediaPlayer clickaudio = MediaPlayer.create(getApplicationContext(), R.raw.eatsound);
                                if(!mutestate[0]) {
                                    clickaudio.start();
                                    clickaudio.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                                        public void onCompletion(MediaPlayer mp) {
                                            clickaudio.release();

                                        }

                                        ;
                                    });
                                }
                            }
                        }

                        else if (v == lin && view.getId() == cheesecakeimg.getId()) {

                            if ( process[0] <100)

                            {

                                marketarray[cheesecakeindex] = marketarray[cheesecakeindex] - 1;

                                if (marketarray[cheesecakeindex] <= 0) removefood(cheesecakeindex);
                                menu(cheesecakeindex);
                                printfood(cheesecakeindex); final MediaPlayer clickaudio = MediaPlayer.create(getApplicationContext(), R.raw.eatsound);
                                if(!mutestate[0]) {
                                    clickaudio.start();
                                    clickaudio.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                                        public void onCompletion(MediaPlayer mp) {
                                            clickaudio.release();

                                        }

                                        ;
                                    });
                                }
                            }
                        }

                        else if (v == lin && view.getId() == cheeseimg.getId()) {


                            if ( process[0] <100)

                            {
                                marketarray[cheeseindex] = marketarray[cheeseindex] - 1;

                                if (marketarray[cheeseindex] <= 0) removefood(cheeseindex);
                                menu(cheeseindex);
                                printfood(cheeseindex); final MediaPlayer clickaudio = MediaPlayer.create(getApplicationContext(), R.raw.eatsound);
                                if(!mutestate[0]) {
                                    clickaudio.start();
                                    clickaudio.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                                        public void onCompletion(MediaPlayer mp) {
                                            clickaudio.release();

                                        }

                                        ;
                                    });
                                }
                            }
                        }

                        else if (v == lin && view.getId() == juiceimg.getId()) {

                            if ( process[0] <100)

                            {
                                marketarray[juiceindex] = marketarray[juiceindex] - 1;


                                if (marketarray[juiceindex] <= 0) removefood(juiceindex);
                                menu(juiceindex);
                                printfood(juiceindex); final MediaPlayer clickaudio = MediaPlayer.create(getApplicationContext(), R.raw.drink);
                                if(!mutestate[0]) {
                                    clickaudio.start();
                                    clickaudio.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                                        public void onCompletion(MediaPlayer mp) {
                                            clickaudio.release();

                                        }

                                        ;
                                    });
                                }
                            }
                        }
                        View view3 = (View) event.getLocalState();
                         if ((v == lin) && !(view3.getId() == greensoapimg.getId() ||view3.getId() == soap2img.getId() || view3.getId() == soap1img.getId() ||view3.getId() == seaspongeimg.getId() || view3.getId() == darkspongeimg.getId() ||  view3.getId() == cellspongeimg.getId())) {

                          /*  mvm.animate()
                                .x(setXmouth)
                                .y(setYmouth)
                                .setDuration(0)
                                    .start();
                            fmouthupimg.animate()
                                    .x(setXmouthup)
                                    .y(setYmouthup)
                                    .setDuration(0)
                                    .start();
                            */

                             if ( process[0] >99 && view.getId() != allinpotionimg.getId() && view.getId() != hungerpotionimg.getId() && view.getId() != sleeppotionimg.getId() && view.getId() != hygienepotionimg.getId() && view.getId() != lovepotionimg.getId())

                             {


                                 final MediaPlayer clickaudio = MediaPlayer.create(getApplicationContext(), R.raw.cancel);
                                 if (!mutestate[0]) {
                                     clickaudio.start();
                                     clickaudio.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                                         public void onCompletion(MediaPlayer mp) {
                                             clickaudio.release();

                                         }

                                         ;
                                     });
                                 }

                                 //if (!mutestate[0]) cancel.start();
                                 eyesrejectanimation();
                                 if (vibration == true)
                                     vibrate(200);

                             }
                             else if( view.getId() != allinpotionimg.getId() && view.getId() != hungerpotionimg.getId() && view.getId() != sleeppotionimg.getId() && view.getId() != hygienepotionimg.getId() && view.getId() != lovepotionimg.getId())movemouth(mx, my, mx1, my1, chx, chx1, chy, chy1);


                           }





                        break;
                    case DragEvent.ACTION_DRAG_ENDED:


                        View view2 = (View) event.getLocalState();
                        if (v == lin && view2.getId() == meaticonimg.getId()) meaticonimg.setVisibility(View.VISIBLE);

                        //ImageView bveg1 = (ImageView) findViewById(R.id.buttonvegetable);
                        View view4 = (View) event.getLocalState();
                        if (v == lin && view4.getId() == pizzaimp.getId()) pizzaimp.setVisibility(View.VISIBLE);
                        if (v == lin && view4.getId() == hamburgerimg.getId()) hamburgerimg.setVisibility(View.VISIBLE);
                        if (v == lin && view4.getId() == greensoapimg.getId()) greensoapimg.setVisibility(View.VISIBLE);
                        if (v == lin && view4.getId() == soap1img.getId()) soap1img.setVisibility(View.VISIBLE);
                        if (v == lin && view4.getId() == soap2img.getId()) soap2img.setVisibility(View.VISIBLE);
                        if (v == lin && view4.getId() == sleeppotionimg.getId()) sleeppotionimg.setVisibility(View.VISIBLE);
                        if (v == lin && view4.getId() == hungerpotionimg.getId()) hungerpotionimg.setVisibility(View.VISIBLE);
                        if (v == lin && view4.getId() == hygienepotionimg.getId()) hygienepotionimg.setVisibility(View.VISIBLE);
                        if (v == lin && view4.getId() == lovepotionimg.getId()) lovepotionimg.setVisibility(View.VISIBLE);
                        if (v == lin && view4.getId() == gamepotionimg.getId()) gamepotionimg.setVisibility(View.VISIBLE);
                        if (v == lin && view4.getId() == allinpotionimg.getId()) allinpotionimg.setVisibility(View.VISIBLE);
                        if (v == lin && view4.getId() == watermelonimg.getId()) watermelonimg.setVisibility(View.VISIBLE);
                        if (v == lin && view4.getId() == tomatoimg.getId()) tomatoimg.setVisibility(View.VISIBLE);
                        if (v == lin && view4.getId() == pumpkinimg.getId()) pumpkinimg.setVisibility(View.VISIBLE);
                        if (v == lin && view4.getId() == peesimg.getId()) peesimg.setVisibility(View.VISIBLE);
                        if (v == lin && view4.getId() == kiwiimg.getId()) kiwiimg.setVisibility(View.VISIBLE);
                        if (v == lin && view4.getId() == hotdogimg.getId()) hotdogimg.setVisibility(View.VISIBLE);
                        if (v == lin && view4.getId() == cornimg.getId()) cornimg.setVisibility(View.VISIBLE);
                        if (v == lin && view4.getId() == chilisimg.getId()) chilisimg.setVisibility(View.VISIBLE);
                        if (v == lin && view4.getId() == broccoliimg.getId()) broccoliimg.setVisibility(View.VISIBLE);
                        if (v == lin && view4.getId() == bananaimg.getId()) bananaimg.setVisibility(View.VISIBLE);
                        if (v == lin && view4.getId() == regional1img.getId()) regional1img.setVisibility(View.VISIBLE);
                        if (v == lin && view4.getId() == regional2img.getId()) regional2img.setVisibility(View.VISIBLE);
                        if (v == lin && view4.getId() == regional3img.getId()) regional3img.setVisibility(View.VISIBLE);
                        if (v == lin && view4.getId() == regional4img.getId()) regional4img.setVisibility(View.VISIBLE);
                        if (v == lin && view4.getId() == regional5img.getId()) regional5img.setVisibility(View.VISIBLE);
                        if (v == lin && view4.getId() == regional6img.getId()) regional6img.setVisibility(View.VISIBLE);
                        if (v == lin && view4.getId() == siskebapimg.getId()) siskebapimg.setVisibility(View.VISIBLE);
                        if (v == lin && view4.getId() == drinks1img.getId()) drinks1img.setVisibility(View.VISIBLE);
                        if (v == lin && view4.getId() == drinks2img.getId()) drinks2img.setVisibility(View.VISIBLE);
                        if (v == lin && view4.getId() == drinks3img.getId()) drinks3img.setVisibility(View.VISIBLE);
                        if (v == lin && view4.getId() == drinks4img.getId()) drinks4img.setVisibility(View.VISIBLE);
                        if (v == lin && view4.getId() == drinks5img.getId()) drinks5img.setVisibility(View.VISIBLE);
                        if (v == lin && view4.getId() == drinks6img.getId()) drinks6img.setVisibility(View.VISIBLE);
                        if (v == lin && view4.getId() == desert1img.getId()) desert1img.setVisibility(View.VISIBLE);
                        if (v == lin && view4.getId() == desert2img.getId()) desert2img.setVisibility(View.VISIBLE);
                        if (v == lin && view4.getId() == desert3img.getId()) desert3img.setVisibility(View.VISIBLE);
                        if (v == lin && view4.getId() == desert4img.getId()) desert4img.setVisibility(View.VISIBLE);
                        if (v == lin && view4.getId() == desert5img.getId()) desert5img.setVisibility(View.VISIBLE);
                        if (v == lin && view4.getId() == desert6img.getId()) desert6img.setVisibility(View.VISIBLE);




                        if (v == lin && view4.getId() == cellspongeimg.getId()) cellspongeimg.setVisibility(View.VISIBLE);
                        if (v == lin && view4.getId() == darkspongeimg.getId()) darkspongeimg.setVisibility(View.VISIBLE);
                        if (v == lin && view4.getId() == seaspongeimg.getId()) seaspongeimg.setVisibility(View.VISIBLE);


                        if (v == lin && view4.getId() == frenchfriesimg.getId()) frenchfriesimg.setVisibility(View.VISIBLE);
                        if (v == lin && view4.getId() == chickenlegimg.getId()) chickenlegimg.setVisibility(View.VISIBLE);
                        if (v == lin && view4.getId() == fishimg.getId()) fishimg.setVisibility(View.VISIBLE);
                        if (v == lin && view4.getId() == appleimg.getId()) appleimg.setVisibility(View.VISIBLE);
                        if (v == lin && view4.getId() == bostonrollimg.getId()) bostonrollimg.setVisibility(View.VISIBLE);
                        if (v == lin && view4.getId() == carrotimg.getId()) carrotimg.setVisibility(View.VISIBLE);
                        if (v == lin && view4.getId() == frenchtoastimg .getId()) frenchtoastimg.setVisibility(View.VISIBLE);
                        if (v == lin && view4.getId() == meatarmimg.getId()) meatarmimg.setVisibility(View.VISIBLE);
                        if (v == lin && view4.getId() == medisaladimg.getId()) medisaladimg.setVisibility(View.VISIBLE);
                        if (v == lin && view4.getId() == noodleimg.getId()) noodleimg.setVisibility(View.VISIBLE);
                        if (v == lin && view4.getId() == mixedsaladimg.getId()) mixedsaladimg.setVisibility(View.VISIBLE);
                        if (v == lin && view4.getId() == onionringimg.getId()) onionringimg.setVisibility(View.VISIBLE);
                        if (v == lin && view4.getId() == orangeimg  .getId()) orangeimg.setVisibility(View.VISIBLE);
                        if (v == lin && view4.getId() == porkimg    .getId()) porkimg.setVisibility(View.VISIBLE);
                        if (v == lin && view4.getId() == mixedrollimg.getId()) mixedrollimg.setVisibility(View.VISIBLE);
                        if (v == lin && view4.getId() == salmonsushiimg.getId()) salmonsushiimg.setVisibility(View.VISIBLE);
                        if (v == lin && view4.getId() == soupimg    .getId()) soupimg.setVisibility(View.VISIBLE);
                        if (v == lin && view4.getId() == squidimg.getId()) squidimg.setVisibility(View.VISIBLE);
                        if (v == lin && view4.getId() == cokeimg.getId()) cokeimg.setVisibility(View.VISIBLE);
                        if (v == lin && view4.getId() == brownieimg.getId()) brownieimg.setVisibility(View.VISIBLE);
                        if (v == lin && view4.getId() == cheesecakeimg.getId()) cheesecakeimg.setVisibility(View.VISIBLE);
                        if (v == lin && view4.getId() == cheeseimg.getId()) cheeseimg.setVisibility(View.VISIBLE);
                        if (v == lin && view4.getId() == juiceimg.getId()) juiceimg.setVisibility(View.VISIBLE);

                        if (v == lin && view4.getId() == button_sbm2.getId()) button_sbm2.setVisibility(View.VISIBLE);
                        //if (v == lin && view4.getId() == gamepotionimg.getId()) {
                        //    gamestar=MAXGAMEPLAY;
                        //editor.putInt("gamestar",gamestar);
                       // editor.commit();
                        //TextView t1t = (TextView) findViewById(R.id.textView13);

                        //t1t.setText(Integer.toString(gamestar));}

                     /*   if (v == lin && view4.getId() == allinpotionimg.getId()) {
                            gamestar=MAXGAMEPLAY;
                            editor.putInt("gamestar",gamestar);
                            editor.commit();
                            TextView t1t = (TextView) findViewById(R.id.textView13);

                            t1t.setText(Integer.toString(gamestar));}*/


                         pizzaimp.setVisibility(View.VISIBLE);
                        hamburgerimg.setVisibility(View.VISIBLE);
                        greensoapimg.setVisibility(View.VISIBLE);
                        soap1img.setVisibility(View.VISIBLE);
                        soap2img.setVisibility(View.VISIBLE);
                        sleeppotionimg.setVisibility(View.VISIBLE);
                        hungerpotionimg.setVisibility(View.VISIBLE);
                        hygienepotionimg.setVisibility(View.VISIBLE);
                        lovepotionimg.setVisibility(View.VISIBLE);
                       gamepotionimg.setVisibility(View.VISIBLE);
                         allinpotionimg.setVisibility(View.VISIBLE);
                        watermelonimg.setVisibility(View.VISIBLE);
                         tomatoimg.setVisibility(View.VISIBLE);
                        pumpkinimg.setVisibility(View.VISIBLE);
                        peesimg.setVisibility(View.VISIBLE);
                        kiwiimg.setVisibility(View.VISIBLE);
                        hotdogimg.setVisibility(View.VISIBLE);
                        cornimg.setVisibility(View.VISIBLE);
                        chilisimg.setVisibility(View.VISIBLE);
                        broccoliimg.setVisibility(View.VISIBLE);
                        bananaimg.setVisibility(View.VISIBLE);
                       regional1img.setVisibility(View.VISIBLE);
                       regional2img.setVisibility(View.VISIBLE);
                        regional3img.setVisibility(View.VISIBLE);
                        regional4img.setVisibility(View.VISIBLE);
                         regional5img.setVisibility(View.VISIBLE);
                         regional6img.setVisibility(View.VISIBLE);
                         siskebapimg.setVisibility(View.VISIBLE);
                        drinks1img.setVisibility(View.VISIBLE);
                         drinks2img.setVisibility(View.VISIBLE);
                         drinks3img.setVisibility(View.VISIBLE);
                         drinks4img.setVisibility(View.VISIBLE);
                        drinks5img.setVisibility(View.VISIBLE);
                        drinks6img.setVisibility(View.VISIBLE);
                        desert1img.setVisibility(View.VISIBLE);
                        desert2img.setVisibility(View.VISIBLE);
                        desert3img.setVisibility(View.VISIBLE);
                        desert4img.setVisibility(View.VISIBLE);
                        desert5img.setVisibility(View.VISIBLE);
                       desert6img.setVisibility(View.VISIBLE);

                        cellspongeimg.setVisibility(View.VISIBLE);
                         darkspongeimg.setVisibility(View.VISIBLE);
                       seaspongeimg.setVisibility(View.VISIBLE);


                       frenchfriesimg.setVisibility(View.VISIBLE);
                     chickenlegimg.setVisibility(View.VISIBLE);
                      fishimg.setVisibility(View.VISIBLE);
                       appleimg.setVisibility(View.VISIBLE);
                        bostonrollimg.setVisibility(View.VISIBLE);
                       carrotimg.setVisibility(View.VISIBLE);
                        frenchtoastimg.setVisibility(View.VISIBLE);
                    meatarmimg.setVisibility(View.VISIBLE);
                         medisaladimg.setVisibility(View.VISIBLE);
                       noodleimg.setVisibility(View.VISIBLE);
                      mixedsaladimg.setVisibility(View.VISIBLE);
                       onionringimg.setVisibility(View.VISIBLE);
                        orangeimg.setVisibility(View.VISIBLE);
                     porkimg.setVisibility(View.VISIBLE);
                       mixedrollimg.setVisibility(View.VISIBLE);
                        salmonsushiimg.setVisibility(View.VISIBLE);
                        soupimg.setVisibility(View.VISIBLE);
                         squidimg.setVisibility(View.VISIBLE);
                       cokeimg.setVisibility(View.VISIBLE);
                        brownieimg.setVisibility(View.VISIBLE);
                        cheesecakeimg.setVisibility(View.VISIBLE);
                         cheeseimg.setVisibility(View.VISIBLE);
                       juiceimg.setVisibility(View.VISIBLE);

                        button_sbm2.setVisibility(View.VISIBLE);

                      //  if (v == lin && view4.getId() != button_sbm2.getId()) {

                          /*  mvm.animate()
                                .x(setXmouth)
                                .y(setYmouth)
                                .setDuration(0)
                                    .start();
                            fmouthupimg.animate()
                                    .x(setXmouthup)
                                    .y(setYmouthup)
                                    .setDuration(0)
                                    .start();
                            */
                           // movemouth( mx,  my, mx1, my1,chx,chx1,chy,chy1);
                     //   }


                      /*  final Animation mAnimation22;
                        mAnimation22 = new TranslateAnimation(0, 0, 0, -10);
                        // mAnimation = new TranslateAnimation(0, 0, -20, 0);
                        mAnimation22.setDuration(100);
                        mAnimation22.setFillAfter(true);
                        mAnimation22.setRepeatCount(5);
                        mAnimation22.setRepeatMode(Animation.REVERSE);
                        fmouthupimg.setAnimation(mAnimation22);
                        fmouthupimg.setVisibility(View.VISIBLE);
*/


                        tomatoimg.setEnabled(true);
                        appleimg.setEnabled(true);
                        bostonrollimg.setEnabled(true);
                        carrotimg.setEnabled(true);
                        frenchtoastimg.setEnabled(true);
                        meatarmimg.setEnabled(true);
                        medisaladimg.setEnabled(true);
                        noodleimg.setEnabled(true);
                        mixedsaladimg.setEnabled(true);
                        onionringimg.setEnabled(true);
                        orangeimg.setEnabled(true);
                        porkimg.setEnabled(true);
                        mixedrollimg.setEnabled(true);
                        salmonsushiimg.setEnabled(true);
                        soupimg.setEnabled(true);
                        squidimg.setEnabled(true);
                        cokeimg.setEnabled(true);
                        brownieimg.setEnabled(true);
                        cheesecakeimg.setEnabled(true);
                        cheeseimg.setEnabled(true);
                        juiceimg.setEnabled(true);
                        watermelonimg.setEnabled(true);
                        tomatoimg.setEnabled(true);
                        pumpkinimg.setEnabled(true);
                        peesimg.setEnabled(true);
                        kiwiimg.setEnabled(true);
                        hotdogimg.setEnabled(true);
                        cornimg.setEnabled(true);
                        cookieimg.setEnabled(true);
                        chilisimg.setEnabled(true);
                        broccoliimg.setEnabled(true);
                        bananaimg.setEnabled(true);
                        regional1img.setEnabled(true);
                        regional2img.setEnabled(true);
                        regional3img.setEnabled(true);
                        regional4img.setEnabled(true);
                        regional5img.setEnabled(true);
                        regional6img.setEnabled(true);
                        siskebapimg.setEnabled(true);

                        drinks1img.setEnabled(true);
                        drinks2img.setEnabled(true);
                        drinks3img.setEnabled(true);
                        drinks4img.setEnabled(true);
                        drinks5img.setEnabled(true);
                        drinks6img.setEnabled(true);

                        desert1img.setEnabled(true);
                        desert2img.setEnabled(true);
                        desert3img.setEnabled(true);
                        desert4img.setEnabled(true);
                        desert5img.setEnabled(true);
                        desert6img.setEnabled(true);

                        hamburgerimg.setEnabled(true);


                        sleeppotionimg.setEnabled(true);
                        hungerpotionimg.setEnabled(true);
                        hygienepotionimg.setEnabled(true);
                        lovepotionimg.setEnabled(true);
                        gamepotionimg.setEnabled(true);
                        allinpotionimg.setEnabled(true);
                        frenchfriesimg.setEnabled(true);
                        chickenlegimg.setEnabled(true);
                        fishimg.setEnabled(true);




                        movement.animate()
                                .x(setX)
                                .y(setY)
                                .setDuration(0)
                                .start();

                        righteyeimage.animate()
                                .x(setrightX)
                                .y(setrightY)
                                .setDuration(0)
                                .start();




                        break;
                    default:
                        break;
                }
                return true;

            }
        });


    }




   View.OnLongClickListener myOnLongClickListener = new View.OnLongClickListener() {

        @Override
        public boolean onLongClick(View v) {
            ClipData data = ClipData.newPlainText("", "");
            View.DragShadowBuilder shadowBuilder = new View.DragShadowBuilder(v);
            v.startDrag(data, shadowBuilder, v, 0);
            //v.setVisibility(View.INVISIBLE);
            return true;
        }

    };


    public void showZaire() {


        SharedPreferences pref;
        pref = getSharedPreferences("info", MODE_PRIVATE);
        SharedPreferences.Editor editor = pref.edit();

        editor.putInt("gameincoin",coin[0]);
        editor.commit();
        //TextView gamestartext = (TextView) findViewById(R.id.gamestar);
        //gamestartext.setText(  Integer.toString(gamestar));
        Intent i = new Intent(this, operation.class);
        startActivityForResult(i, 100);


    }

    public void openGPlus(String profile) {
        try {
            Intent intent = new Intent(Intent.ACTION_VIEW);
            intent.setClassName("com.google.android.apps.plus",
                    "com.google.android.apps.plus.phone.UrlGatewayActivity");
            intent.putExtra("customAppUri", profile);
            startActivity(intent);
        } catch(ActivityNotFoundException e) {
            startActivity(new Intent(Intent.ACTION_VIEW, Uri.parse("https://plus.google.com/"+profile+"/posts")));
        }
    }
    public void simpgame() {

        SharedPreferences pref;
        pref = getSharedPreferences("info", MODE_PRIVATE);
        SharedPreferences.Editor editor = pref.edit();

        editor.putInt("gameincoin", coin[0]);
        editor.commit();
        Intent i = new Intent(this, Simplicity.class);
        startActivityForResult(i, SIMPGAME_REQUEST);


    }



    public void sortgame(){

        SharedPreferences pref;
        pref = getSharedPreferences("info", MODE_PRIVATE);
        SharedPreferences.Editor editor = pref.edit();

        editor.putInt("gameincoin",coin[0]);
        editor.commit();
        Intent i = new Intent(this, sorting.class);
        startActivityForResult(i, SORTING_REQUEST);



    }


    public void colorpickgame(){

        SharedPreferences pref;
        pref = getSharedPreferences("info", MODE_PRIVATE);
        SharedPreferences.Editor editor = pref.edit();

        editor.putInt("gameincoin",coin[0]);
        editor.commit();
        Intent i = new Intent(this, pickcolor.class);
        startActivityForResult(i, PICKCOLOR_REQUEST);



    }


    public void memgame(){

        SharedPreferences pref;
        pref = getSharedPreferences("info", MODE_PRIVATE);
        SharedPreferences.Editor editor = pref.edit();

        editor.putInt("gameincoin",coin[0]);
        editor.commit();
        Intent i = new Intent(this, Memory.class);
        startActivityForResult(i, MEMORY_REQUEST);



    }


    public void coldec(){



        SharedPreferences pref;
        pref = getSharedPreferences("info", MODE_PRIVATE);
        SharedPreferences.Editor editor = pref.edit();

        editor.putInt("gameincoin",coin[0]);
        editor.commit();
        Intent i = new Intent(this, ColorDeception.class);
        startActivityForResult(i, COLORGAME_REQUEST);



    }


    public void setbuttonstatus()
    {


       // ImageView starimg = (ImageView) findViewById(R.id.starzimg);
        final Button segmentkitchen = (Button) findViewById(R.id.button14);
        final Button segmenthygiene = (Button) findViewById(R.id.button15);
        final Button segmentbedroom = (Button) findViewById(R.id.button16);
        final Button segmentgameroom = (Button) findViewById(R.id.button17);
        final Button segmentwc = (Button) findViewById(R.id.button18);
        final CircularProgressBar c1 = (CircularProgressBar) findViewById(R.id.circularprogressbar1);

        //c2,c6,c7 controls for hygiene
        final CircularProgressBar c2 = (CircularProgressBar) findViewById(R.id.circularprogressbar2);

        final CircularProgressBar c3 = (CircularProgressBar) findViewById(R.id.circularprogressbar3);
        final CircularProgressBar cfour = (CircularProgressBar) findViewById(R.id.circularprogressbarfour);

        //csix control for love
        final CircularProgressBar csix = (CircularProgressBar) findViewById(R.id.circularprogressbar6);
        final  TextView lovetext = (TextView) findViewById(R.id.editText8);
        final LinearLayout linear1 = new LinearLayout(x);


        final HorizontalScrollView kitchenhor = (HorizontalScrollView) findViewById(R.id.kitchenlayoutscroll);
       // final HorizontalScrollView mainScroll = (HorizontalScrollView) findViewById(R.id.hor2);
        final HorizontalScrollView hygienescroll = (HorizontalScrollView) findViewById(R.id.hygienescrolllayout);




        final LinearLayout kitchenlinear = (LinearLayout) findViewById(R.id.kitchenlayoutlinear);



      //  final ImageView vegetable = (ImageView) findViewById(R.id.buttonvegetable);
        // final ImageView backbutton = (ImageView) findViewById(R.id.buttonback);
     //   final ImageView soupbutton = (ImageView) findViewById(R.id.buttonsoup);
       // final ImageView drinkbutton = (ImageView) findViewById(R.id.buttondrinks);
       // final ImageView desertbutton = (ImageView) findViewById(R.id.buttondesert);
        final Button sortingbutton = (Button) findViewById(R.id.calc);
        final Button opgamebtn  = (Button) findViewById(R.id.buttonoperation);
        final Button colorbtn  = (Button) findViewById(R.id.colordeception);
        final Button simplicitybtn  = (Button) findViewById(R.id.simpilictyicon);
        final Button memorybtn = (Button) findViewById(R.id.memorygame);
        final Button pickcolorbtn = (Button) findViewById(R.id.colorpick);



        final Button share = (Button) findViewById(R.id.imageButtonshare);
        final FrameLayout printscreenlayout= (FrameLayout) findViewById(R.id.printscreenshow);
        final ImageView printscreenimage = (ImageView) findViewById(R.id.printimage);
        final RelativeLayout printscreenlayout2= (RelativeLayout) findViewById(R.id.printscreenshow1);
        final Button cancelbutton = (Button) findViewById(R.id.button7);
        final RelativeLayout sleeplayout = (RelativeLayout) findViewById(R.id.bedroomlayout);



        final TextView hungertext = (TextView) findViewById(R.id.editText3);
        final TextView hygienetext = (TextView) findViewById(R.id.editText4);
        final TextView bladdertext = (TextView) findViewById(R.id.editText6);
        final  TextView sleeptext = (TextView) findViewById(R.id.editText7);
        final Button sharepicture = (Button) findViewById(R.id.button8);


        final TextView meattext2 = (TextView) findViewById(R.id.tbonetext);
        //button_sbm = (ImageView) findViewById(R.id.button);

        final ImageButton peebtn =  (ImageButton) findViewById(R.id.peefrm);
       final Button lamp1 = (Button) findViewById(R.id.imageView30);
       final Button lamp2 = (Button) findViewById(R.id.imageView31);
        final ImageView toiletsign = (ImageView) findViewById(R.id.imageView32);
        final TextView Modename = (TextView) findViewById(R.id.Modename);
        final ImageButton washbutton = (ImageButton) findViewById(R.id.imageView52);
        Button cancelshop = (Button) findViewById(R.id.cancelimg);
        final RelativeLayout shopframe = (RelativeLayout) findViewById(R.id.market);


        printscreenlayout2.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View view, MotionEvent motionEvent) {
                return true;
            }
        });



        if (mode[0] == kitchencount)


        {


            sensorflag=false;
            ball.setVisibility(View.INVISIBLE);
            kitchenhor.setVisibility(View.VISIBLE);
            hygienescroll.setVisibility(View.INVISIBLE);
//            fridge.setVisibility(View.INVISIBLE);
        //    mainScroll.setVisibility(View.INVISIBLE);
//            button_sbm.setVisibility(View.VISIBLE);
            button_sbm2.setVisibility(View.INVISIBLE);
            button_sbm3.setVisibility(View.INVISIBLE);
            washbutton.setVisibility(View.INVISIBLE);
            toiletsign.setVisibility(View.INVISIBLE);
            peebtn.setVisibility(View.INVISIBLE);

            button_sbm4.setVisibility(View.INVISIBLE);
            lamp1.setVisibility(View.INVISIBLE);
            lamp2.setVisibility(View.INVISIBLE);

//            vegetable.setVisibility(View.VISIBLE);
            //backbutton.setVisibility(View.VISIBLE);
          //  soupbutton.setVisibility(View.VISIBLE);
          //  drinkbutton.setVisibility(View.VISIBLE);
           // desertbutton.setVisibility(View.VISIBLE);
            opgamebtn.setVisibility(View.INVISIBLE);
            sortingbutton.setVisibility(View.INVISIBLE);
            simplicitybtn.setVisibility(View.INVISIBLE);
            memorybtn.setVisibility(View.INVISIBLE);
            pickcolorbtn.setVisibility(View.INVISIBLE);
            colorbtn.setVisibility(View.INVISIBLE);
            //Modename.setText("Kitchen");
           // firsttext.setVisibility(View.VISIBLE);

        //    HorizontalScrollView hor2 = (HorizontalScrollView)  findViewById(R.id.hor2);
            HorizontalScrollView hor3 = (HorizontalScrollView)  findViewById(R.id.kitchenlayoutscroll);
          //  hor2.setHorizontalScrollBarEnabled(true);
            hor3.setHorizontalScrollBarEnabled(true);


            hungertext.setAlpha(1f);
            c1.setTitleColor(ColorRed);
            hygienetext.setAlpha(0.5f);
            c2.setTitleColor(ColorGray);
            bladdertext.setAlpha(0.5f);
            c3.setTitleColor(ColorGray);
            sleeptext.setAlpha(0.5f);
            cfour.setTitleColor(ColorGray);
            lovetext.setAlpha(0.5f);
            csix.setTitleColor(ColorGray);
            //segmentkitchen.setBackground(getResources().getDrawable(R.drawable.selectedsegment1));
            //segmentkitchen.setTextColor(Color.argb(255, 232, 75, 60));
            segmentkitchen.setTypeface(Typeface.DEFAULT_BOLD);

            segmenthygiene.setTypeface(Typeface.DEFAULT);
            hungertext.setTypeface(Typeface.DEFAULT_BOLD);
            hygienetext.setTypeface(Typeface.DEFAULT);
                    bladdertext.setTypeface(Typeface.DEFAULT);
            sleeptext.setTypeface(Typeface.DEFAULT);
                    lovetext.setTypeface(Typeface.DEFAULT);
                segmentbedroom.setTypeface(Typeface.DEFAULT);
                segmentgameroom.setTypeface(Typeface.DEFAULT);
                segmentwc.setTypeface(Typeface.DEFAULT);
                segmenthygiene.setAlpha(0.5f);
                segmentbedroom.setAlpha(0.5f);
                segmentgameroom.setAlpha(0.5f);
                segmentwc.setAlpha(0.5f);




        } else if (mode[0] == sleepcnt)


        {
            sensorflag=false;

            ball.setVisibility(View.INVISIBLE);
            hungertext.setAlpha(0.5f);
            c1.setTitleColor(ColorGray);
            hygienetext.setAlpha(0.5f);
            c2.setTitleColor(ColorGray);
            bladdertext.setAlpha(0.5f);
            c3.setTitleColor(ColorGray);
            sleeptext.setAlpha(1f);
            cfour.setTitleColor(ColorRed);
            lovetext.setAlpha(0.5f);
            csix.setTitleColor(ColorGray);

          //  HorizontalScrollView hor2 = (HorizontalScrollView)  findViewById(R.id.hor2);
            HorizontalScrollView hor3 = (HorizontalScrollView)  findViewById(R.id.kitchenlayoutscroll);
          //  hor2.setHorizontalScrollBarEnabled(false);
            hor3.setHorizontalScrollBarEnabled(false);

            //fridge.setVisibility(View.INVISIBLE);
          //  button_sbm.setVisibility(View.INVISIBLE);
            button_sbm2.setVisibility(View.INVISIBLE);
            kitchenhor.setVisibility(View.INVISIBLE);

            hygienescroll.setVisibility(View.INVISIBLE);
         //   mainScroll.setVisibility(View.VISIBLE);
            button_sbm3.setVisibility(View.INVISIBLE);
            washbutton.setVisibility(View.INVISIBLE);
            toiletsign.setVisibility(View.INVISIBLE);
            peebtn.setVisibility(View.INVISIBLE);
            button_sbm4.setVisibility(View.VISIBLE);
            lamp1.setVisibility(View.VISIBLE);
            lamp2.setVisibility(View.VISIBLE);
            sleeplayout.setVisibility(View.VISIBLE);

            if (sleepbuttonpressed[0] == true) {

                button_sbm4.setBackgroundResource(R.mipmap.sleep);
                lamp1.setBackgroundResource(R.mipmap.lampoff);
                lamp2.setBackgroundResource(R.mipmap.lampoff);

                closeeyes(true);
            } else

            {

                button_sbm4.setBackgroundResource(R.mipmap.wakeup);
                lamp1.setBackgroundResource(R.mipmap.lampon);
                lamp2.setBackgroundResource(R.mipmap.lampon);

                closeeyes(false);
            }

          //  firsttext.setVisibility(View.INVISIBLE);

          //  vegetable.setVisibility(View.INVISIBLE);
            //    backbutton.setVisibility(View.INVISIBLE);
          //  soupbutton.setVisibility(View.INVISIBLE);
           // drinkbutton.setVisibility(View.INVISIBLE);
           // desertbutton.setVisibility(View.INVISIBLE);
          //  vegetable.setVisibility(View.INVISIBLE);
            //   backbutton.setVisibility(View.INVISIBLE);
         //   soupbutton.setVisibility(View.INVISIBLE);
           // drinkbutton.setVisibility(View.INVISIBLE);
          //  desertbutton.setVisibility(View.INVISIBLE);
            opgamebtn.setVisibility(View.INVISIBLE);
            sortingbutton.setVisibility(View.INVISIBLE);
            simplicitybtn.setVisibility(View.INVISIBLE);
            memorybtn.setVisibility(View.INVISIBLE);
            pickcolorbtn.setVisibility(View.INVISIBLE);
            colorbtn.setVisibility(View.INVISIBLE);
            segmenthygiene.setTypeface(Typeface.DEFAULT);
            segmentkitchen.setTypeface(Typeface.DEFAULT);
            segmentgameroom.setTypeface(Typeface.DEFAULT);
            segmentwc.setTypeface(Typeface.DEFAULT);

            hungertext.setTypeface(Typeface.DEFAULT);
            hygienetext.setTypeface(Typeface.DEFAULT);
            bladdertext.setTypeface(Typeface.DEFAULT);
            sleeptext.setTypeface(Typeface.DEFAULT_BOLD);
            lovetext.setTypeface(Typeface.DEFAULT);


            segmentbedroom.setTypeface(Typeface.DEFAULT_BOLD);
            segmenthygiene.setAlpha(0.5f);
            segmentkitchen.setAlpha(0.5f);
            segmentgameroom.setAlpha(0.5f);
            segmentwc.setAlpha(0.5f);
        } else if (mode[0] == kidneycount) {


            sensorflag=false;
            ball.setVisibility(View.INVISIBLE);
            hungertext.setAlpha(0.5f);
            c1.setTitleColor(ColorGray);
            hygienetext.setAlpha(0.5f);
            c2.setTitleColor(ColorGray);
            bladdertext.setAlpha(1f);
            c3.setTitleColor(ColorRed);
            sleeptext.setAlpha(0.5f);
            cfour.setTitleColor(ColorGray);
            lovetext.setAlpha(0.5f);
            csix.setTitleColor(ColorGray);



            kitchenhor.setVisibility(View.INVISIBLE);
            hygienescroll.setVisibility(View.INVISIBLE);
         //   mainScroll.setVisibility(View.VISIBLE);


           // fridge.setVisibility(View.INVISIBLE);
          //  button_sbm.setVisibility(View.INVISIBLE);
            button_sbm2.setVisibility(View.INVISIBLE);
            button_sbm3.setVisibility(View.VISIBLE);
            toiletsign.setVisibility(View.VISIBLE);
            washbutton.setVisibility(View.VISIBLE);
            peebtn.setVisibility(View.VISIBLE);
            button_sbm4.setVisibility(View.INVISIBLE);
            lamp1.setVisibility(View.INVISIBLE);
            lamp2.setVisibility(View.INVISIBLE);


            sleeplayout.setVisibility(View.INVISIBLE);

           // vegetable.setVisibility(View.INVISIBLE);
            // backbutton.setVisibility(View.VISIBLE);
         //   soupbutton.setVisibility(View.INVISIBLE);
            //drinkbutton.setVisibility(View.INVISIBLE);
           // desertbutton.setVisibility(View.INVISIBLE);
            opgamebtn.setVisibility(View.INVISIBLE);
            sortingbutton.setVisibility(View.INVISIBLE);
            simplicitybtn.setVisibility(View.INVISIBLE);
            memorybtn.setVisibility(View.INVISIBLE);
            pickcolorbtn.setVisibility(View.INVISIBLE);
            colorbtn.setVisibility(View.INVISIBLE);
            segmentwc.setTypeface(Typeface.DEFAULT_BOLD);
            segmenthygiene.setAlpha(0.5f);
            segmentbedroom.setAlpha(0.5f);
            segmentgameroom.setAlpha(0.5f);
            segmentkitchen.setAlpha(0.5f);
            segmenthygiene.setTypeface(Typeface.DEFAULT);
            segmentbedroom.setTypeface(Typeface.DEFAULT);
            segmentgameroom.setTypeface(Typeface.DEFAULT);
            segmentkitchen.setTypeface(Typeface.DEFAULT);


           // firsttext.setVisibility(View.INVISIBLE);
        } else if (mode[0] == hygienecount) {


            sensorflag=false;
            ball.setVisibility(View.INVISIBLE);
            hungertext.setAlpha(0.5f);
            c1.setTitleColor(ColorGray);
            hygienetext.setAlpha(1f);
            c2.setTitleColor(ColorRed);
            bladdertext.setAlpha(0.5f);
            c3.setTitleColor(ColorGray);
            sleeptext.setAlpha(0.5f);
            cfour.setTitleColor(ColorGray);
            lovetext.setAlpha(0.5f);
            csix.setTitleColor(ColorGray);


            kitchenhor.setVisibility(View.INVISIBLE);
            hygienescroll.setVisibility(View.VISIBLE);
         //   mainScroll.setVisibility(View.VISIBLE);

           // fridge.setVisibility(View.INVISIBLE);
           // button_sbm.setVisibility(View.INVISIBLE);
            button_sbm2.setVisibility(View.VISIBLE);
            button_sbm3.setVisibility(View.INVISIBLE);
            washbutton.setVisibility(View.INVISIBLE);
            toiletsign.setVisibility(View.INVISIBLE);
            peebtn.setVisibility(View.INVISIBLE);
            button_sbm4.setVisibility(View.INVISIBLE);
            lamp1.setVisibility(View.INVISIBLE);
            lamp2.setVisibility(View.INVISIBLE);

            sleeplayout.setVisibility(View.INVISIBLE);

           // vegetable.setVisibility(View.INVISIBLE);
            // backbutton.setVisibility(View.VISIBLE);

          //  soupbutton.setVisibility(View.INVISIBLE);
            //drinkbutton.setVisibility(View.INVISIBLE);
          //  desertbutton.setVisibility(View.INVISIBLE);
            opgamebtn.setVisibility(View.INVISIBLE);
            sortingbutton.setVisibility(View.INVISIBLE);
            simplicitybtn.setVisibility(View.INVISIBLE);
            memorybtn.setVisibility(View.INVISIBLE);
            pickcolorbtn.setVisibility(View.INVISIBLE);
            colorbtn.setVisibility(View.INVISIBLE);
            segmenthygiene.setTypeface(Typeface.DEFAULT_BOLD);

            hungertext.setTypeface(Typeface.DEFAULT);
            hygienetext.setTypeface(Typeface.DEFAULT_BOLD);
            bladdertext.setTypeface(Typeface.DEFAULT);
            sleeptext.setTypeface(Typeface.DEFAULT);
            lovetext.setTypeface(Typeface.DEFAULT);

            segmentkitchen.setAlpha(0.5f);
            segmentbedroom.setAlpha(0.5f);
            segmentgameroom.setAlpha(0.5f);
            segmentwc.setAlpha(0.5f);
            segmentkitchen.setTypeface(Typeface.DEFAULT);
            segmentbedroom.setTypeface(Typeface.DEFAULT);
            segmentgameroom.setTypeface(Typeface.DEFAULT);
            segmentwc.setTypeface(Typeface.DEFAULT);


           // firsttext.setVisibility(View.INVISIBLE);
        } else if (mode[0] == gamecount) {


            //sensorflag=true;
            //Sensor Accel = sensore.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);
            //sensore.registerListener((SensorEventListener) this, Accel, SENSORTYPE);
            //ball.setVisibility(View.VISIBLE);
            hungertext.setAlpha(0.5f);
            c1.setTitleColor(ColorGray);
            hygienetext.setAlpha(0.5f);
            c2.setTitleColor(ColorGray);
            bladdertext.setAlpha(0.5f);
            c3.setTitleColor(ColorGray);
            sleeptext.setAlpha(0.5f);
            cfour.setTitleColor(ColorGray);
            lovetext.setAlpha(1f);
            csix.setTitleColor(ColorRed);

          //  HorizontalScrollView hor2 = (HorizontalScrollView)  findViewById(R.id.hor2);
            HorizontalScrollView hor3 = (HorizontalScrollView)  findViewById(R.id.kitchenlayoutscroll);
         //   hor2.setHorizontalScrollBarEnabled(true);
            hor3.setHorizontalScrollBarEnabled(true);
            kitchenhor.setVisibility(View.INVISIBLE);
            hygienescroll.setVisibility(View.INVISIBLE);
          //  mainScroll.setVisibility(View.VISIBLE);

           // fridge.setVisibility(View.INVISIBLE);
            button_sbm2.setVisibility(View.INVISIBLE);
            button_sbm3.setVisibility(View.INVISIBLE);
            washbutton.setVisibility(View.INVISIBLE);
            toiletsign.setVisibility(View.INVISIBLE);
            peebtn.setVisibility(View.INVISIBLE);
            button_sbm4.setVisibility(View.INVISIBLE);
            lamp1.setVisibility(View.INVISIBLE);
            lamp2.setVisibility(View.INVISIBLE);
            sleeplayout.setVisibility(View.INVISIBLE);

            opgamebtn.setVisibility(View.VISIBLE);
            sortingbutton.setVisibility(View.VISIBLE);
            simplicitybtn.setVisibility(View.VISIBLE);
            memorybtn.setVisibility(View.VISIBLE);
            pickcolorbtn.setVisibility(View.VISIBLE);
            colorbtn.setVisibility(View.VISIBLE);
           // vegetable.setVisibility(View.INVISIBLE);
            // backbutton.setVisibility(View.VISIBLE);

          //  soupbutton.setVisibility(View.INVISIBLE);
            //drinkbutton.setVisibility(View.INVISIBLE);
           // desertbutton.setVisibility(View.INVISIBLE);
            segmentgameroom.setTypeface(Typeface.DEFAULT_BOLD);


            hungertext.setTypeface(Typeface.DEFAULT);
            hygienetext.setTypeface(Typeface.DEFAULT);
            bladdertext.setTypeface(Typeface.DEFAULT);
            sleeptext.setTypeface(Typeface.DEFAULT);
            lovetext.setTypeface(Typeface.DEFAULT_BOLD);
            segmenthygiene.setAlpha(0.5f);
            segmentbedroom.setAlpha(0.5f);
            segmentkitchen.setAlpha(0.5f);
            segmentwc.setAlpha(0.5f);

            segmenthygiene.setTypeface(Typeface.DEFAULT);
            segmentbedroom.setTypeface(Typeface.DEFAULT);
            segmentkitchen.setTypeface(Typeface.DEFAULT);
            segmentwc.setTypeface(Typeface.DEFAULT);
           // firsttext.setVisibility(View.INVISIBLE);
        }

    }




    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        if (!bp.handleActivityResult(requestCode, resultCode, data))
            super.onActivityResult(requestCode, resultCode, data);

        callbackManager.onActivityResult(requestCode, resultCode, data);
        FrameLayout grd = (FrameLayout) findViewById(R.id.yigit);
        ImageView img = (ImageView) findViewById(R.id.imageView);
        final TextView iqnum = (TextView) findViewById(R.id.textiq);
        RelativeLayout coinwarning = (RelativeLayout) findViewById(R.id.coinwarning);
        final CircularProgressBar csix = (CircularProgressBar) findViewById(R.id.circularprogressbar6);
        final FrameLayout disableallchild = (FrameLayout) findViewById(R.id.draglayout);
        //final MediaPlayer coinbelow10 = MediaPlayer.create(getApplicationContext(), R.raw.coinbelow10);


        if (requestCode == RC_SIGN_IN) {
            mSignInClicked = false;
            mResolvingConnectionFailure = false;
            if (resultCode == RESULT_OK) {
                mGoogleApiClient.connect();
            } else {
                // Bring up an error dialog to alert the user that sign-in
                // failed. The R.string.signin_failure should reference an error
                // string in your strings.xml file that tells the user they
                // could not be signed in, such as "Unable to sign in."
                BaseGameUtils.showActivityResultError(this,
                        requestCode, resultCode, R.string.signin_failure);
            }
        }


        if (requestCode == 100) {
            if (resultCode == RESULT_OK) {



                int myValue = data.getIntExtra("Key", 0);
                iq = data.getIntExtra("iq", iq);
                SharedPreferences shared = getSharedPreferences("info", MODE_PRIVATE);
                iqplusone= shared.getBoolean("iqplusone", false);
                zerogamestar=shared.getBoolean("zerogamestar", zerogamestar);

                if (zerogamestar==true) {
                    coinwarning.setVisibility(View.VISIBLE);
                    final Animation shake = AnimationUtils.loadAnimation(x, R.anim.lefttoright);
                    disableallchild.setVisibility(View.VISIBLE);
                    shake.setDuration(SLIDEANIMDUR);
                    coinwarning.setAnimation(shake);
                    final MediaPlayer clickaudio2 = MediaPlayer.create(getApplicationContext(), R.raw.popupsound);
                    if(!mutestate[0]) {
                        clickaudio2.start();
                        clickaudio2.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                            public void onCompletion(MediaPlayer mp) {
                                clickaudio2.release();

                            }

                            ;
                        });
                    }
                }
                else
                {
                    disableallchild.setVisibility(View.INVISIBLE);

                }
                //gamestar = data.getIntExtra("gamestar", gamestar);
                coin[0]=shared.getInt("coin", coin[0]);

                coinflip();
                gameincoin=shared.getInt("gameincoin", 0);
                gamereturncoin=coin[0];

                final int incrementcoin = gamereturncoin-gameincoin;

                if (incrementcoin < 10) {
                    if (!mutestate[0]) soundPool6.play(soundID6, volume, volume, 1, 0, 1f);
                }

                else
                {
                    final MediaPlayer clickaudio = MediaPlayer.create(getApplicationContext(), R.raw.coinabove10);
                    if (!mutestate[0]) {
                        clickaudio.start();
                        clickaudio.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                            public void onCompletion(MediaPlayer mp) {
                                clickaudio.release();

                            }

                            ;
                        });
                    }

                }
                loveincrement5(csix, process[5], process[5] + incrementcoin, 5);
                //pluscoin(50);

                int gmstarcount = shared.getInt("gamestarcounter", gamestarcounter[0]);

                gamestarcounter[0] = gmstarcount;


                final TextView tcoin = (TextView) findViewById(R.id.textcoin);
                //tcoin.setText(Integer.toString(coin[0]));


                if(iqplusone==true){
                    fireworks();
                    lock();
                    SharedPreferences pref;
                    pref = getSharedPreferences("info", MODE_PRIVATE);
                    final SharedPreferences.Editor editor = pref.edit();
                    editor.putBoolean("iqplusone", false);
                    editor.commit();
                }

                new CountDownTimer(500, 100) {


                    public void onTick(long milsec) {

                    }

                    public void onFinish() {

                        tcoin.setVisibility(View.VISIBLE);
                        ValueAnimator animator = new ValueAnimator();
                        animator.setObjectValues(coin[0]-incrementcoin, coin[0]);
                        animator.setDuration(500);
                        animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {
                            public void onAnimationUpdate(ValueAnimator animation) {
                                tcoin.setText("" + (int) animation.getAnimatedValue());


                            }

                        });
                        animator.start();

                    }
                }.start();
                //iq = iq + myValue;
                //TextView xu = (TextView) findViewById(R.id.textcoin);
                //SharedPreferences shared = getSharedPreferences("info", MODE_PRIVATE);
                //iq = shared.getInt("iq", iq);

                //iqnum.setText(Integer.toString(iq));
                //Toast toast = Toast.makeText(getApplicationContext(), "you have earned " + myValue + " points", Toast.LENGTH_SHORT);
                //toast.show();

                //xu.setText(Integer.toString(coin[0]));
                // use 'myValue' return value here
            }
        }


        else if (requestCode == COLORGAME_REQUEST) {
            if (resultCode == RESULT_OK) {
                int myValue = data.getIntExtra("iqscore", 0);

                //iq = shared.getInt("iq", iq);
                SharedPreferences shared = getSharedPreferences("info", MODE_PRIVATE);
                iqplusone= shared.getBoolean("iqplusone", false);
                iq = data.getIntExtra("iq", iq);
                int gmstarcount = shared.getInt("gamestarcounter", gamestarcounter[0]);

                gamestarcounter[0] = gmstarcount;
                zerogamestar=shared.getBoolean("zerogamestar", zerogamestar);

                if (zerogamestar==true) {
                    coinwarning.setVisibility(View.VISIBLE);
                    final Animation shake = AnimationUtils.loadAnimation(x, R.anim.lefttoright);
                    disableallchild.setVisibility(View.VISIBLE);
                    shake.setDuration(SLIDEANIMDUR);
                    coinwarning.setAnimation(shake);
                    final MediaPlayer clickaudio2 = MediaPlayer.create(getApplicationContext(), R.raw.popupsound);
                    if(!mutestate[0]) {
                        clickaudio2.start();
                        clickaudio2.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                            public void onCompletion(MediaPlayer mp) {
                                clickaudio2.release();

                            }

                            ;
                        });
                    }
                }

                else
                {
                    disableallchild.setVisibility(View.INVISIBLE);

                }
                //gamestar = data.getIntExtra("gamestar", gamestar);
                coin[0]=shared.getInt("coin", coin[0]);
                coinflip();
                gameincoin=shared.getInt("gameincoin", 0);
                gamestar =shared.getInt("gamestar", gamestar);
                gamereturncoin=coin[0];

                final  int incrementcoin = gamereturncoin-gameincoin;

                if (incrementcoin < 10) {
                    if (!mutestate[0]) soundPool6.play(soundID6, volume, volume, 1, 0, 1f);
                }

                else
                {
                    final MediaPlayer clickaudio = MediaPlayer.create(getApplicationContext(), R.raw.coinabove10);
                    if (!mutestate[0]) {
                        clickaudio.start();
                        clickaudio.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                            public void onCompletion(MediaPlayer mp) {
                                clickaudio.release();

                            }

                            ;
                        });
                    }

                }
                loveincrement5(csix, process[5], process[5] + incrementcoin, 5);


                final TextView tcoin = (TextView) findViewById(R.id.textcoin);
                //tcoin.setText(Integer.toString(coin[0]));
                //pluscoin(100);
                if(iqplusone==true){
                    fireworks();
                    lock();
                    SharedPreferences pref;
                    pref = getSharedPreferences("info", MODE_PRIVATE);
                    final SharedPreferences.Editor editor = pref.edit();
                    editor.putBoolean("iqplusone", false);
                    editor.commit();
                }
                new CountDownTimer(500, 100) {


                    public void onTick(long milsec) {

                    }

                    public void onFinish() {

                        tcoin.setVisibility(View.VISIBLE);
                        ValueAnimator animator = new ValueAnimator();
                        animator.setObjectValues(coin[0]-incrementcoin, coin[0]);
                        animator.setDuration(500);
                        animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {
                            public void onAnimationUpdate(ValueAnimator animation) {
                                tcoin.setText("" + (int) animation.getAnimatedValue());


                            }

                        });
                        animator.start();

                    }
                }.start();
               // iq = iq + myValue;
                //TextView xu = (TextView) findViewById(R.id.textcoin);
                //iqnum.setText(Integer.toString(iq));
                //Toast toast = Toast.makeText(getApplicationContext(), "you have earned " + myValue + " points", Toast.LENGTH_SHORT);
                //toast.show();

                //xu.setText(Integer.toString(coin[0]));
                // use 'myValue' return value here
            }
        }



        else if (requestCode == PICKCOLOR_REQUEST) {
            if (resultCode == RESULT_OK) {

                SharedPreferences shared = getSharedPreferences("info", MODE_PRIVATE);
                iqplusone= shared.getBoolean("iqplusone", false);
                zerogamestar=shared.getBoolean("zerogamestar", zerogamestar);

                if (zerogamestar==true) {
                    coinwarning.setVisibility(View.VISIBLE);
                    final Animation shake = AnimationUtils.loadAnimation(x, R.anim.lefttoright);
                    disableallchild.setVisibility(View.VISIBLE);
                    shake.setDuration(SLIDEANIMDUR);
                    coinwarning.setAnimation(shake);
                    final MediaPlayer clickaudio2 = MediaPlayer.create(getApplicationContext(), R.raw.popupsound);
                    if(!mutestate[0]) {
                        clickaudio2.start();
                        clickaudio2.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                            public void onCompletion(MediaPlayer mp) {
                                clickaudio2.release();

                            }

                            ;
                        });
                    }
                }
                else
                {
                    disableallchild.setVisibility(View.INVISIBLE);

                }
                iq = data.getIntExtra("iq", iq);
                int gmstarcount = shared.getInt("gamestarcounter", gamestarcounter[0]);

                gamestarcounter[0] = gmstarcount;
                coin[0]=shared.getInt("coin", coin[0]);
                gamestar =shared.getInt("gamestar", gamestar);
                coinflip();

                gameincoin=shared.getInt("gameincoin", 0);
                gamereturncoin=coin[0];

             final   int incrementcoin = gamereturncoin-gameincoin;

                if (incrementcoin < 10) {
                    if (!mutestate[0]) soundPool6.play(soundID6, volume, volume, 1, 0, 1f);
                }

                else
                {
                    final MediaPlayer clickaudio = MediaPlayer.create(getApplicationContext(), R.raw.coinabove10);
                    if (!mutestate[0]) {
                        clickaudio.start();
                        clickaudio.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                            public void onCompletion(MediaPlayer mp) {
                                clickaudio.release();

                            }

                            ;
                        });
                    }

                }
                loveincrement5(csix, process[5], process[5] + incrementcoin, 5);

                final TextView tcoin = (TextView) findViewById(R.id.textcoin);
               // tcoin.setText(Integer.toString(coin[0]));

                //gamestar = data.getIntExtra("gamestar", gamestar);

                if(iqplusone==true){
                    fireworks();
                    lock();
                    SharedPreferences pref;
                    pref = getSharedPreferences("info", MODE_PRIVATE);
                    final SharedPreferences.Editor editor = pref.edit();
                    editor.putBoolean("iqplusone", false);
                    editor.commit();

                }
                new CountDownTimer(500, 100) {


                    public void onTick(long milsec) {

                    }

                    public void onFinish() {

                        tcoin.setVisibility(View.VISIBLE);
                        ValueAnimator animator = new ValueAnimator();
                        animator.setObjectValues(coin[0]-incrementcoin, coin[0]);
                        animator.setDuration(500);
                        animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {
                            public void onAnimationUpdate(ValueAnimator animation) {
                                tcoin.setText("" + (int) animation.getAnimatedValue());


                            }

                        });
                        animator.start();

                    }
                }.start();

            }
        }


        else if (requestCode == MEMORY_REQUEST) {
            if (resultCode == RESULT_OK) {
                int myValue = data.getIntExtra("memscore", 0);

                SharedPreferences shared = getSharedPreferences("info", MODE_PRIVATE);
                iqplusone= shared.getBoolean("iqplusone", false);
                zerogamestar=shared.getBoolean("zerogamestar", zerogamestar);
                int gmstarcount = shared.getInt("gamestarcounter", gamestarcounter[0]);

                gamestarcounter[0] = gmstarcount;
                if (zerogamestar==true) {
                    coinwarning.setVisibility(View.VISIBLE);
                    final Animation shake = AnimationUtils.loadAnimation(x, R.anim.lefttoright);
                    disableallchild.setVisibility(View.VISIBLE);
                    shake.setDuration(SLIDEANIMDUR);
                    coinwarning.setAnimation(shake);
                    final MediaPlayer clickaudio2 = MediaPlayer.create(getApplicationContext(), R.raw.popupsound);
                    if(!mutestate[0]) {
                        clickaudio2.start();
                        clickaudio2.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                            public void onCompletion(MediaPlayer mp) {
                                clickaudio2.release();

                            }

                            ;
                        });
                    }
                }

                else
                {
                    disableallchild.setVisibility(View.INVISIBLE);

                }
                iq = data.getIntExtra("iq", iq);
                coin[0]=shared.getInt("coin", coin[0]);
                gamestar =shared.getInt("gamestar", gamestar);
                gameincoin=shared.getInt("gameincoin", 0);
                gamereturncoin=coin[0];
                final   int incrementcoin = gamereturncoin-gameincoin;
                coinflip();

                if (incrementcoin < 10) {
                    if (!mutestate[0]) soundPool6.play(soundID6, volume, volume, 1, 0, 1f);
                }

                else
                {
                    final MediaPlayer clickaudio = MediaPlayer.create(getApplicationContext(), R.raw.coinabove10);
                    if (!mutestate[0]) {
                        clickaudio.start();
                        clickaudio.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                            public void onCompletion(MediaPlayer mp) {
                                clickaudio.release();

                            }

                            ;
                        });
                    }

                }



                loveincrement5(csix, process[5], process[5] + incrementcoin, 5);

                final TextView tcoin = (TextView) findViewById(R.id.textcoin);
               // tcoin.setText(Integer.toString(coin[0]));



                //gamestar = data.getIntExtra("gamestar", gamestar);

                if(iqplusone==true){
                    fireworks();
                    lock();

                    SharedPreferences pref;
                    pref = getSharedPreferences("info", MODE_PRIVATE);
                    final SharedPreferences.Editor editor = pref.edit();
                    editor.putBoolean("iqplusone", false);
                    editor.commit();

                }
                new CountDownTimer(500, 100) {


                    public void onTick(long milsec) {

                    }

                    public void onFinish() {

                        tcoin.setVisibility(View.VISIBLE);
                        ValueAnimator animator = new ValueAnimator();
                        animator.setObjectValues(coin[0]-incrementcoin, coin[0]);
                        animator.setDuration(500);
                        animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {
                            public void onAnimationUpdate(ValueAnimator animation) {
                                tcoin.setText("" + (int) animation.getAnimatedValue());


                            }

                        });
                        animator.start();

                    }
                }.start();
                //iq = iq + myValue;
                //TextView xu = (TextView) findViewById(R.id.textcoin);
               // iqnum.setText(Integer.toString(iq));
               // Toast toast = Toast.makeText(getApplicationContext(), "you have earned " + myValue + " points", Toast.LENGTH_SHORT);
               // toast.show();

                //xu.setText(Integer.toString(coin[0]));
                // use 'myValue' return value here
            }
        }

        else if (requestCode == SORTING_REQUEST) {
            if (resultCode == RESULT_OK) {
                int myValue = data.getIntExtra("memscore", 0);

                SharedPreferences shared = getSharedPreferences("info", MODE_PRIVATE);
                iqplusone= shared.getBoolean("iqplusone", false);
                zerogamestar=shared.getBoolean("zerogamestar", zerogamestar);
                int gmstarcount = shared.getInt("gamestarcounter", gamestarcounter[0]);

                gamestarcounter[0] = gmstarcount;
                if (zerogamestar==true) {
                    coinwarning.setVisibility(View.VISIBLE);
                    final Animation shake = AnimationUtils.loadAnimation(x, R.anim.lefttoright);
                    disableallchild.setVisibility(View.VISIBLE);
                    shake.setDuration(SLIDEANIMDUR);
                    coinwarning.setAnimation(shake);
                    final MediaPlayer clickaudio2 = MediaPlayer.create(getApplicationContext(), R.raw.popupsound);
                    if(!mutestate[0]) {
                        clickaudio2.start();
                        clickaudio2.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                            public void onCompletion(MediaPlayer mp) {
                                clickaudio2.release();

                            }

                            ;
                        });
                    }
                }

                else
                {
                    disableallchild.setVisibility(View.INVISIBLE);

                }
                iq = data.getIntExtra("iq", iq);
                coin[0]=shared.getInt("coin", coin[0]);
                gamestar =shared.getInt("gamestar", gamestar);
                coinflip();

                gameincoin=shared.getInt("gameincoin", 0);
                gamereturncoin=coin[0];

              final  int incrementcoin = gamereturncoin-gameincoin;
                if (incrementcoin < 10) {
                    if (!mutestate[0]) soundPool6.play(soundID6, volume, volume, 1, 0, 1f);
                }

                else
                {
                    final MediaPlayer clickaudio = MediaPlayer.create(getApplicationContext(), R.raw.coinabove10);
                    if (!mutestate[0]) {
                        clickaudio.start();
                        clickaudio.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                            public void onCompletion(MediaPlayer mp) {
                                clickaudio.release();

                            }

                            ;
                        });
                    }

                }

                loveincrement5(csix, process[5], process[5] + incrementcoin, 5);

                final TextView tcoin = (TextView) findViewById(R.id.textcoin);
               // tcoin.setText(Integer.toString(coin[0]));

                //gamestar = data.getIntExtra("gamestar", gamestar);

                if(iqplusone==true){
                    fireworks();
                    lock();
                    SharedPreferences pref;
                    pref = getSharedPreferences("info", MODE_PRIVATE);
                    final SharedPreferences.Editor editor = pref.edit();
                    editor.putBoolean("iqplusone", false);
                    editor.commit();

                }
                new CountDownTimer(500, 100) {


                    public void onTick(long milsec) {

                    }

                    public void onFinish() {

                        tcoin.setVisibility(View.VISIBLE);
                        ValueAnimator animator = new ValueAnimator();
                        animator.setObjectValues(coin[0]-incrementcoin, coin[0]);
                        animator.setDuration(500);
                        animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {
                            public void onAnimationUpdate(ValueAnimator animation) {
                                tcoin.setText("" + (int) animation.getAnimatedValue());


                            }

                        });
                        animator.start();

                    }
                }.start();
                //iq = iq + myValue;
                //TextView xu = (TextView) findViewById(R.id.textcoin);
                // iqnum.setText(Integer.toString(iq));
                // Toast toast = Toast.makeText(getApplicationContext(), "you have earned " + myValue + " points", Toast.LENGTH_SHORT);
                // toast.show();

                //xu.setText(Integer.toString(coin[0]));
                // use 'myValue' return value here
            }
        }




        else if (requestCode == SIMPGAME_REQUEST) {
            if (resultCode == RESULT_OK) {
                int myValue = data.getIntExtra("simscore", 0);
                SharedPreferences shared = getSharedPreferences("info", MODE_PRIVATE);
                iq = shared.getInt("iq", iq);
                zerogamestar=shared.getBoolean("zerogamestar", zerogamestar);
                int gmstarcount = shared.getInt("gamestarcounter", gamestarcounter[0]);

                gamestarcounter[0] = gmstarcount;
                if (zerogamestar==true) {
                    coinwarning.setVisibility(View.VISIBLE);
                    final Animation shake = AnimationUtils.loadAnimation(x, R.anim.lefttoright);
                    disableallchild.setVisibility(View.VISIBLE);
                    shake.setDuration(SLIDEANIMDUR);
                    coinwarning.setAnimation(shake);
                    final MediaPlayer clickaudio2 = MediaPlayer.create(getApplicationContext(), R.raw.popupsound);
                    if(!mutestate[0]) {
                        clickaudio2.start();
                        clickaudio2.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                            public void onCompletion(MediaPlayer mp) {
                                clickaudio2.release();

                            }

                            ;
                        });
                    }
                }

                else
                {
                    disableallchild.setVisibility(View.INVISIBLE);

                }
                iqplusone= shared.getBoolean("iqplusone", false);
                coinflip();

                coin[0] = shared.getInt("coin", coin[0]);
                gamestar =shared.getInt("gamestar", gamestar);
                gameincoin=shared.getInt("gameincoin", 0);
                gamereturncoin=coin[0];

               final int incrementcoin = gamereturncoin-gameincoin;
                if (incrementcoin < 10) {
                    if (!mutestate[0]) soundPool6.play(soundID6, volume, volume, 1, 0, 1f);
                }

                else
                {
                    final MediaPlayer clickaudio = MediaPlayer.create(getApplicationContext(), R.raw.coinabove10);
                    if (!mutestate[0]) {
                        clickaudio.start();
                        clickaudio.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                            public void onCompletion(MediaPlayer mp) {
                                clickaudio.release();

                            }

                            ;
                        });
                    }

                }

                loveincrement5(csix, process[5], process[5] + incrementcoin, 5);

                final TextView tcoin = (TextView) findViewById(R.id.textcoin);
               // tcoin.setText(Integer.toString(coin[0]));

                //gamestar = data.getIntExtra("gamestar", gamestar);

                if(iqplusone==true){

                    fireworks();
                    lock();
                    SharedPreferences pref;
                    pref = getSharedPreferences("info", MODE_PRIVATE);
                    final SharedPreferences.Editor editor = pref.edit();
                    editor.putBoolean("iqplusone", false);

                    editor.commit();
                }
                new CountDownTimer(500, 100) {


                    public void onTick(long milsec) {

                    }

                    public void onFinish() {

                        tcoin.setVisibility(View.VISIBLE);
                        ValueAnimator animator = new ValueAnimator();
                        animator.setObjectValues(coin[0]-incrementcoin, coin[0]);
                        animator.setDuration(500);
                        animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {
                            public void onAnimationUpdate(ValueAnimator animation) {
                                tcoin.setText("" + (int) animation.getAnimatedValue());


                            }

                        });
                        animator.start();

                    }
                }.start();
                //iq = iq + myValue;
                //TextView xu = (TextView) findViewById(R.id.textcoin);
                //iqnum.setText(Integer.toString(iq));
                //Toast toast = Toast.makeText(getApplicationContext(), "you have earned " + myValue + " points", Toast.LENGTH_SHORT);
                //toast.show();

                //xu.setText(Integer.toString(coin[0]));
                // use 'myValue' return value here
            }
        }


        else if (requestCode == 102) {
            if (resultCode == RESULT_OK) {
                //Intent i=new Intent(Intent.ACTION_VIEW);




            }
        }
    }

    void menu(int type)

    {
        final CircularProgressBar c3 = (CircularProgressBar) findViewById(R.id.circularprogressbar3);
        final MediaPlayer mp5 = MediaPlayer.create(getApplicationContext(), R.raw.eating2);
        final CircularProgressBar c1 = (CircularProgressBar) findViewById(R.id.circularprogressbar1);
        final MediaPlayer mpwakeup = MediaPlayer.create(getApplicationContext(), R.raw.wakeup);
        TextView tcoin1 = (TextView) findViewById(R.id.textcoin);
        final CircularProgressBar c2 = (CircularProgressBar) findViewById(R.id.circularprogressbar2);

        final CircularProgressBar cfour = (CircularProgressBar) findViewById(R.id.circularprogressbarfour);
        final Button lamp1 = (Button)findViewById(R.id.imageView30);
        final Button lamp2 = (Button)findViewById(R.id.imageView31);

        //c1.setTitleColor(Color.RED);
        //c1.setProgressColor(Color.RED);


      //  c2.setTitleColor(Color.GREEN);
      //  c2.setProgressColor(Color.GREEN);


       // c3.setTitleColor(Color.BLUE);
       // c3.setProgressColor(Color.BLUE);




        if (SleepStatus==1) {
            button_sbm4.setBackgroundResource(R.mipmap.wakeup);
            lamp1.setBackgroundResource(R.mipmap.lampon);
            lamp2.setBackgroundResource(R.mipmap.lampon);


            SleepStatus = 0;
            sleepbuttonpressed[0] = false;
            if(!mutestate[0])
                soundPool7wakeup.play(soundID7, volume, volume, 1, 0, 1f);
            closeeyes(false);
            increment3(cfour, process[3], process[3] + 1, 3);
            checkoverall();
        }

        int increment=1;
        int decrement=1;

        if ( type ==meatindex ) {



            eatbtnpressed[0] = true;
            //process[1]=process[1]-3;
           increment= 30;
            decrement=decrementcounter;
            eatincrement(c1, process[0], process[0] + increment, 0);
            increment2(c3, process[2], process[2] - decrement, 1);
            checkoverall();
        }


        else if(type ==pizzaindex)

        {
            increment= 17;
            decrement=decrementcounter;

            eatbtnpressed[0] = true;
            //process[1]=process[1]-3;
            if(!mutestate[0])
            //mp5.start();

            eatincrement(c1, process[0], process[0] + increment, 0);
            increment2(c3, process[2], process[2] - decrement, 1);
            checkoverall();
        }

        else if(type ==hamburgerindex)

        {
            increment= 20;
            decrement=decrementcounter;
            eatbtnpressed[0] = true;
            //process[1]=process[1]-3;
            eatincrement(c1, process[0], process[0] + increment, 0);
            increment2(c3, process[2], process[2] - decrement, 1);
            checkoverall();
        }


        else if(type ==watermelonindex)

        {
            increment= 15;
            decrement=decrementcounter;
            eatbtnpressed[0] = true;
            //process[1]=process[1]-3;
            eatincrement(c1, process[0], process[0] + increment, 0);
            increment2(c3, process[2], process[2] - decrement, 1);
            checkoverall();
        }

        else if(type ==tomatoindex)

        {
            increment= 7;
            decrement=decrementcounter;
            eatbtnpressed[0] = true;
            //process[1]=process[1]-3;
            eatincrement(c1, process[0], process[0] + increment, 0);
            increment2(c3, process[2], process[2] - decrement, 1);
            checkoverall();
        }

        else if(type ==pumpkinindex)

        {
            increment= 23;
            decrement=decrementcounter;
            eatbtnpressed[0] = true;
            //process[1]=process[1]-3;
            eatincrement(c1, process[0], process[0] + increment, 0);
            increment2(c3, process[2], process[2] - decrement, 1);
            checkoverall();
        }

        else if(type ==peesindex)

        {
            increment= 8;
            decrement=decrementcounter;
            eatbtnpressed[0] = true;
            //process[1]=process[1]-3;
            eatincrement(c1, process[0], process[0] + increment, 0);
            increment2(c3, process[2], process[2] - decrement, 1);
            checkoverall();
        }

        else if(type ==kiwiindex)

        {
            increment= 18;
            decrement=decrementcounter;
            eatbtnpressed[0] = true;
            //process[1]=process[1]-3;
            eatincrement(c1, process[0], process[0] + increment, 0);
            increment2(c3, process[2], process[2] - decrement, 1);
            checkoverall();
        }

        else if(type ==hotdogindex)

        {
            increment= 15;
            decrement=decrementcounter;
            eatbtnpressed[0] = true;
            //process[1]=process[1]-3;
            eatincrement(c1, process[0], process[0] + increment, 0);
            increment2(c3, process[2], process[2] - decrement, 1);
            checkoverall();
        }

        else if(type ==cornindex)

        {
            increment= 10;
            decrement=decrementcounter;
            eatbtnpressed[0] = true;
            //process[1]=process[1]-3;
            eatincrement(c1, process[0], process[0] + increment, 0);
            increment2(c3, process[2], process[2] - decrement, 1);
            checkoverall();
        }

        else if(type ==chilisindex)

        {
            increment= 17;
            decrement=decrementcounter;
            eatbtnpressed[0] = true;
            //process[1]=process[1]-3;
            eatincrement(c1, process[0], process[0] + increment, 0);
            increment2(c3, process[2], process[2] - decrement, 1);
            checkoverall();
        }

        else if(type ==broccoliindex)

        {
            increment= 20;
            decrement=decrementcounter;
            eatbtnpressed[0] = true;
            //process[1]=process[1]-3;
            eatincrement(c1, process[0], process[0] + increment, 0);
            increment2(c3, process[2], process[2] - decrement, 1);
            checkoverall();
        }

        else if(type ==bananaindex)

        {
            increment= 23;
            decrement=decrementcounter;
            eatbtnpressed[0] = true;
            //process[1]=process[1]-3;
            eatincrement(c1, process[0], process[0] + increment, 0);
            increment2(c3, process[2], process[2] - decrement, 1);
            checkoverall();
        }

        else if(type ==siskebapindex)

        {
            increment= 18;
            decrement=decrementcounter;
            eatbtnpressed[0] = true;
            //process[1]=process[1]-3;
            eatincrement(c1, process[0], process[0] + increment, 0);
            increment2(c3, process[2], process[2] - decrement, 1);
            checkoverall();
        }

        else if(type ==regional1index)

        {
            increment= 20;
            decrement=decrementcounter;
            eatbtnpressed[0] = true;
            //process[1]=process[1]-3;
            eatincrement(c1, process[0], process[0] + increment, 0);
            increment2(c3, process[2], process[2] - decrement, 1);
            checkoverall();
        }

        else if(type ==regional2index)

        {
            increment= 24;
            decrement=decrementcounter;
            eatbtnpressed[0] = true;
            //process[1]=process[1]-3;
            eatincrement(c1, process[0], process[0] + increment, 0);
            increment2(c3, process[2], process[2] - decrement, 1);
            checkoverall();
        }

        else if(type ==regional3index)

        {
            increment= 14;
            decrement=decrementcounter;
            eatbtnpressed[0] = true;
            //process[1]=process[1]-3;
            eatincrement(c1, process[0], process[0] + increment, 0);
            increment2(c3, process[2], process[2] - decrement, 1);
            checkoverall();
        }

        else if(type ==regional4index)

        {
            increment= 27;
            decrement=decrementcounter;
            eatbtnpressed[0] = true;
            //process[1]=process[1]-3;
            eatincrement(c1, process[0], process[0] + increment, 0);
            increment2(c3, process[2], process[2] - decrement, 1);
            checkoverall();
        }

        else if(type ==regional5index)

        {
            increment= 7;
            decrement=decrementcounter;
            eatbtnpressed[0] = true;
            //process[1]=process[1]-3;
            eatincrement(c1, process[0], process[0] + increment, 0);
            increment2(c3, process[2], process[2] - decrement, 1);
            checkoverall();
        }

        else if(type ==regional6index)

        {
            increment= 30;
            decrement=decrementcounter;
            eatbtnpressed[0] = true;
            //process[1]=process[1]-3;
            eatincrement(c1, process[0], process[0] + increment, 0);
            increment2(c3, process[2], process[2] - decrement, 1);
            checkoverall();
        }

        else if(type ==drinks1index)

        {
            increment= 6;
            decrement=decrementcounter;
            eatbtnpressed[0] = true;
            //process[1]=process[1]-3;
            eatincrement(c1, process[0], process[0] + increment, 0);
            increment2(c3, process[2], process[2] - decrement, 1);
            checkoverall();
        }

        else if(type ==drinks2index)

        {
            increment= 8;
            decrement=decrementcounter;
            eatbtnpressed[0] = true;
            //process[1]=process[1]-3;
            eatincrement(c1, process[0], process[0] + increment, 0);
            increment2(c3, process[2], process[2] - decrement, 1);
            checkoverall();
        }

        else if(type ==drinks3index)

        {
            increment= 9;
            decrement=decrementcounter;
            eatbtnpressed[0] = true;
            //process[1]=process[1]-3;
            eatincrement(c1, process[0], process[0] + increment, 0);
            increment2(c3, process[2], process[2] - decrement, 1);
            checkoverall();
        }

        else if(type ==drinks4index)

        {
            increment= 25;
            decrement=decrementcounter;
            eatbtnpressed[0] = true;
            //process[1]=process[1]-3;
            eatincrement(c1, process[0], process[0] + increment, 0);
            increment2(c3, process[2], process[2] - decrement, 1);
            checkoverall();
        }

        else if(type ==drinks5index)

        {
            increment= 12;
            decrement=decrementcounter;
            eatbtnpressed[0] = true;
            //process[1]=process[1]-3;
            eatincrement(c1, process[0], process[0] + increment, 0);
            increment2(c3, process[2], process[2] - decrement, 1);
            checkoverall();
        }

        else if(type ==drinks6index)

        {
            increment= 18;
            decrement=decrementcounter;
            eatbtnpressed[0] = true;
            //process[1]=process[1]-3;
            eatincrement(c1, process[0], process[0] + increment, 0);
            increment2(c3, process[2], process[2] - decrement, 1);
            checkoverall();
        }

        else if(type ==desert1index)

        {
            increment= 12;
            decrement=decrementcounter;
            eatbtnpressed[0] = true;
            //process[1]=process[1]-3;
            eatincrement(c1, process[0], process[0] + increment, 0);
            increment2(c3, process[2], process[2] - decrement, 1);
            checkoverall();
        }

        else if(type ==desert2index)

        {
            increment= 15;
            decrement=decrementcounter;
            eatbtnpressed[0] = true;
            //process[1]=process[1]-3;
            eatincrement(c1, process[0], process[0] + increment, 0);
            increment2(c3, process[2], process[2] - decrement, 1);
            checkoverall();
        }

        else if(type ==desert3index)

        {
            increment= 10;
            decrement=decrementcounter;
            eatbtnpressed[0] = true;
            //process[1]=process[1]-3;
            eatincrement(c1, process[0], process[0] + increment, 0);
            increment2(c3, process[2], process[2] - decrement, 1);
            checkoverall();
        }

        else if(type ==desert4index)

        {
            increment= 18;
            decrement=decrementcounter;
            eatbtnpressed[0] = true;
            //process[1]=process[1]-3;
            eatincrement(c1, process[0], process[0] + increment, 0);
            increment2(c3, process[2], process[2] - decrement, 1);
            checkoverall();
        }
        else if(type ==desert5index)

        {
            increment= 23;
            decrement=decrementcounter;
            eatbtnpressed[0] = true;
            //process[1]=process[1]-3;
            eatincrement(c1, process[0], process[0] + increment, 0);
            increment2(c3, process[2], process[2] - decrement, 1);
            checkoverall();
        }

        else if(type ==desert6index)

        {
            increment= 12;
            decrement=decrementcounter;
            eatbtnpressed[0] = true;
            //process[1]=process[1]-3;
            eatincrement(c1, process[0], process[0] + increment, 0);
            increment2(c3, process[2], process[2] - decrement, 1);
            checkoverall();
        }






        else if(type ==frenchfriesindex)

        {
            increment= 8;
            decrement=decrementcounter;
            eatbtnpressed[0] = true;
            //process[1]=process[1]-3;
            eatincrement(c1, process[0], process[0] + increment, 0);
            increment2(c3, process[2], process[2] - decrement, 1);
            checkoverall();
        }

        else if(type ==chickenlegindex)

        {
            increment= 12;
            decrement=decrementcounter;
            eatbtnpressed[0] = true;
            //process[1]=process[1]-3;
            eatincrement(c1, process[0], process[0] + increment, 0);
            increment2(c3, process[2], process[2] - decrement, 1);
            checkoverall();
        }

        else if(type ==fishindex)

        {
            increment= 25;
            decrement=decrementcounter;
            eatbtnpressed[0] = true;
            eatincrement(c1, process[0], process[0] + increment, 0);
            increment2(c3, process[2], process[2] - decrement, 1);
            checkoverall();
        }


        else if(type ==appleindex)

        {
            increment= 6;
            decrement=decrementcounter;
            eatbtnpressed[0] = true;
            eatincrement(c1, process[0], process[0] + increment, 0);
            increment2(c3, process[2], process[2] - decrement, 1);
            checkoverall();
        }

        else if(type ==bostonrollindex)

        {
            increment= 8;
            decrement=decrementcounter;
            eatbtnpressed[0] = true;
            eatincrement(c1, process[0], process[0] + increment, 0);
            increment2(c3, process[2], process[2] - decrement, 1);
            checkoverall();
        }

        else if(type ==carrotindex)

        {
            increment= 6;
            decrement=decrementcounter;
            eatbtnpressed[0] = true;
            eatincrement(c1, process[0], process[0] + increment, 0);
            increment2(c3, process[2], process[2] - decrement, 1);
            checkoverall();
        }

        else if(type ==frenchtoastindex)

        {
            increment= 10;
            decrement=decrementcounter;
            eatbtnpressed[0] = true;
            eatincrement(c1, process[0], process[0] + increment, 0);
            increment2(c3, process[2], process[2] - decrement, 1);
            checkoverall();
        }

        else if(type ==meatarmindex)

        {
            increment= 10;
            decrement=decrementcounter;
            eatbtnpressed[0] = true;
            eatincrement(c1, process[0], process[0] + increment, 0);
            increment2(c3, process[2], process[2] - decrement, 1);
            checkoverall();
        }

        else if(type ==medisaladindex)

        {
            increment= 15;
            decrement=decrementcounter;
            eatbtnpressed[0] = true;
            eatincrement(c1, process[0], process[0] + increment, 0);
            increment2(c3, process[2], process[2] - decrement, 1);
            checkoverall();
        }

        else if(type ==noodleindex)

        {
            increment= 12;
            decrement=decrementcounter;
            eatbtnpressed[0] = true;
            eatincrement(c1, process[0], process[0] + increment, 0);
            increment2(c3, process[2], process[2] - decrement, 1);
            checkoverall();
        }

        else if(type ==mixedsaladindex)

        {
            increment= 8;
            decrement=decrementcounter;
            eatbtnpressed[0] = true;
            eatincrement(c1, process[0], process[0] + increment, 0);
            increment2(c3, process[2], process[2] - decrement, 1);
            checkoverall();
        }

        else if(type ==onionringsindex)

        {
            increment= 20;
            decrement=decrementcounter;
            eatbtnpressed[0] = true;
            eatincrement(c1, process[0], process[0] + increment, 0);
            increment2(c3, process[2], process[2] - decrement, 1);
            checkoverall();
        }

        else if(type ==orangeindex)

        {
            increment= 7;
            decrement=decrementcounter;
            eatbtnpressed[0] = true;
            eatincrement(c1, process[0], process[0] + increment, 0);
            increment2(c3, process[2], process[2] - decrement, 1);
            checkoverall();
        }

        else if(type ==porkindex)

        {
            increment= 23;
            decrement=decrementcounter;
            eatbtnpressed[0] = true;
            eatincrement(c1, process[0], process[0] + increment, 0);
            increment2(c3, process[2], process[2] - decrement, 1);
            checkoverall();
        }

        else if(type ==salmonsushiindex)

        {
            increment= 8;
            decrement=decrementcounter;
            eatbtnpressed[0] = true;
            eatincrement(c1, process[0], process[0] + increment, 0);
            increment2(c3, process[2], process[2] - decrement, 1);
            checkoverall();
        }

        else if(type ==soupindex)

        {
            increment= 12;
            decrement=decrementcounter;
            eatbtnpressed[0] = true;
            eatincrement(c1, process[0], process[0] + increment, 0);
            increment2(c3, process[2], process[2] - decrement, 1);
            checkoverall();
        }

        else if(type ==squidindex)

        {
            increment= 8;
            decrement=decrementcounter;
            eatbtnpressed[0] = true;
            eatincrement(c1, process[0], process[0] + increment, 0);
            increment2(c3, process[2], process[2] - decrement, 1);
            checkoverall();
        }

        else if(type ==cokeindex)

        {
            increment= 15;
            decrement=decrementcounter;
            eatbtnpressed[0] = true;
            eatincrement(c1, process[0], process[0] + increment, 0);
            increment2(c3, process[2], process[2] - decrement, 1);
            checkoverall();
        }

        else if(type ==brownieindex)

        {
            increment= 6;
            decrement=decrementcounter;
            eatbtnpressed[0] = true;
            eatincrement(c1, process[0], process[0] + increment, 0);
            increment2(c3, process[2], process[2] - decrement, 1);
            checkoverall();
        }

        else if(type ==cheesecakeindex)

        {
            increment= 8;
            decrement=decrementcounter;
            eatbtnpressed[0] = true;
            eatincrement(c1, process[0], process[0] + increment, 0);
            increment2(c3, process[2], process[2] - decrement, 1);
            checkoverall();
        }

        else if(type ==cheeseindex)

        {
            increment= 8;
            decrement=decrementcounter;
            eatbtnpressed[0] = true;
            eatincrement(c1, process[0], process[0] + increment, 0);
            increment2(c3, process[2], process[2] - decrement, 1);
            checkoverall();
        }

        else if(type ==juiceindex)

        {
            increment= 10;
            decrement=decrementcounter;
            eatbtnpressed[0] = true;
            eatincrement(c1, process[0], process[0] + increment, 0);
            increment2(c3, process[2], process[2] - decrement, 1);
            checkoverall();
        }


        //appleimg,bostonrollimg,carrotimg,frenchtoastimg,meatarmimg, medisaladimg,noodleimg,mixedsaladimg, onionringsv,orangeimg,porkimg,mixedrollimg, salmonsushiimg,soupimg,squidimg,cokeimg,brownieimg,cheesecakeimg,cheeseimg, juiceimg;

    }



 public void movemouth(int mouthx, int mouthy,int mouthx1,int mouthy1,int chinx, int chinx1, int chiny, int chiny1){


     Bundle params = new Bundle();
     params.putString("image_name", "movemouth");
     params.putString("full_text", "movemouth");
     mFirebaseAnalytics.logEvent("movemouth", params);

     animationmouth=true;
     wait5();
     final ImageView mvm = (ImageView) findViewById(R.id.mouthimg);

     final FrameLayout fmouth=(FrameLayout) findViewById(R.id.framemouth);


     final FrameLayout fmouthup = (FrameLayout) findViewById(R.id.halfmouthtop);
     final ImageView fmouthupimg = (ImageView) findViewById(R.id.halfmouthtopimg);

     final FrameLayout frmouth = (FrameLayout) findViewById(R.id.frameblack);
     final ImageView mouthblack = (ImageView) findViewById(R.id.mouthblack);

     fmouth.setVisibility(View.VISIBLE);
     mvm.setVisibility(View.VISIBLE);
     fmouthup.setVisibility(View.VISIBLE);
     frmouth.setVisibility(View.VISIBLE);
     fmouthupimg.setVisibility(View.VISIBLE);

     ViewGroup.MarginLayoutParams marginParams1mouth = new ViewGroup.MarginLayoutParams(frmouth.getLayoutParams());
     marginParams1mouth.setMargins(mouthx+15, mouthy, 0, 0);
     marginParams1mouth.setMargins(mouthx, mouthy+(mouthy1-mouthy)/2-20, 0, 0);
     FrameLayout.LayoutParams layoutParams1mouth = new FrameLayout.LayoutParams(marginParams1mouth);
     layoutParams1mouth.width =(mouthx1-mouthx) ;
     layoutParams1mouth.height=60 ;
     frmouth.setLayoutParams(layoutParams1mouth);
     frmouth.setVisibility(View.VISIBLE);
     Bitmap x1mouth = BitmapFactory.decodeResource(getResources(), R.mipmap.blackrect,options);
     Drawable x12 = new RoundImage(x1mouth);
     frmouth.setBackground(x12);

     //Drawable d = new RoundImage(x1);
     //frmouth.setBackground(d);
     //img.setImageBitmap(x1);
     //img.setBackgroundColor(resizedBitmap.getPixel(myValue  - (rx - resizedBitmap.getWidth()) / 2 + p2x - myValue+5, myValuey+15));
     //mouthblack.setImageBitmap(x1);



     ViewGroup.MarginLayoutParams marginParams2mouthup = new ViewGroup.MarginLayoutParams(frmouth.getLayoutParams());
     marginParams2mouthup.setMargins(mouthx, mouthy, 0, 0);
     FrameLayout.LayoutParams layoutParams2mouthup = new FrameLayout.LayoutParams(marginParams2mouthup);
     layoutParams2mouthup.height = mouthy1-mouthy;
     layoutParams2mouthup.width= (mouthx1-mouthx);
     fmouthup.setLayoutParams(layoutParams2mouthup);
     fmouthupimg.setImageBitmap(getcliphalfup(movemouthup));





     ViewGroup.MarginLayoutParams marginParams2mouth = new ViewGroup.MarginLayoutParams(fmouth.getLayoutParams());
     marginParams2mouth.setMargins(chinx, mouthy + (mouthy1 - mouthy) / 2 - (chiny1 - (mouthy + (mouthy1 - mouthy) / 2)), 0, 0);
     FrameLayout.LayoutParams layoutParams2mouth = new FrameLayout.LayoutParams(marginParams2mouth);
     layoutParams2mouth.height = ((chiny1-(mouthy+(mouthy1-mouthy)/2))*2);
     layoutParams2mouth.width= (chinx1-chinx);
     fmouth.setLayoutParams(layoutParams2mouth);
     mvm.setImageBitmap(getcliphalf(movemouthdown));

int animcount = 16;
int duration = 50;
if (drinkflag)

{
    animcount = 9;
    duration = 50;
}



    final Animation mAnimation22;
     mAnimation22 = new TranslateAnimation(0, 0, 0, 10);
     // mAnimation = new TranslateAnimation(0, 0, -20, 0);

     mAnimation22.setDuration(duration);
     mAnimation22.setFillAfter(true);
     mAnimation22.setRepeatCount(animcount);
     mAnimation22.setRepeatMode(Animation.REVERSE);
     mvm.setAnimation(mAnimation22);
     mvm.setVisibility(View.VISIBLE);






        final Animation mAnimation1 = new TranslateAnimation(0, 0, 0, -10);
        // mAnimation = new TranslateAnimation(0, 0, -20, 0);
        mAnimation1.setDuration(duration);
     mAnimation1.setFillAfter(true);
     mAnimation1.setRepeatCount(animcount);
     mAnimation1.setRepeatMode(Animation.REVERSE);
     fmouthupimg.setAnimation(mAnimation1);
     fmouthupimg.setVisibility(View.VISIBLE);
     final  Handler handler = new Handler();
     final int delay = 300;



         mAnimation1.setAnimationListener(new Animation.AnimationListener() {
             @Override
             public void onAnimationStart(Animation animation) {


                // final MediaPlayer eat = MediaPlayer.create(getApplicationContext(), R.raw.eatsound);
                // final MediaPlayer drink = MediaPlayer.create(getApplicationContext(), R.raw.drink);




                 //if (!mutestate[0])
                   //  eat.start();

             }

             @Override
             public void onAnimationEnd(Animation animation) {


                 fmouth.setVisibility(View.INVISIBLE);
                 mvm.setVisibility(View.INVISIBLE);
                 fmouthup.setVisibility(View.INVISIBLE);
                 frmouth.setVisibility(View.INVISIBLE);
                 fmouthupimg.setVisibility(View.INVISIBLE);

                 mAnimation1.cancel();
                 mAnimation22.cancel();
                 mAnimation1.reset();
                 mAnimation22.reset();
                 animationmouth=false;
                frenchfriesflag=false;
                 //frenchfriesimg.setEnabled(true);
             }

             @Override
             public void onAnimationRepeat(Animation animation) {

                 animationmouth = true;
             }
         });

     new CountDownTimer(800, 100) {
         public void onTick(long milsec) {


         }

         public void onFinish() {

             drinkflag = false;
         }
     }.start();


    }


    public String md5(String s) {
        try {
            // Create MD5 Hash
            MessageDigest digest = java.security.MessageDigest.getInstance("MD5");
            digest.update(s.getBytes());
            byte messageDigest[] = digest.digest();

            // Create Hex String
            StringBuffer hexString = new StringBuffer();
            for (int i=0; i<messageDigest.length; i++)
                hexString.append(Integer.toHexString(0xFF & messageDigest[i]));
            return hexString.toString();

        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        return "";
    }






    public Bitmap sketch(Bitmap x){


/*
        mFilter = new GPUImageToonFilter();

        mFilterAdjuster = new GPUImageFilterTools.FilterAdjuster(mFilter);
        mFilterAdjuster.canAdjust();
        mFilterAdjuster.adjust(40);
        mGPUImage = new GPUImage(this);
        //mGPUImage.setGLSurfaceView((GLSurfaceView) findViewById(R.id.surfaceView));
        mGPUImage.setImage(x); // this loads image on the current thread, should be run in a thread
        mGPUImage.setFilter(mFilter);
        mGPUImage.requestRender();
        Bitmap lastb = mGPUImage.getBitmapWithFilterApplied(x);

        mGPUImage.deleteImage();

        return lastb;
*/ Bitmap y=x;
        return y;


    }


    public static Bitmap getclip(Bitmap bitmap) {
        Bitmap output = Bitmap.createBitmap(bitmap.getWidth(),
                bitmap.getHeight(), Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(output);

        final Paint paint = new Paint();
final RectF rectf = new RectF(0, 0, bitmap.getWidth(), bitmap.getHeight());
        final Rect rect = new Rect(0, 0, bitmap.getWidth(), bitmap.getHeight());
        paint.setAntiAlias(true);
        canvas.drawARGB(0, 0, 0, 0);
        //canvas.drawCircle(bitmap.getWidth() / 2, bitmap.getHeight() / 2, bitmap.getWidth() / 2, paint);

        canvas.drawArc(rectf, 0, 360, true, paint);

        paint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.SRC_IN));
        canvas.drawBitmap(bitmap, rect, rect, paint);
        return output;
    }



    public static Bitmap getcliphalf(Bitmap bitmap) {
        Bitmap output = Bitmap.createBitmap(bitmap.getWidth(),
                bitmap.getHeight(), Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(output);

        final Paint paint = new Paint();
        final Rect rect = new Rect(0, 0, bitmap.getWidth(), bitmap.getHeight());
        final RectF rectf = new RectF(0, 0, bitmap.getWidth(), bitmap.getHeight());
        paint.setAntiAlias(true);
        canvas.drawARGB(0, 0, 0, 0);


        //canvas.drawArc(new RectF(PADDING, PADDING, getWidth() - PADDING, getHeight() - PADDING), 0, 180, true, mRectPaint);
        canvas.drawArc(rectf, 0, 180, true, paint);
        //canvas.drawCircle(bitmap.getWidth() / 2, bitmap.getHeight() / 2,

        //        bitmap.getWidth() / 2, paint);
        paint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.SRC_IN));
        canvas.drawBitmap(bitmap, rect, rect, paint);
        return output;
    }



    @Override
    public void onStop() {
        super.onStop();
      //  MoPub.onStop(this);

        FlurryAgent.onEndSession(this);
        //adBanner.destroy();
        SharedPreferences pref;
        pref = getSharedPreferences("info", MODE_PRIVATE);
//Using putXXX - with XXX is type data you want to write like: putString, putInt...   from      Editor object
        SharedPreferences.Editor editor = pref.edit();
        editor.putInt("procss1key", process[1]);
        editor.putInt("procss2key", process[2]);
        editor.putInt("procss3key", process[3]);
        editor.putInt("procss4key", process[4]);
        editor.putInt("procss5key", process[5]);
        editor.putBoolean("onresume", false);
        editor.putInt("iq",iq);
        editor.putInt("coin",coin[0]);
       // savearray(marketarraystore);
        editor.putInt("heartspeed", heart_speed[0]);
       // editor.putBoolean("isplustencoin",isplustencoin);
        Boolean m = mutestate[0];
        editor.putBoolean("mutestate", m);
        editor.putBoolean("gamestop", true);
        editor.putInt("gamestar", gamestar);
        final SwitchButton notificationswitch = (SwitchButton) findViewById(R.id.switch1);
        sensore.unregisterListener(this);
        /*if(notificationswitch.isChecked()) {

            editor.putBoolean("notification", false);
            editor.commit();

        }
        else

        {

            editor.putBoolean("notification", true);
            editor.commit();


        }*/
        int meatcount = marketarray[meatindex];
       // int vegetablecount =  marketarray[vegetableindex];
        pizzacount = marketarray[pizzaindex];



        int vegetablecount =  marketarray[vegetableindex];
        int pizzacount = marketarray[pizzaindex];
        int hamburgercount= marketarray[hamburgerindex];
        int frenchfriewscount= marketarray[frenchfriesindex];
        int chickenlegcount = marketarray[chickenlegindex];
        int fishcount =  marketarray[fishindex];
        int applecount =  marketarray[appleindex];
        int bostronrollcount = marketarray[bostonrollindex];
        int carrotcount = marketarray[carrotindex];
        int frenchtoastcount = marketarray[frenchtoastindex];
        int meatarmcount = marketarray[meatarmindex];
        int mediasaladcount =marketarray[medisaladindex];
        int noodlecount = marketarray[noodleindex];
        int mixedsaladcount =marketarray[mixedsaladindex];
        int onionringscount = marketarray[onionringsindex];
        int orangecount = marketarray[orangeindex];
        int porkcount= marketarray[porkindex];
        int mixedrollcount =marketarray[mixedrollindex];
        int salmonsushicount = marketarray[salmonsushiindex];
        int soupcount = marketarray[soupindex];

        int watermeloncount= marketarray[watermelonindex];
        int tomatocount= marketarray[tomatoindex];
        int pumpkincount= marketarray[pumpkinindex];
        int peescount= marketarray[peesindex];
        int kiwicount= marketarray[kiwiindex];
        int hotdogcount= marketarray[hotdogindex];
        int corncount= marketarray[cornindex];
        int chiliscount= marketarray[chilisindex];
        int broccolicount= marketarray[broccoliindex];
        int bananacount= marketarray[bananaindex];
        int siskebapcount= marketarray[siskebapindex];
        int regional1count= marketarray[regional1index];
        int regional2count= marketarray[regional2index];
        int regional3count= marketarray[regional3index];
        int regional4count= marketarray[regional4index];
        int regional5count= marketarray[regional5index];
        int regional6count= marketarray[regional6index];




        int drinks1count= marketarray[drinks1index];
        int drinks2count= marketarray[drinks2index];
        int drinks3count= marketarray[drinks3index];
        int drinks4count= marketarray[drinks4index];
        int drinks5count= marketarray[drinks5index];
        int drinks6count= marketarray[drinks6index];



        int desert1count= marketarray[desert1index];
        int desert2count= marketarray[desert2index];
        int desert3count= marketarray[desert3index];
        int desert4count= marketarray[desert4index];
        int desert5count= marketarray[desert5index];
        int desert6count= marketarray[desert6index];
        int squidcount =marketarray[squidindex];
        int cokecount =marketarray[cokeindex];
        int browniecount = marketarray[brownieindex];
        int cheesecount =marketarray[cheeseindex];
        int cheesecakecount = marketarray[cheesecakeindex];
        int juicecount = marketarray[juiceindex];
        int greensoapcount = marketarray[greensoapindex];
        int soap1count = marketarray[soap1index];
        int soap2count = marketarray[soap2index];
        int cellspongecount =marketarray[cellspongeindex];
        int darkspongecount =marketarray[darkspongeindex];
        int seaspongecount =marketarray[seaspongeindex];


        int sleeppotioncount = marketarray[sleeppotionindex];
        int hungerpotioncount = marketarray[hungerpotionindex];
        int hygienepotioncount =marketarray[hygienepotionindex];
        int lovepotioncount =marketarray[lovepotionindex];
        int gamepotioncount =marketarray[gamepotionindex];

        int allinpotioncount =marketarray[allinpotionindex];



        int hour = Calendar.getInstance().get(Calendar.HOUR_OF_DAY);
        int minutes = Calendar.getInstance().get(Calendar.MINUTE);
        int sec = Calendar.getInstance().get(Calendar.SECOND);

        editor.putInt("loyaltyhours", hour);
        editor.putInt("loyaltyminutes", minutes);
        editor.putInt("loyaltyseconds", sec);


        editor.putInt("meatcount",meatcount);
        editor.putInt("vegetablecount",vegetablecount);
        editor.putInt("pizzacount",pizzacount);
        editor.putInt("hamburgercount",hamburgercount);

        editor.putInt("watermeloncount",watermeloncount);
        editor.putInt("tomatocount",tomatocount);
        editor.putInt("pumpkincount",pumpkincount);
        editor.putInt("peescount",peescount);
        editor.putInt("kiwicount",kiwicount);
        editor.putInt("hotdogcount",hotdogcount);
        editor.putInt("corncount",corncount);
        editor.putInt("chiliscount",chiliscount);
        editor.putInt("broccolicount",broccolicount);
        editor.putInt("bananacount",bananacount);
        editor.putInt("siskebapcount",siskebapcount);
        editor.putInt("regional1count",regional1count);
        editor.putInt("regional2count",regional2count);
        editor.putInt("regional3count",regional3count);
        editor.putInt("regional4count",regional4count);
        editor.putInt("regional5count",regional5count);
        editor.putInt("regional6count",regional6count);
        editor.putInt("drinks1count",drinks1count);
        editor.putInt("drinks2count",drinks2count);
        editor.putInt("drinks3count",drinks3count);
        editor.putInt("drinks4count",drinks4count);
        editor.putInt("drinks5count",drinks5count);
        editor.putInt("drinks6count",drinks6count);
        editor.putInt("desert1count",desert1count);
        editor.putInt("desert2count", desert2count);
        editor.putInt("desert3count", desert3count);
        editor.putInt("desert4count",desert4count);
        editor.putInt("desert5count",desert5count);
        editor.putInt("desert6count", desert6count);

        editor.putInt("frenchfriewscount",frenchfriewscount);
        editor.putInt("chickenlegcount",chickenlegcount);
        editor.putInt("fishcount",fishcount);
        editor.putInt("applecount",applecount);
        editor.putInt("bostronrollcount",bostronrollcount);
        editor.putInt("carrotcount",carrotcount);
        editor.putInt("frenchtoastcount",frenchtoastcount);
        editor.putInt("meatarmcount",meatarmcount);
        editor.putInt("mediasaladcount",mediasaladcount);
        editor.putInt("noodlecount",noodlecount);
        editor.putInt("mixedsaladcount",mixedsaladcount);
        editor.putInt("onionringscount",onionringscount);
        editor.putInt("orangecount",orangecount);
        editor.putInt("porkcount",porkcount);
        editor.putInt("mixedrollcount",mixedrollcount);
        editor.putInt("salmonsushicount",salmonsushicount);
        editor.putInt("soupcount",soupcount);
        editor.putInt("squidcount",squidcount);
        editor.putInt("cokecount",cokecount);
        editor.putInt("browniecount",browniecount);
        editor.putInt("cheesecount",cheesecount);
        editor.putInt("cheesecakecount",cheesecakecount);
        editor.putInt("juicecount",juicecount);
        editor.putInt("greensoapcount",greensoapcount);
        editor.putInt("soap1count",soap1count);
        editor.putInt("soap2count",soap2count);
        editor.putInt("cellspongecount",cellspongecount);
        editor.putInt("darkspongecount",darkspongecount);
        editor.putInt("seaspongecount",seaspongecount);

        editor.putInt("sleeppotioncount",sleeppotioncount);
        editor.putInt("hungerpotioncount",hungerpotioncount);
        editor.putInt("hygienepotioncount",hygienepotioncount);
        editor.putInt("lovepotioncount",lovepotioncount);
        editor.putInt("gamepotioncount",gamepotioncount);
        editor.putInt("allinpotioncount",allinpotioncount);






        editor.putInt("gamestar",gamestar);
        int gamestarcounter1=gamestarcounter[0];
      //  editor.putInt("gamestarcounter",gamestarcounter1);


        editor.putInt("pupilleftxstore",pupilleftxstore);
        editor.putInt("pupilleftystore",pupilleftystore);
        editor.putInt("pupilleftx1store",pupilleftx1store);
        editor.putInt("pupillefty1store",pupillefty1store);

        editor.putInt("pupilrightxstore",pupilrightxstore);
        editor.putInt("pupilrightystore",pupilrightystore);
        editor.putInt("pupilrightx1store",pupilrightx1store);
        editor.putInt("pupilrighty1store",pupilrighty1store);

        editor.putInt("lefteyexstore",lefteyexstore);
        editor.putInt("lefteyeystore",lefteyeystore);
        editor.putInt("lefteyex1store", lefteyex1store);
        editor.putInt("lefteyey1store", lefteyey1store);

        editor.putInt("righteyexstore",righteyexstore);
        editor.putInt("righteyeystore",righteyeystore);
        editor.putInt("righteyex1store", righteyex1store);
        editor.putInt("righteyey1store", righteyey1store);


        editor.putInt("mouthx", mouthxstore);
        editor.putInt("mouthy", mouthystore);
        editor.putInt("mouthx1", mouthx1store);
        editor.putInt("mouthy1", mouthy1store);
        editor.putBoolean("vibration", vibration);
        editor.putInt("chinx", chinxstore);
        editor.putInt("chinx1", chinx1store);
        editor.putInt("chiny", chinystore);
        editor.putInt("chiny1", chiny1store);
        if(quit==false)
        editor.putInt("newgame", 1);

       // editor.putFloat("width1", width1);
       // editor.putFloat("height1", height1);
        boolean sl = sleepbuttonpressed[0];

        editor.putBoolean("sleep", sl);
        long time= System.currentTimeMillis();
        time = time/1000; // in minutes
        editor.putLong("time", time);
        editor.putLong("time2", time);
//finally, when you are done saving the values, call the commit() method.
        editor.commit();


        /*startService(new Intent(this, MyService.class));

        startalarm();*/

    }

    @Override
    public void onPause() {
      //  MoPub.onPause(this);
     /*   if (mAdView != null) {
            mAdView.pause();
        }*/



        super.onPause();

            mWakeLock.release();

        endfly();

      //  set.cancel();
        if (optionaudio.isPlaying()) {
            optionaudio.pause();
        }

      //  vunglePub.onPause();
        SharedPreferences pref;
        pref = getSharedPreferences("info", MODE_PRIVATE);
//Using putXXX - with XXX is type data you want to write like: putString, putInt...   from      Editor object
        SharedPreferences.Editor editor = pref.edit();
       /* editor.putInt("procss0key", process[0]);
        editor.putInt("procss1key", process[1]);
        editor.putInt("procss2key", process[2]);
        editor.putInt("procss3key", process[3]);
        editor.putInt("procss4key", process[4]);
        editor.putInt("procss5key", process[5]);*/
        editor.putInt("gamestar", gamestar);
        //editor.putBoolean("isplustencoin", isplustencoin);
        editor.putInt("iq",iq);
        int gamestarcounter1 = gamestarcounter[0];
       // editor.putInt("gamestarcounter",gamestarcounter1);
        editor.putInt("heartspeed", heart_speed[0]);
        editor.putInt("mProgressStatus2", mProgressStatus[0]);
        if(quit==false)
            editor.putInt("newgame", 1);

        boolean sl = sleepbuttonpressed[0];
        editor.putBoolean("sleep", sl);
        long time= System.currentTimeMillis();
        time = time/1000; // in minutes
        editor.putLong("time", time);
        editor.putInt("coin",coin[0]);
        editor.putLong("time2", time);

        editor.putBoolean("vibration",vibration);
        editor.commit();

        Thread.currentThread().interrupt();




    }

    @Override
    public void onDestroy() {
        mobInterstitial.destroy();
        mobInterstitial2.destroy();
        mobInterstitial3.destroy();
        if (adViewface != null) {
            adViewface.destroy();
        }
        if (moPubView != null) {

        moPubView.destroy();}
      /*  if (mAdView != null) {
            mAdView.destroy();
        }*/


        if (mService != null) {
            unbindService(mServiceConn);
        }


        if (bp != null)
           bp.release();
        super.onDestroy();


        SharedPreferences pref;
        pref = getSharedPreferences("info", MODE_PRIVATE);
//Using putXXX - with XXX is type data you want to write like: putString, putInt...   from      Editor object
        SharedPreferences.Editor editor = pref.edit();

        int hour = Calendar.getInstance().get(Calendar.HOUR_OF_DAY);
        int minutes = Calendar.getInstance().get(Calendar.MINUTE);
        int sec = Calendar.getInstance().get(Calendar.SECOND);
        //editor.putInt("gamestar", gamestar);
        editor.putInt("loyaltyhours", hour);
        editor.putInt("loyaltyminutes", minutes);
        editor.putInt("loyaltyseconds", sec);
        editor.putBoolean("onresume", false);
       // savearray(marketarraystore);
        editor.putInt("procss0key", process[0]);
        editor.putInt("procss1key", process[1]);
        editor.putInt("procss2key", process[2]);
        editor.putInt("procss3key", process[3]);
        editor.putInt("procss4key", process[4]);
        editor.putInt("procss5key", process[5]);
        editor.putInt("iq",iq);
        editor.putInt("coin",coin[0]);
        editor.putInt("heartspeed", heart_speed[0]);
        editor.putBoolean("vibration", vibration);
        //editor.putBoolean("isplustencoin",isplustencoin);
        editor.putBoolean("gamestop", true);
        final SwitchButton notificationswitch = (SwitchButton) findViewById(R.id.switch1);

       /* if(notificationswitch.isChecked()) {

            editor.putBoolean("notification", false);
            editor.commit();

        }
        else

        {

            editor.putBoolean("notification", true);
            editor.commit();


        }*/
        Boolean m = mutestate[0];
        editor.putBoolean("mutestate", m);

        int meatcount = marketarray[meatindex];
        int vegetablecount =  marketarray[vegetableindex];
        int pizzacount = marketarray[pizzaindex];
        int hamburgercount= marketarray[hamburgerindex];
        int frenchfriewscount= marketarray[frenchfriesindex];
        int chickenlegcount = marketarray[chickenlegindex];
        int fishcount =  marketarray[fishindex];
        int applecount =  marketarray[appleindex];
        int bostronrollcount = marketarray[bostonrollindex];
        int carrotcount = marketarray[carrotindex];
        int frenchtoastcount = marketarray[frenchtoastindex];
        int meatarmcount = marketarray[meatarmindex];
        int mediasaladcount =marketarray[medisaladindex];
        int noodlecount = marketarray[noodleindex];
        int mixedsaladcount =marketarray[mixedsaladindex];
        int onionringscount = marketarray[onionringsindex];
        int orangecount = marketarray[orangeindex];
        int porkcount= marketarray[porkindex];
        int mixedrollcount =marketarray[mixedrollindex];
        int salmonsushicount = marketarray[salmonsushiindex];
        int soupcount = marketarray[soupindex];

        int watermeloncount= marketarray[watermelonindex];
        int tomatocount= marketarray[tomatoindex];
        int pumpkincount= marketarray[pumpkinindex];
        int peescount= marketarray[peesindex];
        int kiwicount= marketarray[kiwiindex];
        int hotdogcount= marketarray[hotdogindex];
        int corncount= marketarray[cornindex];
        int chiliscount= marketarray[chilisindex];
        int broccolicount= marketarray[broccoliindex];
        int bananacount= marketarray[bananaindex];
        int siskebapcount= marketarray[siskebapindex];
        int regional1count= marketarray[regional1index];
        int regional2count= marketarray[regional2index];
        int regional3count= marketarray[regional3index];
        int regional4count= marketarray[regional4index];
        int regional5count= marketarray[regional5index];
        int regional6count= marketarray[regional6index];




        int drinks1count= marketarray[drinks1index];
        int drinks2count= marketarray[drinks2index];
        int drinks3count= marketarray[drinks3index];
        int drinks4count= marketarray[drinks4index];
        int drinks5count= marketarray[drinks5index];
        int drinks6count= marketarray[drinks6index];



        int desert1count= marketarray[desert1index];
        int desert2count= marketarray[desert2index];
        int desert3count= marketarray[desert3index];
        int desert4count= marketarray[desert4index];
        int desert5count= marketarray[desert5index];
        int desert6count= marketarray[desert6index];


        int squidcount =marketarray[squidindex];
        int cokecount =marketarray[cokeindex];
        int browniecount = marketarray[brownieindex];
        int cheesecount =marketarray[cheeseindex];
        int cheesecakecount = marketarray[cheesecakeindex];
        int juicecount = marketarray[juiceindex];
        int greensoapcount = marketarray[greensoapindex];
        int soap1count = marketarray[soap1index];
        int soap2count = marketarray[soap2index];
        int cellspongecount =marketarray[cellspongeindex];
        int darkspongecount =marketarray[darkspongeindex];
        int seaspongecount =marketarray[seaspongeindex];

        int sleeppotioncount = marketarray[sleeppotionindex];
        int hungerpotioncount = marketarray[hungerpotionindex];
        int hygienepotioncount =marketarray[hygienepotionindex];
        int lovepotioncount =marketarray[lovepotionindex];
        int allinpotioncount =marketarray[allinpotionindex];
        int gamepotioncount =marketarray[gamepotionindex];


        editor.putInt("meatcount",meatcount);
        editor.putInt("vegetablecount",vegetablecount);
        editor.putInt("pizzacount",pizzacount);
        editor.putInt("hamburgercount",hamburgercount);
        editor.putInt("frenchfriewscount",frenchfriewscount);
        editor.putInt("chickenlegcount",chickenlegcount);
        editor.putInt("fishcount",fishcount);
        editor.putInt("applecount",applecount);
        editor.putInt("bostronrollcount",bostronrollcount);
        editor.putInt("carrotcount",carrotcount);
        editor.putInt("frenchtoastcount",frenchtoastcount);
        editor.putInt("meatarmcount",meatarmcount);
        editor.putInt("mediasaladcount",mediasaladcount);
        editor.putInt("noodlecount",noodlecount);
        editor.putInt("mixedsaladcount",mixedsaladcount);
        editor.putInt("onionringscount",onionringscount);
        editor.putInt("orangecount",orangecount);
        editor.putInt("porkcount",porkcount);
        editor.putInt("mixedrollcount",mixedrollcount);
        editor.putInt("salmonsushicount",salmonsushicount);
        editor.putInt("soupcount",soupcount);
        editor.putInt("squidcount",squidcount);
        editor.putInt("cokecount",cokecount);
        editor.putInt("browniecount",browniecount);
        editor.putInt("cheesecount",cheesecount);
        editor.putInt("cheesecakecount",cheesecakecount);
        editor.putInt("juicecount",juicecount);
        editor.putInt("greensoapcount",greensoapcount);
        editor.putInt("soap1count",soap1count);
        editor.putInt("soap2count",soap2count);
        editor.putInt("cellspongecount",cellspongecount);
        editor.putInt("darkspongecount",darkspongecount);
        editor.putInt("seaspongecount",seaspongecount);
        editor.putInt("watermeloncount",watermeloncount);
        editor.putInt("tomatocount",tomatocount);
        editor.putInt("pumpkincount",pumpkincount);
        editor.putInt("peescount",peescount);
        editor.putInt("kiwicount",kiwicount);
        editor.putInt("hotdogcount",hotdogcount);
        editor.putInt("corncount",corncount);
        editor.putInt("chiliscount",chiliscount);
        editor.putInt("broccolicount",broccolicount);
        editor.putInt("bananacount",bananacount);
        editor.putInt("siskebapcount",siskebapcount);
        editor.putInt("regional1count",regional1count);
        editor.putInt("regional2count",regional2count);
        editor.putInt("regional3count",regional3count);
        editor.putInt("regional4count",regional4count);
        editor.putInt("regional5count",regional5count);
        editor.putInt("regional6count",regional6count);
        editor.putInt("drinks1count",drinks1count);
        editor.putInt("drinks2count",drinks2count);
        editor.putInt("drinks3count",drinks3count);
        editor.putInt("drinks4count",drinks4count);
        editor.putInt("drinks5count",drinks5count);
        editor.putInt("drinks6count",drinks6count);
        editor.putInt("desert1count",desert1count);
        editor.putInt("desert2count", desert2count);
        editor.putInt("desert3count", desert3count);
        editor.putInt("desert4count",desert4count);
        editor.putInt("desert5count",desert5count);
        editor.putInt("desert6count", desert6count);


        editor.putInt("sleeppotioncount",sleeppotioncount);
        editor.putInt("hungerpotioncount",hungerpotioncount);
        editor.putInt("hygienepotioncount",hygienepotioncount);
        editor.putInt("lovepotioncount",lovepotioncount);
        editor.putInt("gamepotioncount",gamepotioncount);
        editor.putInt("allinpotioncount",allinpotioncount);
/*
        likeView = (LikeView) findViewById(R.id.likeview);
        likeView.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {


                final TextView tcoin = (TextView) findViewById(R.id.textcoin);
                coin[0]=coin[0]+100;
                tcoin.setText(Integer.toString(coin[0]));
                likeView.setVisibility(View.INVISIBLE);
                rel = (Button) findViewById(R.id.login);
                rel.setVisibility(View.INVISIBLE);
                facebookliked=true;
            }
        });

if (facebookliked==true) {

    likeView.setVisibility(View.INVISIBLE);
    rel = (Button) findViewById(R.id.login);
    rel.setVisibility(View.INVISIBLE);
}
*/

        //int gamestarcounter1=gamestarcounter[0];
        //editor.putInt("gamestarcounter",gamestarcounter1);
        //editor.putInt("gamestar",gamestar);

        editor.putInt("pupilleftxstore",pupilleftxstore);
        editor.putInt("pupilleftystore",pupilleftystore);
        editor.putInt("pupilleftx1store",pupilleftx1store);
        editor.putInt("pupillefty1store",pupillefty1store);

        editor.putInt("pupilrightxstore",pupilrightxstore);
        editor.putInt("pupilrightystore",pupilrightystore);
        editor.putInt("pupilrightx1store",pupilrightx1store);
        editor.putInt("pupilrighty1store",pupilrighty1store);

        editor.putInt("lefteyexstore",lefteyexstore);
        editor.putInt("lefteyeystore",lefteyeystore);
        editor.putInt("lefteyex1store", lefteyex1store);
        editor.putInt("lefteyey1store", lefteyey1store);

        editor.putInt("righteyexstore",righteyexstore);
        editor.putInt("righteyeystore",righteyeystore);
        editor.putInt("righteyex1store", righteyex1store);
        editor.putInt("righteyey1store", righteyey1store);


        editor.putInt("mouthx", mouthxstore);
        editor.putInt("mouthy", mouthystore);
        editor.putInt("mouthx1", mouthx1store);
        editor.putInt("mouthy1", mouthy1store);



        editor.putInt("chinx", chinxstore);
        editor.putInt("chinx1", chinx1store);
        editor.putInt("chiny", chinystore);
        editor.putInt("chiny1", chiny1store);

        if(quit==false)
        editor.putInt("newgame", 1);
       // editor.putFloat("width1", width1);
        //editor.putFloat("height1", height1);
        boolean sl = sleepbuttonpressed[0];

        editor.putBoolean("sleep", sl);


        long time= System.currentTimeMillis();
        time = time/1000; // in minutes
        editor.putLong("time", time);
        editor.putLong("time2", time);
        editor.putLong("lastplaytime",time);
//finally, when you are done saving the values, call the commit() method.
        editor.commit();
        Thread.currentThread().interrupt();

    }


    void increment (CircularProgressBar x, int current1,int last,int cirnum )

    {

        final CircularProgressBar y = x;
        final int cir = cirnum;

        // final CircularProgressBar c1 = (CircularProgressBar) findViewById(R.id.circularprogressbar1);
        y.SetSpeed(1000);
        y.animateProgressTo(current1, last, new CircularProgressBar.ProgressAnimationListener() {
            @Override
            public void onAnimationStart() {

            }

            @Override
            public void onAnimationFinish() {

            }

            @Override
            public void onAnimationProgress(int progress) {

                FrameLayout red1 = (FrameLayout) findViewById(R.id.redface1);
                FrameLayout red2 = (FrameLayout) findViewById(R.id.redface2);
                FrameLayout red3 = (FrameLayout) findViewById(R.id.redface3);
                FrameLayout red4 = (FrameLayout) findViewById(R.id.redface4);
                FrameLayout red5 = (FrameLayout) findViewById(R.id.redface5);
                FrameLayout red6 = (FrameLayout) findViewById(R.id.redface6);
                if (process[1] < MAXDIRT) dirt();
                else {
                    red1.setVisibility(View.INVISIBLE);
                    red2.setVisibility(View.INVISIBLE);
                    red3.setVisibility(View.INVISIBLE);
                    red4.setVisibility(View.INVISIBLE);
                    red5.setVisibility(View.INVISIBLE);
                    red6.setVisibility(View.INVISIBLE);
                }
                fly();
                if (progress >= 100) {
                    process[1] = 100;
                    y.setTitle(100 + "%");
                } else if (progress <= 0) {
                    process[1] = 0;
                    y.setTitle(0 + "%");
                } else {
                    process[1] = progress;
                    y.setTitle(progress + "%");


                }
            }
        });

//hygine
    }

    void bubbleincrement (CircularProgressBar x, int current1,int last,int cirnum )

    {

        final CircularProgressBar y = x;
        final int cir = cirnum;

        // final CircularProgressBar c1 = (CircularProgressBar) findViewById(R.id.circularprogressbar1);
        y.SetSpeed(300);
        y.animateProgressTo(current1, last, new CircularProgressBar.ProgressAnimationListener() {
            @Override
            public void onAnimationStart() {

            }

            @Override
            public void onAnimationFinish() {

            }

            @Override
            public void onAnimationProgress(int progress) {
                FrameLayout red1 = (FrameLayout) findViewById(R.id.redface1);
                FrameLayout red2 = (FrameLayout) findViewById(R.id.redface2);
                FrameLayout red3 = (FrameLayout) findViewById(R.id.redface3);
                FrameLayout red4 = (FrameLayout) findViewById(R.id.redface4);
                FrameLayout red5 = (FrameLayout) findViewById(R.id.redface5);
                FrameLayout red6 = (FrameLayout) findViewById(R.id.redface6);
                if( process[1]<MAXDIRT) dirt();
                else
                {
                    red1.setVisibility(View.INVISIBLE);
                    red2.setVisibility(View.INVISIBLE);
                    red1.setVisibility(View.INVISIBLE);
                    red2.setVisibility(View.INVISIBLE);
                    red3.setVisibility(View.INVISIBLE);
                    red4.setVisibility(View.INVISIBLE);
                    red5.setVisibility(View.INVISIBLE);
                    red6.setVisibility(View.INVISIBLE);
                }
               fly();

                if (progress>=100)
                {process[1]=100;
                    y.setTitle(100 + "%");}
                else if (progress<=0)
                {process[1]=0;
                    y.setTitle(0 + "%");}
                else
                {process[1] = progress;
                    y.setTitle(progress + "%");




                }
            }
        });

//hygine
    }


    void potionincrementwc (CircularProgressBar x, int current1,int last, final int cirnum )

    {
        process[2]=100;
        final CircularProgressBar y = x;
        final int cir = cirnum;

        // final CircularProgressBar c1 = (CircularProgressBar) findViewById(R.id.circularprogressbar1);
        y.SetSpeed(300);
        y.animateProgressTo(current1, last, new CircularProgressBar.ProgressAnimationListener() {
            @Override
            public void onAnimationStart() {

            }

            @Override
            public void onAnimationFinish() {
                y.setTitle(100 + "%");
                checkoverall();
            }

            @Override
            public void onAnimationProgress(int progress) {


                if (progress >= 100) {
                    y.setTitle(100 + "%");
                } else if (progress <= 0) {
                    y.setTitle(0 + "%");
                } else {
                    y.setTitle(progress + "%");


                }
            }
        });

//hygine
    }





    void potionincrementsleep (CircularProgressBar x, int current1,int last, final int cirnum )

    {
        process[3]=100;
        final CircularProgressBar y = x;
        final int cir = cirnum;

        // final CircularProgressBar c1 = (CircularProgressBar) findViewById(R.id.circularprogressbar1);
        y.SetSpeed(300);
        y.animateProgressTo(current1, last, new CircularProgressBar.ProgressAnimationListener() {
            @Override
            public void onAnimationStart() {

            }

            @Override
            public void onAnimationFinish() {
                y.setTitle(100 + "%");
                checkoverall();
            }

            @Override
            public void onAnimationProgress(int progress) {


                if (progress >= 100) {
                    y.setTitle(100 + "%");
                } else if (progress <= 0) {
                    y.setTitle(0 + "%");
                } else {
                    y.setTitle(progress + "%");


                }
            }
        });

//hygine
    }
    void potionincrementhunger (CircularProgressBar x, int current1,int last, final int cirnum )

    {
        process[0]=100;
        final CircularProgressBar y = x;
        final int cir = cirnum;

        // final CircularProgressBar c1 = (CircularProgressBar) findViewById(R.id.circularprogressbar1);
        y.SetSpeed(300);
        y.animateProgressTo(current1, last, new CircularProgressBar.ProgressAnimationListener() {
            @Override
            public void onAnimationStart() {

            }

            @Override
            public void onAnimationFinish() {
                y.setTitle(100 + "%");
                checkoverall();
            }

            @Override
            public void onAnimationProgress(int progress) {
                FrameLayout red1 = (FrameLayout) findViewById(R.id.redface1);
                FrameLayout red2 = (FrameLayout) findViewById(R.id.redface2);
                FrameLayout red3 = (FrameLayout) findViewById(R.id.redface3);
                FrameLayout red4 = (FrameLayout) findViewById(R.id.redface4);
                FrameLayout red5 = (FrameLayout) findViewById(R.id.redface5);
                FrameLayout red6 = (FrameLayout) findViewById(R.id.redface6);
                if( process[1]<MAXDIRT) dirt();
                else
                {
                    red1.setVisibility(View.INVISIBLE);
                    red2.setVisibility(View.INVISIBLE);
                    red1.setVisibility(View.INVISIBLE);
                    red2.setVisibility(View.INVISIBLE);
                    red3.setVisibility(View.INVISIBLE);
                    red4.setVisibility(View.INVISIBLE);
                    red5.setVisibility(View.INVISIBLE);
                    red6.setVisibility(View.INVISIBLE);
                }

                fly();

                if (progress >= 100) {
                    y.setTitle(100 + "%");
                } else if (progress <= 0) {
                    y.setTitle(0 + "%");
                } else {
                    y.setTitle(progress + "%");


                }
            }
        });

//hygine
    }

    void potionincrementhygiene (CircularProgressBar x, int current1,int last, final int cirnum )

    {
        process[1]=100;
        final CircularProgressBar y = x;
        final int cir = cirnum;

        // final CircularProgressBar c1 = (CircularProgressBar) findViewById(R.id.circularprogressbar1);
        y.SetSpeed(300);
        y.animateProgressTo(current1, last, new CircularProgressBar.ProgressAnimationListener() {
            @Override
            public void onAnimationStart() {

            }

            @Override
            public void onAnimationFinish() {
                y.setTitle(100 + "%");
                checkoverall();
            }

            @Override
            public void onAnimationProgress(int progress) {
                FrameLayout red1 = (FrameLayout) findViewById(R.id.redface1);
                FrameLayout red2 = (FrameLayout) findViewById(R.id.redface2);
                FrameLayout red3 = (FrameLayout) findViewById(R.id.redface3);
                FrameLayout red4 = (FrameLayout) findViewById(R.id.redface4);
                FrameLayout red5 = (FrameLayout) findViewById(R.id.redface5);
                FrameLayout red6 = (FrameLayout) findViewById(R.id.redface6);
                if( process[1]<MAXDIRT) dirt();
                else
                {
                    red1.setVisibility(View.INVISIBLE);
                    red2.setVisibility(View.INVISIBLE);
                    red1.setVisibility(View.INVISIBLE);
                    red2.setVisibility(View.INVISIBLE);
                    red3.setVisibility(View.INVISIBLE);
                    red4.setVisibility(View.INVISIBLE);
                    red5.setVisibility(View.INVISIBLE);
                    red6.setVisibility(View.INVISIBLE);
                }
                fly();
                if (progress >= 100) {
                    process[1] = 100;
                    y.setTitle(100 + "%");
                } else if (progress <= 0) {
                    process[1] = 0;
                    y.setTitle(0 + "%");
                } else {
                    process[1] = progress;
                    y.setTitle(progress + "%");

                }
            }
        });

//hygine
    }

    void potionincrementlove (CircularProgressBar x, int current1,int last, final int cirnum )

    {
        process[5]=100;
        final CircularProgressBar y = x;
        final int cir = cirnum;

        // final CircularProgressBar c1 = (CircularProgressBar) findViewById(R.id.circularprogressbar1);
        y.SetSpeed(300);
        y.animateProgressTo(current1, last, new CircularProgressBar.ProgressAnimationListener() {
            @Override
            public void onAnimationStart() {

            }

            @Override
            public void onAnimationFinish() {
                y.setTitle(100 + "%");
                checkoverall();
            }

            @Override
            public void onAnimationProgress(int progress) {


                if (progress>=100)
                {
                    y.setTitle(100 + "%");}
                else if (progress<=0)
                {
                    y.setTitle(0 + "%");}
                else
                {
                    y.setTitle(progress + "%");




                }
            }
        });

//hygine
    }







    void increment2 (CircularProgressBar x, int current1,int last,int cirnum )

    {



        final CircularProgressBar y = x;
        final int cir = cirnum;

        // final CircularProgressBar c1 = (CircularProgressBar) findViewById(R.id.circularprogressbar1);
        y.SetSpeed(2000);
        y.animateProgressTo(current1, last, new CircularProgressBar.ProgressAnimationListener() {
            @Override
            public void onAnimationStart() {

            }

            @Override
            public void onAnimationFinish() {

            }

            @Override
            public void onAnimationProgress(int progress) {
                if (progress>=100)
                {process[2]=100;
                    y.setTitle(100 + "%");}
                else if (progress<=0)
                {process[2]=0;
                    y.setTitle(0 + "%");}
                else
                {process[2] = progress;
                    y.setTitle(progress + "%");}
            }
        });
//bladder
    }

    void increment3 (CircularProgressBar x, int current1,int last,int cirnum )

    {

        final CircularProgressBar y = x;
        final int cir = cirnum;

        // final CircularProgressBar c1 = (CircularProgressBar) findViewById(R.id.circularprogressbar1);
        y.SetSpeed(2000);
        y.animateProgressTo(current1, last, new CircularProgressBar.ProgressAnimationListener() {
            @Override
            public void onAnimationStart() {

                button_sbm3 = (ImageButton) findViewById(R.id.button3);
                button_sbm3.setEnabled(false);


            }

            @Override
            public void onAnimationFinish() {
                button_sbm3.setEnabled(true);
            }

            @Override
            public void onAnimationProgress(int progress) {
                if (progress>=100)
                {process[3]=100;
                    y.setTitle(100 + "%");}
                else if (progress<=0)
                {process[3]=0;
                    y.setTitle(0 + "%");}
                else
                {process[3] = progress;
                    y.setTitle(progress + "%");}
            }
        });
//sleep

    }

    void increment4(CircularProgressBar x, int current1,int last,int cirnum )

    {
//love
if(current1>100) eyescircleanimation();
        final CircularProgressBar y = x;
        final int cir = cirnum;

        // final CircularProgressBar c1 = (CircularProgressBar) findViewById(R.id.circularprogressbar1);
        y.SetSpeed(2000);
        y.animateProgressTo(current1, last, new CircularProgressBar.ProgressAnimationListener() {
            @Override
            public void onAnimationStart() {

            }

            @Override
            public void onAnimationFinish() {

            }

            @Override
            public void onAnimationProgress(int progress) {
                if (progress>=100)
                {process[5]=100;
                    if (process[5]< 50) tearsanimation();
                    else stoptearsanimation();
                    y.setTitle(100 + "%");}
                else if (progress<=0)
                {process[5]=0;
                    if (process[5]< 50) tearsanimation();
                    else stoptearsanimation();
                    y.setTitle(0 + "%");}
                else
                {process[5] = progress;
                    if (process[5]< 50) tearsanimation();
                    else stoptearsanimation();
                    y.setTitle(progress + "%");}
            }
        });


    }

    void incrementeat(CircularProgressBar x, int current1,int last,int cirnum )

    {

        final CircularProgressBar y = x;
        final int cir = cirnum;

        // final CircularProgressBar c1 = (CircularProgressBar) findViewById(R.id.circularprogressbar1);
        y.SetSpeed(1500);


        y.animateProgressTo(current1, last, new CircularProgressBar.ProgressAnimationListener() {
            @Override
            public void onAnimationStart() {

            }

            @Override
            public void onAnimationFinish() {

            }

            @Override
            public void onAnimationProgress(int progress) {



                if (progress>=100)
                {process[0]=100;
                y.setTitle(100 + "%");}
                else if (progress<=0)
                {process[0]=0;
                    y.setTitle(0 + "%");}
                else
                {process[0] = progress;

                y.setTitle(progress + "%");}

            }
        });


    }


    boolean checkccount(int x,int y)

    {
        if (x % y == 0 ) return true;
        else return false;


    }

    void speedincrement(CircularProgressBar x, int current1,int last,int cirnum )

    {

        final CircularProgressBar y = x;
        final int cir = cirnum;

        // final CircularProgressBar c1 = (CircularProgressBar) findViewById(R.id.circularprogressbar1);
        y.SetSpeed(10);

        y.animateProgressTo(current1, last, new CircularProgressBar.ProgressAnimationListener() {
            @Override
            public void onAnimationStart() {

            }

            @Override
            public void onAnimationFinish() {

            }

            @Override
            public void onAnimationProgress(int progress) {

                if (progress>=100)
                {process[0]=100;
                    y.setTitle(100 + "%");}
                else if (progress<=0)
                {process[0]=0;
                    y.setTitle(0 + "%");}
                else
                {process[0] = progress;
                    y.setTitle(progress + "%");}
            }
        });


    }



    void eatincrement(CircularProgressBar x, int current1,int last,int cirnum )

    {

        final CircularProgressBar y = x;
        final int cir = cirnum;

        // final CircularProgressBar c1 = (CircularProgressBar) findViewById(R.id.circularprogressbar1);
        y.SetSpeed(200);

        y.animateProgressTo(current1, last, new CircularProgressBar.ProgressAnimationListener() {
            @Override
            public void onAnimationStart() {

            }

            @Override
            public void onAnimationFinish() {

            }

            @Override
            public void onAnimationProgress(int progress) {

                if (progress>=100)
                {process[0]=100;
                    y.setTitle(100 + "%");
                } else if (progress<=0)
                {process[0]=0;
                    y.setTitle(0 + "%");}
                else
                {process[0] = progress;

                    y.setTitle(progress + "%");
                }
            }
        });


    }





    void speedincrement2(CircularProgressBar x, int current1,int last,int cirnum )

    {

        final CircularProgressBar y = x;
        final int cir = cirnum;

        // final CircularProgressBar c1 = (CircularProgressBar) findViewById(R.id.circularprogressbar1);
        y.SetSpeed(10);
        y.animateProgressTo(current1, last, new CircularProgressBar.ProgressAnimationListener() {
            @Override
            public void onAnimationStart() {

            }

            @Override
            public void onAnimationFinish() {

            }

            @Override
            public void onAnimationProgress(int progress) {
                FrameLayout red1 = (FrameLayout) findViewById(R.id.redface1);
                FrameLayout red2 = (FrameLayout) findViewById(R.id.redface2);
                FrameLayout red3 = (FrameLayout) findViewById(R.id.redface3);
                FrameLayout red4 = (FrameLayout) findViewById(R.id.redface4);
                FrameLayout red5 = (FrameLayout) findViewById(R.id.redface5);
                FrameLayout red6 = (FrameLayout) findViewById(R.id.redface6);
                if( process[1]<MAXDIRT) dirt();
                else
                {
                    red1.setVisibility(View.INVISIBLE);
                    red2.setVisibility(View.INVISIBLE);
                    red1.setVisibility(View.INVISIBLE);
                    red2.setVisibility(View.INVISIBLE);
                    red3.setVisibility(View.INVISIBLE);
                    red4.setVisibility(View.INVISIBLE);
                    red5.setVisibility(View.INVISIBLE);
                    red6.setVisibility(View.INVISIBLE);
                }

                fly();

                if (progress>=100)
                {process[1]=100;
                    y.setTitle(100 + "%");}
                else if (progress<=0)
                {process[1]=0;
                    y.setTitle(0 + "%");}
                else
                {process[1] = progress;
                    y.setTitle(progress + "%");}
            }
        });


    }

    void speedincrement3(CircularProgressBar x, int current1,int last,int cirnum )

    {

        final CircularProgressBar y = x;
        final int cir = cirnum;

        // final CircularProgressBar c1 = (CircularProgressBar) findViewById(R.id.circularprogressbar1);
        y.SetSpeed(10);
        y.animateProgressTo(current1, last, new CircularProgressBar.ProgressAnimationListener() {
            @Override
            public void onAnimationStart() {

            }

            @Override
            public void onAnimationFinish() {

            }

            @Override
            public void onAnimationProgress(int progress) {

                if (progress>=100)
                {process[2]=100;
                    y.setTitle(100 + "%");}
                else if (progress<=0)
                {process[2]=0;
                    y.setTitle(0 + "%");}
                else
                {process[2] = progress;
                    y.setTitle(progress + "%");}
            }
        });


    }


    void speedincrement4(CircularProgressBar x, int current1,int last,int cirnum )

    {

        final CircularProgressBar y = x;
        final int cir = cirnum;

        // final CircularProgressBar c1 = (CircularProgressBar) findViewById(R.id.circularprogressbar1);
        y.SetSpeed(10);
        y.animateProgressTo(current1, last, new CircularProgressBar.ProgressAnimationListener() {
            @Override
            public void onAnimationStart() {

            }

            @Override
            public void onAnimationFinish() {

            }

            @Override
            public void onAnimationProgress(int progress) {

                if (progress>=100)
                {process[3]=100;
                    y.setTitle(100 + "%");}
                else if (progress<=0)
                {process[3]=0;
                    y.setTitle(0 + "%");}
                else
                {process[3] = progress;
                    y.setTitle(progress + "%");}
            }
        });


    }



    void speedincrement5(CircularProgressBar x, int current1,int last,int cirnum )

    {

        final CircularProgressBar y = x;
        final int cir = cirnum;

        // final CircularProgressBar c1 = (CircularProgressBar) findViewById(R.id.circularprogressbar1);
        y.SetSpeed(10);
        y.animateProgressTo(current1, last, new CircularProgressBar.ProgressAnimationListener() {
            @Override
            public void onAnimationStart() {

            }

            @Override
            public void onAnimationFinish() {

            }

            @Override
            public void onAnimationProgress(int progress) {

                if (progress>=100)
                {process[5]=100;

                    if (process[5]< 50) tearsanimation();
                    else stoptearsanimation();

                    y.setTitle(100 + "%");}
                else if (progress<=0)
                {process[5]=0;

                    if (process[5]< 50) tearsanimation();
        else stoptearsanimation();

                    y.setTitle(0 + "%");}
                else
                {process[5] = progress;
                    if (process[5]< 50) tearsanimation();
                    else stoptearsanimation();
                    y.setTitle(progress + "%");}
            }
        });


    }



    void loveincrement5(CircularProgressBar x, int current1,int last,int cirnum )

    {
        if(current1>=100) eyescircleanimation();
        final CircularProgressBar y = x;
        final int cir = cirnum;

        // final CircularProgressBar c1 = (CircularProgressBar) findViewById(R.id.circularprogressbar1);
        y.SetSpeed(300);
        y.animateProgressTo(current1, last, new CircularProgressBar.ProgressAnimationListener() {
            @Override
            public void onAnimationStart() {

            }

            @Override
            public void onAnimationFinish() {

            }

            @Override
            public void onAnimationProgress(int progress) {

                if (progress>=100)
                {process[5]=100;

                    if (process[5]< 50) tearsanimation();
                    else stoptearsanimation();

                    y.setTitle(100 + "%");}
                else if (progress<=0)
                {process[5]=0;

                    if (process[5]< 50) tearsanimation();
                    else stoptearsanimation();

                    y.setTitle(0 + "%");}
                else
                {process[5] = progress;
                    if (process[5]< 50) tearsanimation();
                    else stoptearsanimation();
                    y.setTitle(progress + "%");}
            }
        });


    }


    void checkoverall()

{
    ProgressBar mProgress = (ProgressBar) findViewById(R.id.progressBar);
    double y = process[0] * (0.30) + process[1] * (0.15) + process[3] * (0.2) + process[2] * (0.15)  + process[5] * (0.2);
    int x = (int) y;
    mProgress.setScaleY(3);

    if(x>=85 && x <= 101)
    mProgress.getProgressDrawable().setColorFilter(
            Color.argb(255, 14, 138, 92), android.graphics.PorterDuff.Mode.SRC_IN);

    else  if(x>=70 && x <= 84)
        mProgress.getProgressDrawable().setColorFilter(
                Color.argb(255, 55, 181, 74), android.graphics.PorterDuff.Mode.SRC_IN);
    else  if(x>=60 && x <= 69)
        mProgress.getProgressDrawable().setColorFilter(
                Color.argb(255, 192, 215, 47), android.graphics.PorterDuff.Mode.SRC_IN);
    else  if(x>=45 && x <= 59)
        mProgress.getProgressDrawable().setColorFilter(
                Color.argb(255, 246, 193, 0), android.graphics.PorterDuff.Mode.SRC_IN);

    else  if(x>=30 && x <= 44)
        mProgress.getProgressDrawable().setColorFilter(
                Color.argb(255, 244, 133, 0), android.graphics.PorterDuff.Mode.SRC_IN);
    else  if(x>=15 && x <= 29)
        mProgress.getProgressDrawable().setColorFilter(
                Color.argb(255, 243, 89, 0), android.graphics.PorterDuff.Mode.SRC_IN);

    else mProgress.getProgressDrawable().setColorFilter(
                Color.argb(255, 243, 33, 0), android.graphics.PorterDuff.Mode.SRC_IN);

    mProgressStatus[0] = x;
    SharedPreferences pref;
    pref = getSharedPreferences("info", MODE_PRIVATE);
    final SharedPreferences.Editor editor = pref.edit();
    editor.putInt("mProgressStatus2",x);
    editor.commit();

            //TextView name1 = (TextView) findViewById(R.id.name);
            mProgress.setProgress(x);
    //name1.setText(Long.toString(x));
  /*  if ((x== 20  || x== 25) && notification==true  )


    {

        if (vibration==true & mutestate[0] ==false) showNotificationenergywarning();
        else if (vibration==false & mutestate[0] ==false) showNotificationenergywarningnnovibs();
        else if (vibration==false & mutestate[0] ==true) showNotificationenergywarningnosoundnovibs();
        else if (vibration==true & mutestate[0] ==true) showNotificationenergywarningnosound();

    }*/
    Random r1 = new Random();
    Random r2 = new Random();
    Random r3 = new Random();
    Random r4 = new Random();

    int min1 = 1;
    int max1 = 99;
    int rand1 = r1.nextInt((max1 - min1) + 1) + min1;
    int rand2 = r1.nextInt((max1 - min1) + 1) + min1;
    int rand3 = r3.nextInt((max1 - min1) + 1) + min1;
    int rand4 = r3.nextInt((max1 - min1) + 1) + min1;


    //if(x== rand1 || x==rand2|| x== rand3 || x==rand4) eyelids();
    if (process[5]< 50) tearsanimation();
    else stoptearsanimation();

}



    public Bitmap screenShot(View view){
        Bitmap bitmap = Bitmap.createBitmap(view.getWidth(),
                view.getHeight(), Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(bitmap);
        view.draw(canvas);
        return bitmap;
    }


    void startalarm()

    {

        Calendar cal = Calendar.getInstance();
        /*Intent intent = new Intent(this, MyService.class);
        PendingIntent pintent = PendingIntent
                .getBroadcast(this, 10, intent, 0);*/

        AlarmManager alarm = (AlarmManager) getSystemService(Context.ALARM_SERVICE);
        // Start service every 20 seconds

        alarm.setRepeating(AlarmManager.RTC_WAKEUP, cal.getTimeInMillis(),
                10 * 1000, pintent);



    }

    void cancelalarm()

    {


        //Intent intent = new Intent(this, MyService.class);
        //PendingIntent pintent = PendingIntent
        //      .getBroadcast(this, 10, intent, 0);

        AlarmManager alarm = (AlarmManager) getSystemService(Context.ALARM_SERVICE);
        // Start service every 20 seconds

        alarm.cancel(pintent);



    }

    private void SaveImage(Bitmap finalBitmap) {


        final Bitmap x = finalBitmap;
       // String root = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DCIM).toString() + "/Camera/");
        //String root = Environment.getExternalStorageDirectory().toString();
        String root = Environment.getExternalStorageDirectory().toString();
        File wallpaperDirectory = new File(root + "/Vivo/");
        // have the object build the directory structure, if needed.
        wallpaperDirectory.mkdirs();

        File myDir = new File(root +"/Vivo/");
       // File myDir = new File(Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DCIM).toString() + "/Vivo/");


        //myDir.mkdirs();
        //Random generator = new Random();
        //int n = 10000;
        //n = generator.nextInt(n);


        SimpleDateFormat s = new SimpleDateFormat("ddMMyyyyhhmmss");
        String timeStamp = s.format(new Date());
        String fname = "sharedimage-" + timeStamp + ".jpeg";

        location = root +"/Vivo/" + fname;

        File file = new File (myDir, fname);
        if (file.exists ()) file.delete ();
        try {
            FileOutputStream out = new FileOutputStream(file);
            x.compress(Bitmap.CompressFormat.JPEG, 90, out);
            out.flush();
            out.close();

        } catch (Exception e) {
            e.printStackTrace();
        }

        final Button muhurimg = (Button) findViewById(R.id.muhurimg);
        muhurimg.setVisibility(View.INVISIBLE);

        galleryAddPic();
    }


   void tearsanimation()

   {


       ImageView gifimageleft = (ImageView) findViewById(R.id.gifview);
       FrameLayout giflayout = (FrameLayout) findViewById(R.id.giflayout);
       float density1=Resources.getSystem().getDisplayMetrics().density;
       ImageView gifimageright = (ImageView) findViewById(R.id.gifview2);
       FrameLayout giflayout2 = (FrameLayout) findViewById(R.id.giflayout2);


       gifimageleft.setVisibility(View.VISIBLE);
       giflayout.setVisibility(View.VISIBLE);
       giflayout2.setVisibility(View.VISIBLE);


       ViewGroup.MarginLayoutParams gifmargin = new ViewGroup.MarginLayoutParams(giflayout.getLayoutParams());
       gifmargin.setMargins((int)(x3store-((int)(density1*17))),(int) (y2store-3*density1), 0, 0);
       FrameLayout.LayoutParams gifparams = new FrameLayout.LayoutParams(gifmargin);
       gifparams.height = ((int)(density1*160)) ;
       gifparams.width= ((int)(density1*30))-((int)(density1*1));
       giflayout.setLayoutParams(gifparams);
       //gifimageleft.speed=1;
       //gifimageleft.loadGIFResource(this, R.mipmap.indesit_krople_woda);
       //gifimageleft.loadGIFResource(this, R.mipmap.teargif);


       ViewGroup.MarginLayoutParams gifmargin2 = new ViewGroup.MarginLayoutParams(giflayout2.getLayoutParams());
       gifmargin2.setMargins((int) (x4store - ((int) (density1 * 17))), (int) (y3store - (3 * density1)), 0, 0);
       FrameLayout.LayoutParams gifparams2 = new FrameLayout.LayoutParams(gifmargin2);
       gifparams2.height = ((int)(density1*160)) ;
       gifparams2.width= ((int)(density1*30));
       giflayout2.setLayoutParams(gifparams2);
       //gifimageright.speed=1;
       //gifimageright.loadGIFResource(this,R.mipmap.tearyigit);
       //gifimageright.loadGIFResource(this, R.mipmap.teargif);

       gifimageleft.setBackgroundResource(R.drawable.tears);
       rocketAnimation = (AnimationDrawable) gifimageleft.getBackground();
       gifimageright.setBackgroundResource(R.drawable.tears);
       rocketAnimation2 = (AnimationDrawable) gifimageright.getBackground();
       rocketAnimation.start();
       rocketAnimation2.start();
   }



    void stoptearsanimation()
    {


        ImageView gifimageleft = (ImageView) findViewById(R.id.gifview);
        FrameLayout giflayout = (FrameLayout) findViewById(R.id.giflayout);

        ImageView gifimageright = (ImageView) findViewById(R.id.gifview2);
        FrameLayout giflayout2 = (FrameLayout) findViewById(R.id.giflayout2);

      //  gifimageleft.loadGIFResource(this, R.mipmap.vivo8);
       // gifimageright.loadGIFResource(this, R.mipmap.vivo8);
        gifimageleft.setVisibility(View.INVISIBLE);
        giflayout.setVisibility(View.INVISIBLE);
        giflayout2.setVisibility(View.INVISIBLE);


        rocketAnimation = (AnimationDrawable) gifimageleft.getBackground();
        rocketAnimation2 = (AnimationDrawable) gifimageright.getBackground();

        gifimageleft.setBackgroundResource(R.drawable.tears);

        gifimageright.setBackgroundResource(R.drawable.tears);


    }


    void sleepanimation(boolean status)

    {
       /* final float density1 = Resources.getSystem().getDisplayMetrics().density;

        GifView gifimageleft = (GifView) findViewById(R.id.gifviewsleep);
        FrameLayout giflayout = (FrameLayout) findViewById(R.id.giflayoutsleep);

        GifView gifimageleft2 = (GifView) findViewById(R.id.gifviewsleep2);
        FrameLayout giflayout2 = (FrameLayout) findViewById(R.id.giflayoutsleep2);



if (status ==true) {



    gifimageleft.setVisibility(View.VISIBLE);
    giflayout.setVisibility(View.VISIBLE);

    gifimageleft2.setVisibility(View.VISIBLE);
    giflayout2.setVisibility(View.VISIBLE);

    ViewGroup.MarginLayoutParams gifmargin = new ViewGroup.MarginLayoutParams(giflayout.getLayoutParams());
    gifmargin.setMargins(x3store,  y2store-((int)density1*150), 0, 0);
    FrameLayout.LayoutParams gifparams = new FrameLayout.LayoutParams(gifmargin);
    gifparams.height = ((int)density1*150);
    gifparams.width = ((int)density1*150);
    giflayout.setLayoutParams(gifparams);
    //gifimageleft.speed = 1;
    //gifimageleft.loadGIFResource(this, R.mipmap.indesit_krople_woda);
    gifimageleft.loadGIFResource(this, R.mipmap.zzzsleep5);


    ViewGroup.MarginLayoutParams gifmargin2 = new ViewGroup.MarginLayoutParams(giflayout2.getLayoutParams());
    gifmargin2.setMargins(x4store,  y3store-((int)density1*150), 0, 0);
    FrameLayout.LayoutParams gifparams2 = new FrameLayout.LayoutParams(gifmargin2);
    gifparams2.height = ((int)density1*150);
    gifparams2.width = ((int)density1*150);
    giflayout2.setLayoutParams(gifparams2);
    //gifimageleft.speed = 1;
    gifimageleft2.loadGIFResource(this, R.mipmap.zzzsleep5);


}

        else {


    gifimageleft.setVisibility(View.INVISIBLE);
    giflayout.setVisibility(View.INVISIBLE);
    gifimageleft2.setVisibility(View.INVISIBLE);
    giflayout2.setVisibility(View.INVISIBLE);


}*/


    }



    public void closeeyes(boolean status)

    {
        final FrameLayout righteyelid = (FrameLayout) findViewById(R.id.righteyelidtop);
        final FrameLayout righteyelidback = (FrameLayout) findViewById(R.id.righteyelidback);
        final FrameLayout righteyelidbtm = (FrameLayout) findViewById(R.id.righteyelidbottom);
        final ImageView righteyelidbackimg = (ImageView) findViewById(R.id.righteyelidbak);
        final FrameLayout freyes = (FrameLayout) findViewById(R.id.frameeyelidwhite);
        final FrameLayout feyes=(FrameLayout) findViewById(R.id.frameeyelid);
        final FrameLayout fbottom2=(FrameLayout) findViewById(R.id.frmeyelidbtm2);
        final ImageView movement2= (ImageView) findViewById(R.id.frameeyelidimg);
        final ImageView img2 = (ImageView) findViewById(R.id.frmeyelidbtmimg);
        final  ImageView righteyelidtopimage= (ImageView) findViewById(R.id.righteyelidtp);
        final ImageView righteyelidbottomimage = (ImageView) findViewById(R.id.righteyelidbtm);
        //img2.setImageBitmap(use1);
        //righteyelidbottomimage.setImageBitmap(use2);
        //movement2.setImageBitmap(use3);
        //righteyelidtopimage.setImageBitmap(use4);
        final FrameLayout sleeplayout = (FrameLayout) findViewById(R.id.sleeplayout);

        if(status==true)

        {


            //righteyelid.setVisibility(View.VISIBLE);
            //righteyelidbtm.setVisibility(View.VISIBLE);

            righteyelid.setVisibility(View.INVISIBLE);
            righteyelidbtm.setVisibility(View.INVISIBLE);

            feyes.setVisibility(View.INVISIBLE);
            fbottom2.setVisibility(View.INVISIBLE);
            righteyelidback.setVisibility(View.VISIBLE);
            freyes.setVisibility(View.VISIBLE);
            sleeplayout.setVisibility(View.VISIBLE);
            sleepanimation(true);

            //eyelids();
            //freyes.setVisibility(View.VISIBLE);
            //feyes.setVisibility(View.VISIBLE);
            //fbottom2.setVisibility(View.VISIBLE);


        }
        else
        {


            righteyelidback.setVisibility(View.INVISIBLE);
            freyes.setVisibility(View.INVISIBLE);
            sleeplayout.setVisibility(View.INVISIBLE);
            sleepanimation(false);
        }

    }

   void eyelids()
   {

       if (sleepbuttonpressed[0] == false) {

           final FrameLayout righteyelid = (FrameLayout) findViewById(R.id.righteyelidtop);
           final FrameLayout righteyelidback = (FrameLayout) findViewById(R.id.righteyelidback);
           final FrameLayout righteyelidbtm = (FrameLayout) findViewById(R.id.righteyelidbottom);
           final ImageView righteyelidbackimg = (ImageView) findViewById(R.id.righteyelidbak);
           final FrameLayout freyes = (FrameLayout) findViewById(R.id.frameeyelidwhite);
           final FrameLayout feyes = (FrameLayout) findViewById(R.id.frameeyelid);
           final FrameLayout fbottom2 = (FrameLayout) findViewById(R.id.frmeyelidbtm2);
           righteyelid.setVisibility(View.VISIBLE);
           righteyelidbtm.setVisibility(View.VISIBLE);
           righteyelidback.setVisibility(View.VISIBLE);
           freyes.setVisibility(View.VISIBLE);
           feyes.setVisibility(View.VISIBLE);
           fbottom2.setVisibility(View.VISIBLE);

           //fbottom.setVisibility(View.VISIBLE);

           Animation mAnimation2, mAnimation3, mAnimationright2, mAnimationright3;
           final ImageView movement2 = (ImageView) findViewById(R.id.frameeyelidimg);
           final ImageView img2 = (ImageView) findViewById(R.id.frmeyelidbtmimg);
           final ImageView righteyelidtopimage = (ImageView) findViewById(R.id.righteyelidtp);
           final ImageView righteyelidbottomimage = (ImageView) findViewById(R.id.righteyelidbtm);
           img2.setImageBitmap(getclip(use1));
           righteyelidbottomimage.setImageBitmap(getclip(use2));
           movement2.setImageBitmap(getclip(use3));
           righteyelidtopimage.setImageBitmap(getclip(use4));

           mAnimation2 = new TranslateAnimation(0, 0, 0, -(lefteyey1store - lefteyeystore) / 2);
           mAnimation2.setDuration(200);
           mAnimation2.setFillAfter(true);
           mAnimation2.setRepeatCount(10);
           mAnimation2.setRepeatMode(Animation.REVERSE);
           img2.setAnimation(mAnimation2);
           img2.setVisibility(View.VISIBLE);

           mAnimationright2 = new TranslateAnimation(0, 0, 0, -(righteyey1store - righteyeystore) / 2);
           mAnimationright2.setDuration(200);
           mAnimationright2.setFillAfter(true);
           mAnimationright2.setRepeatCount(10);
           mAnimationright2.setRepeatMode(Animation.REVERSE);
           righteyelidbottomimage.setAnimation(mAnimationright2);
           righteyelidbottomimage.setVisibility(View.VISIBLE);


           mAnimation3 = new TranslateAnimation(0, 0, 0, (lefteyey1store - lefteyeystore) / 2);
           mAnimation3.setDuration(200);
           mAnimation3.setFillAfter(true);
           mAnimation3.setRepeatCount(10);
           mAnimation3.setRepeatMode(Animation.REVERSE);
           movement2.setAnimation(mAnimation3);
           movement2.setVisibility(View.VISIBLE);


           mAnimationright3 = new TranslateAnimation(0, 0, 0, (righteyey1store - righteyeystore) / 2);


           mAnimationright3.setDuration(200);
           mAnimationright3.setFillAfter(true);
           mAnimationright3.setRepeatCount(10);
           mAnimationright3.setRepeatMode(Animation.REVERSE);
           righteyelidtopimage.setAnimation(mAnimationright3);
           righteyelidtopimage.setVisibility(View.VISIBLE);

           mAnimation3.setAnimationListener(new Animation.AnimationListener() {
               @Override
               public void onAnimationStart(Animation animation) {

               }

               @Override
               public void onAnimationEnd(Animation animation) {

                   righteyelid.setVisibility(View.INVISIBLE);
                   righteyelidbtm.setVisibility(View.INVISIBLE);
                   righteyelidback.setVisibility(View.INVISIBLE);
                   freyes.setVisibility(View.INVISIBLE);
                   feyes.setVisibility(View.INVISIBLE);
                   fbottom2.setVisibility(View.INVISIBLE);

               }

               @Override
               public void onAnimationRepeat(Animation animation) {

               }
           });

           new CountDownTimer(2000, 1000) {


               public void onTick(long milsec) {

               }

               public void onFinish() {

                   righteyelid.setVisibility(View.INVISIBLE);
                   righteyelidbtm.setVisibility(View.INVISIBLE);
                   righteyelidback.setVisibility(View.INVISIBLE);
                   freyes.setVisibility(View.INVISIBLE);
                   feyes.setVisibility(View.INVISIBLE);
                   fbottom2.setVisibility(View.INVISIBLE);


               }
           }.start();

       }
   }


    void addfood(int index){



        if(coinok==true) {

            marketarraystore[storearraycount] = index;
           // final TextView debug = (TextView) findViewById(R.id.textView133);
           // debug.setText(Integer.toString(marketarraystore[storearraycount]));
            storearraycount++;
            savearray(marketarraystore2);
            kitchenlinear = (LinearLayout) findViewById(R.id.kitchenlayoutlinear);
            hygienelinear = (LinearLayout) findViewById(R.id.hygienelayoutlinear);
            potionlinear = (LinearLayout) findViewById(R.id.potionlayoutlinear);

            final float density1 = Resources.getSystem().getDisplayMetrics().density;
            ViewGroup.MarginLayoutParams lovemargin21 = new ViewGroup.MarginLayoutParams(kitchenlinear.getLayoutParams());
            lovemargin21.setMargins((int)(density1*2), (int)(2*density1), 0, (int)(12*density1));
            LinearLayout.LayoutParams vp = new LinearLayout.LayoutParams(lovemargin21);
            vp.height = (int) (90 * density1);
            vp.width = (int) (60 * density1);

            ViewGroup.MarginLayoutParams hygienemargin = new ViewGroup.MarginLayoutParams(hygienelinear.getLayoutParams());
            hygienemargin.setMargins((int)(density1*2), (int)(density1*2), 0, (int)(density1*12));
            LinearLayout.LayoutParams vp1 = new LinearLayout.LayoutParams(hygienemargin);
            vp1.height = (int) (90 * density1);
            vp1.width = (int) (60 * density1);



            if (index == greensoapindex) {
                printfood(greensoapindex);
                greensoaplayout.setOrientation(LinearLayout.VERTICAL);
                greensoaplayout.setLayoutParams(vp1);
                Drawable img1 = getResources().getDrawable(R.mipmap.greensoap);
                greensoapimg.setImageDrawable(img1);
                greensoaplayout.addView(greensoapimg);
                //greensoaplayout.addView(greensoaptext);
                hygienelinear.addView(greensoaplayout,0);

            }


            if (index == soap1index) {
                printfood(soap1index);
                soap1layout.setOrientation(LinearLayout.VERTICAL);
                soap1layout.setLayoutParams(vp1);
                Drawable img1 = getResources().getDrawable(R.mipmap.lightgreensoap);
                soap1img.setImageDrawable(img1);
                soap1layout.addView(soap1img);
                //greensoaplayout.addView(greensoaptext);
                hygienelinear.addView(soap1layout,0);

            }

            if (index == soap2index) {
                printfood(soap2index);
                soap2layout.setOrientation(LinearLayout.VERTICAL);
                soap2layout.setLayoutParams(vp1);
                Drawable img1 = getResources().getDrawable(R.mipmap.bluesoap);
                soap2img.setImageDrawable(img1);
                soap2layout.addView(soap2img);
                //greensoaplayout.addView(greensoaptext);
                hygienelinear.addView(soap2layout,0);

            }


            if (index == sleeppotionindex) {
                printfood(sleeppotionindex);
                sleeppotionlayout.setOrientation(LinearLayout.VERTICAL);
                sleeppotionlayout.setLayoutParams(vp1);
                Drawable img1 = getResources().getDrawable(R.mipmap.sleeppotion2);
                sleeppotionimg.setImageDrawable(img1);
                sleeppotionlayout.addView(sleeppotionimg);
                //sleeppotionlayout.addView(sleeppotiontext);
                kitchenlinear.addView(sleeppotionlayout,0);

            }


            if (index == hungerpotionindex) {
                printfood(hungerpotionindex);
                hungerpotionlayout.setOrientation(LinearLayout.VERTICAL);
                hungerpotionlayout.setLayoutParams(vp1);
                Drawable img1 = getResources().getDrawable(R.mipmap.hungerpotion);
                hungerpotionimg.setImageDrawable(img1);
                hungerpotionlayout.addView(hungerpotionimg);
               // hungerpotionlayout.addView(hungerpotiontext);
                kitchenlinear.addView(hungerpotionlayout,0);

            }
            if (index == hygienepotionindex) {
                printfood(hygienepotionindex);
                hygienepotionlayout.setOrientation(LinearLayout.VERTICAL);
                hygienepotionlayout.setLayoutParams(vp1);
                Drawable img1 = getResources().getDrawable(R.mipmap.hygienepotion);
                hygienepotionimg.setImageDrawable(img1);
                hygienepotionlayout.addView(hygienepotionimg);
                //hygienepotionlayout.addView(hygienepotiontext);
                kitchenlinear.addView(hygienepotionlayout,0);

            }

            if (index == lovepotionindex) {
                printfood(lovepotionindex);
                lovepotionlayout.setOrientation(LinearLayout.VERTICAL);
                lovepotionlayout.setLayoutParams(vp1);
                Drawable img1 = getResources().getDrawable(R.mipmap.lovepotion);
                lovepotionimg.setImageDrawable(img1);
                lovepotionlayout.addView(lovepotionimg);
                //lovepotionlayout.addView(lovepotiontext);
                kitchenlinear.addView(lovepotionlayout,0);

            }

            if (index == gamepotionindex) {
                printfood(gamepotionindex);
                gamepotionlayout.setOrientation(LinearLayout.VERTICAL);
                gamepotionlayout.setLayoutParams(vp1);
                Drawable img1 = getResources().getDrawable(R.mipmap.bladderpotion);
                gamepotionimg.setImageDrawable(img1);
                gamepotionlayout.addView(gamepotionimg);
               // gamepotionlayout.addView(gamepotiontext);
                kitchenlinear.addView(gamepotionlayout,0);

            }



            if (index == allinpotionindex) {
                printfood(allinpotionindex);
                allinpotionlayout.setOrientation(LinearLayout.VERTICAL);
                allinpotionlayout.setLayoutParams(vp1);
                Drawable img1 = getResources().getDrawable(R.mipmap.allinpotion);
                allinpotionimg.setImageDrawable(img1);
                allinpotionlayout.addView(allinpotionimg);
                // gamepotionlayout.addView(gamepotiontext);
                kitchenlinear.addView(allinpotionlayout,0);

            }




            if (index == cellspongeindex) {
                printfood(cellspongeindex);
                cellspongelayout.setOrientation(LinearLayout.VERTICAL);
                cellspongelayout.setLayoutParams(vp1);
                Drawable img1 = getResources().getDrawable(R.mipmap.redsoap);
                cellspongeimg.setImageDrawable(img1);
                cellspongelayout.addView(cellspongeimg);
                //cellspongelayout.addView(cellspongetext);
                hygienelinear.addView(cellspongelayout,0);

            }



            if (index == darkspongeindex) {
                printfood(darkspongeindex);
                darkspongelayout.setOrientation(LinearLayout.VERTICAL);
                darkspongelayout.setLayoutParams(vp1);
                Drawable img1 = getResources().getDrawable(R.mipmap.yellowsoap);
                darkspongeimg.setImageDrawable(img1);
                darkspongelayout.addView(darkspongeimg);
                //darkspongelayout.addView(darkspongetext);
                hygienelinear.addView(darkspongelayout,0);

            }


            if (index == seaspongeindex) {
                printfood(seaspongeindex);
                seaspongelayout.setOrientation(LinearLayout.VERTICAL);
                seaspongelayout.setLayoutParams(vp1);
                Drawable img1 = getResources().getDrawable(R.mipmap.purplesoap);
                seaspongeimg.setImageDrawable(img1);
                seaspongelayout.addView(seaspongeimg);
                //seaspongelayout.addView(seaspongetext);
                hygienelinear.addView(seaspongelayout,0);

            }





            if (index == meatindex) {
                printfood(meatindex);
                linear1.setOrientation(LinearLayout.VERTICAL);
                linear1.setLayoutParams(vp);
                Drawable img1 = getResources().getDrawable(R.mipmap.tbone);
                meaticonimg.setImageDrawable(img1);
                linear1.addView(meaticonimg);
                //linear1.addView(textmeat);
                kitchenlinear.addView(linear1,0);

            }


            if (index == pizzaindex) {
                printfood(pizzaindex);
                pizzalayout.setOrientation(LinearLayout.VERTICAL);
                pizzalayout.setLayoutParams(vp);
                Drawable img1 = getResources().getDrawable(R.mipmap.pizza);
                pizzaimp.setImageDrawable(img1);
                //pizzalayout.addView(textpizza);

                pizzalayout.addView(pizzaimp);

                kitchenlinear.addView(pizzalayout,0);

            }

            if (index == hamburgerindex) {
                printfood(hamburgerindex);
                hamburgerlayout.setOrientation(LinearLayout.VERTICAL);
                hamburgerlayout.setLayoutParams(vp);
                Drawable img1 = getResources().getDrawable(R.mipmap.hamburgerpng);
                hamburgerimg.setImageDrawable(img1);
                hamburgerlayout.addView(hamburgerimg);
               // hamburgerlayout.addView(hamburgertext);
                kitchenlinear.addView(hamburgerlayout,0);

            }



            if (index == watermelonindex) {
                printfood(watermelonindex);
                watermelonlayout.setOrientation(LinearLayout.VERTICAL);
                watermelonlayout.setLayoutParams(vp);
                Drawable img1 = getResources().getDrawable(R.mipmap.watermelon);
                watermelonimg.setImageDrawable(img1);
                watermelonlayout.addView(watermelonimg);
                // watermelonlayout.addView(watermelontext);
                kitchenlinear.addView(watermelonlayout,0);

            }
            if (index == tomatoindex) {
                printfood(tomatoindex);
                tomatolayout.setOrientation(LinearLayout.VERTICAL);
                tomatolayout.setLayoutParams(vp);
                Drawable img1 = getResources().getDrawable(R.mipmap.tomato);
                tomatoimg.setImageDrawable(img1);
                tomatolayout.addView(tomatoimg);
                // tomatolayout.addView(tomatotext);
                kitchenlinear.addView(tomatolayout,0);

            }

            if (index == pumpkinindex) {
                printfood(pumpkinindex);
                pumpkinlayout.setOrientation(LinearLayout.VERTICAL);
                pumpkinlayout.setLayoutParams(vp);
                Drawable img1 = getResources().getDrawable(R.mipmap.pumpkin);
                pumpkinimg.setImageDrawable(img1);
                pumpkinlayout.addView(pumpkinimg);
                // pumpkinlayout.addView(pumpkintext);
                kitchenlinear.addView(pumpkinlayout,0);

            }

            if (index == peesindex) {
                printfood(peesindex);
                peeslayout.setOrientation(LinearLayout.VERTICAL);
                peeslayout.setLayoutParams(vp);
                Drawable img1 = getResources().getDrawable(R.mipmap.pees);
                peesimg.setImageDrawable(img1);
                peeslayout.addView(peesimg);
                // peeslayout.addView(peestext);
                kitchenlinear.addView(peeslayout,0);

            }

            if (index == kiwiindex) {
                printfood(kiwiindex);
                kiwilayout.setOrientation(LinearLayout.VERTICAL);
                kiwilayout.setLayoutParams(vp);
                Drawable img1 = getResources().getDrawable(R.mipmap.kiwi);
                kiwiimg.setImageDrawable(img1);
                kiwilayout.addView(kiwiimg);
                // kiwilayout.addView(kiwitext);
                kitchenlinear.addView(kiwilayout,0);

            }

            if (index == hotdogindex) {
                printfood(hotdogindex);
                hotdoglayout.setOrientation(LinearLayout.VERTICAL);
                hotdoglayout.setLayoutParams(vp);
                Drawable img1 = getResources().getDrawable(R.mipmap.hotdog);
                hotdogimg.setImageDrawable(img1);
                hotdoglayout.addView(hotdogimg);
                // hotdoglayout.addView(hotdogtext);
                kitchenlinear.addView(hotdoglayout,0);

            }

            if (index == cornindex) {
                printfood(cornindex);
                cornlayout.setOrientation(LinearLayout.VERTICAL);
                cornlayout.setLayoutParams(vp);
                Drawable img1 = getResources().getDrawable(R.mipmap.corn);
                cornimg.setImageDrawable(img1);
                cornlayout.addView(cornimg);
                // cornlayout.addView(corntext);
                kitchenlinear.addView(cornlayout,0);

            }


            if (index == chilisindex) {
                printfood(chilisindex);
                chilislayout.setOrientation(LinearLayout.VERTICAL);
                chilislayout.setLayoutParams(vp);
                Drawable img1 = getResources().getDrawable(R.mipmap.chilis);
                chilisimg.setImageDrawable(img1);
                chilislayout.addView(chilisimg);
                // chilislayout.addView(chilistext);
                kitchenlinear.addView(chilislayout,0);

            }

            if (index == broccoliindex) {
                printfood(broccoliindex);
                broccolilayout.setOrientation(LinearLayout.VERTICAL);
                broccolilayout.setLayoutParams(vp);
                Drawable img1 = getResources().getDrawable(R.mipmap.broccoli);
                broccoliimg.setImageDrawable(img1);
                broccolilayout.addView(broccoliimg);
                // broccolilayout.addView(broccolitext);
                kitchenlinear.addView(broccolilayout,0);

            }

            if (index == bananaindex) {
                printfood(bananaindex);
                bananalayout.setOrientation(LinearLayout.VERTICAL);
                bananalayout.setLayoutParams(vp);
                Drawable img1 = getResources().getDrawable(R.mipmap.banana);
                bananaimg.setImageDrawable(img1);
                bananalayout.addView(bananaimg);
                // bananalayout.addView(bananatext);
                kitchenlinear.addView(bananalayout,0);

            }
            if (index == siskebapindex) {
                printfood(siskebapindex);
                siskebaplayout.setOrientation(LinearLayout.VERTICAL);
                siskebaplayout.setLayoutParams(vp);
                Drawable img1 = getResources().getDrawable(R.mipmap.siskebap);
                siskebapimg.setImageDrawable(img1);
                siskebaplayout.addView(siskebapimg);
                // siskebaplayout.addView(siskebaptext);
                kitchenlinear.addView(siskebaplayout,0);

            }
            if (index == regional1index) {
                printfood(regional1index);
                regional1layout.setOrientation(LinearLayout.VERTICAL);
                regional1layout.setLayoutParams(vp);
                Drawable img1 = getResources().getDrawable(R.mipmap.regional22);
                regional1img.setImageDrawable(img1);
                regional1layout.addView(regional1img);
                // regional1layout.addView(regional1text);
                kitchenlinear.addView(regional1layout,0);

            }
            if (index == regional2index) {
                printfood(regional2index);
                regional2layout.setOrientation(LinearLayout.VERTICAL);
                regional2layout.setLayoutParams(vp);
                Drawable img1 = getResources().getDrawable(R.mipmap.kebab);
                regional2img.setImageDrawable(img1);
                regional2layout.addView(regional2img);
                // regional2layout.addView(regional2text);
                kitchenlinear.addView(regional2layout,0);

            }
            if (index == regional3index) {
                printfood(regional3index);
                regional3layout.setOrientation(LinearLayout.VERTICAL);
                regional3layout.setLayoutParams(vp);
                Drawable img1 = getResources().getDrawable(R.mipmap.paella);
                regional3img.setImageDrawable(img1);
                regional3layout.addView(regional3img);
                // regional3layout.addView(regional3text);
                kitchenlinear.addView(regional3layout,0);

            }

            if (index == regional4index) {
                printfood(regional4index);
                regional4layout.setOrientation(LinearLayout.VERTICAL);
                regional4layout.setLayoutParams(vp);
                Drawable img1 = getResources().getDrawable(R.mipmap.sushi);
                regional4img.setImageDrawable(img1);
                regional4layout.addView(regional4img);
                // regional4layout.addView(regional4text);
                kitchenlinear.addView(regional4layout,0);

            }

            if (index == regional5index) {
                printfood(regional5index);
                regional5layout.setOrientation(LinearLayout.VERTICAL);
                regional5layout.setLayoutParams(vp);
                Drawable img1 = getResources().getDrawable(R.mipmap.taco);
                regional5img.setImageDrawable(img1);
                regional5layout.addView(regional5img);
                // regional5layout.addView(regional5text);
                kitchenlinear.addView(regional5layout,0);

            }

            if (index == regional6index) {
                printfood(regional6index);
                regional6layout.setOrientation(LinearLayout.VERTICAL);
                regional6layout.setLayoutParams(vp);
                Drawable img1 = getResources().getDrawable(R.mipmap.ananas);
                regional6img.setImageDrawable(img1);
                regional6layout.addView(regional6img);
                // regional6layout.addView(regional6text);
                kitchenlinear.addView(regional6layout,0);

            }

            if (index == drinks1index) {
                printfood(drinks1index);
                drinks1layout.setOrientation(LinearLayout.VERTICAL);
                drinks1layout.setLayoutParams(vp);
                Drawable img1 = getResources().getDrawable(R.mipmap.water);
                drinks1img.setImageDrawable(img1);
                drinks1layout.addView(drinks1img);
                // drinks1layout.addView(drinks1text);
                kitchenlinear.addView(drinks1layout,0);

            }

            if (index == drinks2index) {
                printfood(drinks2index);
                drinks2layout.setOrientation(LinearLayout.VERTICAL);
                drinks2layout.setLayoutParams(vp);
                Drawable img1 = getResources().getDrawable(R.mipmap.milk);
                drinks2img.setImageDrawable(img1);
                drinks2layout.addView(drinks2img);
                // drinks2layout.addView(drinks2text);
                kitchenlinear.addView(drinks2layout,0);

            }

            if (index == drinks3index) {
                printfood(drinks3index);
                drinks3layout.setOrientation(LinearLayout.VERTICAL);
                drinks3layout.setLayoutParams(vp);
                Drawable img1 = getResources().getDrawable(R.mipmap.tea);
                drinks3img.setImageDrawable(img1);
                drinks3layout.addView(drinks3img);
                // drinks3layout.addView(drinks3text);
                kitchenlinear.addView(drinks3layout,0);

            }
            if (index == drinks4index) {
                printfood(drinks4index);
                drinks4layout.setOrientation(LinearLayout.VERTICAL);
                drinks4layout.setLayoutParams(vp);
                Drawable img1 = getResources().getDrawable(R.mipmap.orangejuice);
                drinks4img.setImageDrawable(img1);
                drinks4layout.addView(drinks4img);
                // drinks4layout.addView(drinks4text);
                kitchenlinear.addView(drinks4layout,0);

            }
            if (index == drinks5index) {
                printfood(drinks5index);
                drinks5layout.setOrientation(LinearLayout.VERTICAL);
                drinks5layout.setLayoutParams(vp);
                Drawable img1 = getResources().getDrawable(R.mipmap.coffee);
                drinks5img.setImageDrawable(img1);
                drinks5layout.addView(drinks5img);
                // drinks5layout.addView(drinks5text);
                kitchenlinear.addView(drinks5layout,0);

            }

            if (index == drinks6index) {
                printfood(drinks6index);
                drinks6layout.setOrientation(LinearLayout.VERTICAL);
                drinks6layout.setLayoutParams(vp);
                Drawable img1 = getResources().getDrawable(R.mipmap.cooljuice);
                drinks6img.setImageDrawable(img1);
                drinks6layout.addView(drinks6img);
                // drinks6layout.addView(drinks6text);
                kitchenlinear.addView(drinks6layout,0);

            }

            if (index == desert1index) {
                printfood(desert1index);
                desert1layout.setOrientation(LinearLayout.VERTICAL);
                desert1layout.setLayoutParams(vp);
                Drawable img1 = getResources().getDrawable(R.mipmap.donut);
                desert1img.setImageDrawable(img1);
                desert1layout.addView(desert1img);
                // desert1layout.addView(desert1text);
                kitchenlinear.addView(desert1layout,0);

            }

            if (index == desert2index) {
                printfood(desert2index);
                desert2layout.setOrientation(LinearLayout.VERTICAL);
                desert2layout.setLayoutParams(vp);
                Drawable img1 = getResources().getDrawable(R.mipmap.chocolate);
                desert2img.setImageDrawable(img1);
                desert2layout.addView(desert2img);
                // desert2layout.addView(desert2text);
                kitchenlinear.addView(desert2layout,0);

            }
            if (index == desert3index) {
                printfood(desert3index);
                desert3layout.setOrientation(LinearLayout.VERTICAL);
                desert3layout.setLayoutParams(vp);
                Drawable img1 = getResources().getDrawable(R.mipmap.icecream);
                desert3img.setImageDrawable(img1);
                desert3layout.addView(desert3img);
                // desert3layout.addView(desert3text);
                kitchenlinear.addView(desert3layout,0);

            }

            if (index == desert4index) {
                printfood(desert4index);
                desert4layout.setOrientation(LinearLayout.VERTICAL);
                desert4layout.setLayoutParams(vp);
                Drawable img1 = getResources().getDrawable(R.mipmap.cacaoice);
                desert4img.setImageDrawable(img1);
                desert4layout.addView(desert4img);
                // desert4layout.addView(desert4text);
                kitchenlinear.addView(desert4layout,0);

            }
            if (index == desert5index) {
                printfood(desert5index);
                desert5layout.setOrientation(LinearLayout.VERTICAL);
                desert5layout.setLayoutParams(vp);
                Drawable img1 = getResources().getDrawable(R.mipmap.pancake);
                desert5img.setImageDrawable(img1);
                desert5layout.addView(desert5img);
                // desert5layout.addView(desert5text);
                kitchenlinear.addView(desert5layout,0);

            }


            if (index == desert6index) {
                printfood(desert6index);
                desert6layout.setOrientation(LinearLayout.VERTICAL);
                desert6layout.setLayoutParams(vp);
                Drawable img1 = getResources().getDrawable(R.mipmap.paprika);
                desert6img.setImageDrawable(img1);
                desert6layout.addView(desert6img);
                // desert6layout.addView(desert6text);
                kitchenlinear.addView(desert6layout,0);

            }




            if (index == frenchfriesindex) {
                printfood(frenchfriesindex);
                frenchfireslayout.setOrientation(LinearLayout.VERTICAL);
                frenchfireslayout.setLayoutParams(vp);
                Drawable img1 = getResources().getDrawable(R.mipmap.frenchfriespng);
                frenchfriesimg.setImageDrawable(img1);
                frenchfireslayout.addView(frenchfriesimg);
                //frenchfireslayout.addView(frenchfriestext);
                kitchenlinear.addView(frenchfireslayout,0);

            }

            if (index == chickenlegindex) {
                printfood(chickenlegindex);
                chickenleglayout.setOrientation(LinearLayout.VERTICAL);
                chickenleglayout.setLayoutParams(vp);
                Drawable img1 = getResources().getDrawable(R.mipmap.chicken2);
                chickenlegimg.setImageDrawable(img1);
                chickenleglayout.addView(chickenlegimg);
                //chickenleglayout.addView(chcikenlegtext);
                kitchenlinear.addView(chickenleglayout,0);

            }


            if (index == fishindex) {
                printfood(fishindex);
                fishlayout.setOrientation(LinearLayout.VERTICAL);
                fishlayout.setLayoutParams(vp);
                Drawable img1 = getResources().getDrawable(R.mipmap.fishpng);
                fishimg.setImageDrawable(img1);
                fishlayout.addView(fishimg);
               // fishlayout.addView(fishtext);
                kitchenlinear.addView(fishlayout,0);
            }

            //appleimg,bostonrollimg,carrotimg,frenchtoastimg,meatarmimg, medisaladimg,noodleimg,mixedsaladimg, onionringsv,orangeimg,porkimg,mixedrollimg, salmonsushiimg,soupimg,squidimg,cokeimg,brownieimg,cheesecakeimg,cheeseimg, juiceimg;

            if (index == appleindex) {
                printfood(appleindex);
                applelayout.setOrientation(LinearLayout.VERTICAL);
                applelayout.setLayoutParams(vp);
                Drawable img1 = getResources().getDrawable(R.mipmap.apple);
                appleimg.setImageDrawable(img1);
                applelayout.addView(appleimg);
               // applelayout.addView(appletext);
                kitchenlinear.addView(applelayout,0);
            }


            if (index == bostonrollindex) {
                printfood(bostonrollindex);
                bostonrolllayout.setOrientation(LinearLayout.VERTICAL);
                bostonrolllayout.setLayoutParams(vp);
                Drawable img1 = getResources().getDrawable(R.mipmap.bostonroll);
                bostonrollimg.setImageDrawable(img1);
                bostonrolllayout.addView(bostonrollimg);
                //bostonrolllayout.addView(bostonrolltext);
                kitchenlinear.addView(bostonrolllayout,0);
            }

            if (index == carrotindex) {
                printfood(carrotindex);
                carrotlayout.setOrientation(LinearLayout.VERTICAL);
                carrotlayout.setLayoutParams(vp);
                Drawable img1 = getResources().getDrawable(R.mipmap.carrot);
                carrotimg.setImageDrawable(img1);
                carrotlayout.addView(carrotimg);
                //carrotlayout.addView(carrottext);
                kitchenlinear.addView(carrotlayout,0);
            }
            if (index == frenchtoastindex) {
                printfood(frenchtoastindex);
                frenchtoastlayout.setOrientation(LinearLayout.VERTICAL);
                frenchtoastlayout.setLayoutParams(vp);
                Drawable img1 = getResources().getDrawable(R.mipmap.grape);
                frenchtoastimg.setImageDrawable(img1);
                frenchtoastlayout.addView(frenchtoastimg);
                //frenchtoastlayout.addView(frenchtoasttext);
                kitchenlinear.addView(frenchtoastlayout,0);
            }


            if (index == meatarmindex) {
                printfood(meatarmindex);
                meatarmlayout.setOrientation(LinearLayout.VERTICAL);
                meatarmlayout.setLayoutParams(vp);
                Drawable img1 = getResources().getDrawable(R.mipmap.sandwich);
                meatarmimg.setImageDrawable(img1);
                meatarmlayout.addView(meatarmimg);
               // meatarmlayout.addView(meatarmtext);
                kitchenlinear.addView(meatarmlayout,0);
            }


            if (index == medisaladindex) {
                printfood(medisaladindex);
                medisaladlayout.setOrientation(LinearLayout.VERTICAL);
                medisaladlayout.setLayoutParams(vp);
                Drawable img1 = getResources().getDrawable(R.mipmap.mushroom);
                medisaladimg.setImageDrawable(img1);
                medisaladlayout.addView(medisaladimg);
               // medisaladlayout.addView(medisaladtext);
                kitchenlinear.addView(medisaladlayout,0);
            }

            if (index == noodleindex) {
                printfood(noodleindex);
                noodlelayout.setOrientation(LinearLayout.VERTICAL);
                noodlelayout.setLayoutParams(vp);
                Drawable img1 = getResources().getDrawable(R.mipmap.taco);
                noodleimg.setImageDrawable(img1);
                noodlelayout.addView(noodleimg);
               // noodlelayout.addView(noodletext);
                kitchenlinear.addView(noodlelayout,0);
            }

            if (index == mixedsaladindex) {
                printfood(mixedsaladindex);
                mixedsaladlayout.setOrientation(LinearLayout.VERTICAL);
                mixedsaladlayout.setLayoutParams(vp);
                Drawable img1 = getResources().getDrawable(R.mipmap.salad);
                mixedsaladimg.setImageDrawable(img1);
                mixedsaladlayout.addView(mixedsaladimg);
               // mixedsaladlayout.addView(mixedsaladtext);
                kitchenlinear.addView(mixedsaladlayout,0);
            }

            if (index == onionringsindex) {
                printfood(onionringsindex);
                onionringslayout.setOrientation(LinearLayout.VERTICAL);
                onionringslayout.setLayoutParams(vp);
                Drawable img1 = getResources().getDrawable(R.mipmap.cherryjuice);
                onionringimg.setImageDrawable(img1);
                onionringslayout.addView(onionringimg);
               // onionringslayout.addView(onionringstext);
                kitchenlinear.addView(onionringslayout,0);
            }

            if (index == orangeindex) {
                printfood(orangeindex);
                orangelayout.setOrientation(LinearLayout.VERTICAL);
                orangelayout.setLayoutParams(vp);
                Drawable img1 = getResources().getDrawable(R.mipmap.pear);
                orangeimg.setImageDrawable(img1);
                orangelayout.addView(orangeimg);
                //orangelayout.addView(orangetext);
                kitchenlinear.addView(orangelayout,0);
            }
            if (index == porkindex) {
                printfood(porkindex);
                porklayout.setOrientation(LinearLayout.VERTICAL);
                porklayout.setLayoutParams(vp);
                Drawable img1 = getResources().getDrawable(R.mipmap.turkey);
                porkimg.setImageDrawable(img1);
                porklayout.addView(porkimg);
                //porklayout.addView(porktext);
                kitchenlinear.addView(porklayout,0);
            }


            if (index == mixedrollindex) {
                printfood(mixedrollindex);
                mixedrolllayout.setOrientation(LinearLayout.VERTICAL);
                mixedrolllayout.setLayoutParams(vp);
                Drawable img1 = getResources().getDrawable(R.mipmap.mixroll);
                mixedrollimg.setImageDrawable(img1);
                mixedrolllayout.addView(mixedrollimg);
               // mixedrolllayout.addView(mixedrolltext);
                kitchenlinear.addView(mixedrolllayout,0);
            }


            if (index == salmonsushiindex) {
                printfood(salmonsushiindex);
                salmonsushilayout.setOrientation(LinearLayout.VERTICAL);
                salmonsushilayout.setLayoutParams(vp);
                Drawable img1 = getResources().getDrawable(R.mipmap.salmonsushi);
                salmonsushiimg.setImageDrawable(img1);
                salmonsushilayout.addView(salmonsushiimg);
               // salmonsushilayout.addView(salmonsushitext);
                kitchenlinear.addView(salmonsushilayout,0);
            }


            if (index == soupindex) {
                printfood(soupindex);
                souplayout.setOrientation(LinearLayout.VERTICAL);
                souplayout.setLayoutParams(vp);
                Drawable img1 = getResources().getDrawable(R.mipmap.cherry);
                soupimg.setImageDrawable(img1);
                souplayout.addView(soupimg);
               // souplayout.addView(souptext);
                kitchenlinear.addView(souplayout,0);
            }

            if (index == squidindex) {
                printfood(squidindex);
                squidlayout.setOrientation(LinearLayout.VERTICAL);
                squidlayout.setLayoutParams(vp);
                Drawable img1 = getResources().getDrawable(R.mipmap.squid);
                squidimg.setImageDrawable(img1);
                squidlayout.addView(squidimg);
               // squidlayout.addView(squidtext);
                kitchenlinear.addView(squidlayout,0);
            }


            if (index == cokeindex) {
                printfood(cokeindex);
                cokelayout.setOrientation(LinearLayout.VERTICAL);
                cokelayout.setLayoutParams(vp);
                Drawable img1 = getResources().getDrawable(R.mipmap.espresso);
                cokeimg.setImageDrawable(img1);
                cokelayout.addView(cokeimg);
               // cokelayout.addView(coketext);
                kitchenlinear.addView(cokelayout,0);
            }

            if (index == brownieindex) {
                printfood(brownieindex);
                brownielayout.setOrientation(LinearLayout.VERTICAL);
                brownielayout.setLayoutParams(vp);
                Drawable img1 = getResources().getDrawable(R.mipmap.cookie);
                brownieimg.setImageDrawable(img1);
                brownielayout.addView(brownieimg);
               // brownielayout.addView(brownietext);
                kitchenlinear.addView(brownielayout,0);
            }

            if (index == cheesecakeindex) {
                printfood(cheesecakeindex);
                cheesecakelayout.setOrientation(LinearLayout.VERTICAL);
                cheesecakelayout.setLayoutParams(vp);
                Drawable img1 = getResources().getDrawable(R.mipmap.cupcake);
                cheesecakeimg.setImageDrawable(img1);
                cheesecakelayout.addView(cheesecakeimg);
               // cheesecakelayout.addView(cheesecaketext);
                kitchenlinear.addView(cheesecakelayout,0);
            }

            if (index == cheeseindex) {
                printfood(cheeseindex);
                cheeselayout.setOrientation(LinearLayout.VERTICAL);
                cheeselayout.setLayoutParams(vp);
                Drawable img1 = getResources().getDrawable(R.mipmap.strawberry);
                cheeseimg.setImageDrawable(img1);
                cheeselayout.addView(cheeseimg);
               // cheeselayout.addView(cheesetext);
                kitchenlinear.addView(cheeselayout,0);
            }


            if (index == juiceindex) {
                printfood(juiceindex);
                juicelayout.setOrientation(LinearLayout.VERTICAL);
                juicelayout.setLayoutParams(vp);
                Drawable img1 = getResources().getDrawable(R.mipmap.lemonade);
                juiceimg.setImageDrawable(img1);
                juicelayout.addView(juiceimg);
               // juicelayout.addView(juicetext);
                kitchenlinear.addView(juicelayout,0);
            }


//appleimg,bostonrollimg,carrotimg,frenchtoastimg,meatarmimg, medisaladimg,noodleimg,mixedsaladimg, onionringsv,orangeimg,porkimg,mixedrollimg, salmonsushiimg,soupimg,squidimg,cokeimg,brownieimg,cheesecakeimg,cheeseimg, juiceimg;


        }


    }


    void removefood(int index) {

       int indexarray = getindexarray(index);


        for ( int k = indexarray; k < storearraycount-1 ; k++)
        {
            marketarraystore[k] = marketarraystore[k+1];

        }
        marketarraystore[storearraycount-1]=0;
        storearraycount--;
        savearray(marketarraystore);

        if (index ==meatindex)
        {

            Drawable img1 = getResources().getDrawable(R.mipmap.cancel);
            meaticonimg.setImageDrawable(img1);

        linear1.removeView(meaticonimg);
        kitchenlinear.removeView(linear1);}

        if (index ==pizzaindex)
        {//pizzalayout.removeView(textpizza);
            Drawable img1 = getResources().getDrawable(R.mipmap.cancel);
            pizzaimp.setImageDrawable(img1);
            pizzalayout.removeView(pizzaimp);

            kitchenlinear.removeView(pizzalayout);}


        if (index ==watermelonindex)
        {//watermelonlayout.removeView(textwatermelon);
            Drawable img1 = getResources().getDrawable(R.mipmap.cancel);
            watermelonimg.setImageDrawable(img1);
            watermelonlayout.removeView(watermelonimg);

            kitchenlinear.removeView(watermelonlayout);}


        if (index ==tomatoindex)
        {//tomatolayout.removeView(texttomato);
            Drawable img1 = getResources().getDrawable(R.mipmap.cancel);
            tomatoimg.setImageDrawable(img1);
            tomatolayout.removeView(tomatoimg);

            kitchenlinear.removeView(tomatolayout);}

        if (index ==pumpkinindex)
        {//pumpkinlayout.removeView(textpumpkin);
            Drawable img1 = getResources().getDrawable(R.mipmap.cancel);
            pumpkinimg.setImageDrawable(img1);
            pumpkinlayout.removeView(pumpkinimg);

            kitchenlinear.removeView(pumpkinlayout);}

        if (index ==peesindex)
        {//peeslayout.removeView(textpees);
            Drawable img1 = getResources().getDrawable(R.mipmap.cancel);
            peesimg.setImageDrawable(img1);
            peeslayout.removeView(peesimg);

            kitchenlinear.removeView(peeslayout);}

        if (index ==kiwiindex)
        {//kiwilayout.removeView(textkiwi);
            Drawable img1 = getResources().getDrawable(R.mipmap.cancel);
            kiwiimg.setImageDrawable(img1);
            kiwilayout.removeView(kiwiimg);

            kitchenlinear.removeView(kiwilayout);}

        if (index ==hotdogindex)
        {//hotdoglayout.removeView(texthotdog);
            Drawable img1 = getResources().getDrawable(R.mipmap.cancel);
            hotdogimg.setImageDrawable(img1);
            hotdoglayout.removeView(hotdogimg);

            kitchenlinear.removeView(hotdoglayout);}

        if (index ==cornindex)
        {//cornlayout.removeView(textcorn);
            Drawable img1 = getResources().getDrawable(R.mipmap.cancel);
            cornimg.setImageDrawable(img1);
            cornlayout.removeView(cornimg);

            kitchenlinear.removeView(cornlayout);}

        if (index ==chilisindex)
        {//chilislayout.removeView(textchilis);
            Drawable img1 = getResources().getDrawable(R.mipmap.cancel);
            chilisimg.setImageDrawable(img1);
            chilislayout.removeView(chilisimg);

            kitchenlinear.removeView(chilislayout);}

        if (index ==broccoliindex)
        {//broccolilayout.removeView(textbroccoli);
            Drawable img1 = getResources().getDrawable(R.mipmap.cancel);
            broccoliimg.setImageDrawable(img1);
            broccolilayout.removeView(broccoliimg);

            kitchenlinear.removeView(broccolilayout);}

        if (index ==bananaindex)
        {//bananalayout.removeView(textbanana);
            Drawable img1 = getResources().getDrawable(R.mipmap.cancel);
            bananaimg.setImageDrawable(img1);
            bananalayout.removeView(bananaimg);

            kitchenlinear.removeView(bananalayout);}

        if (index ==siskebapindex)
        {//siskebaplayout.removeView(textsiskebap);
            Drawable img1 = getResources().getDrawable(R.mipmap.cancel);
            siskebapimg.setImageDrawable(img1);
            siskebaplayout.removeView(siskebapimg);

            kitchenlinear.removeView(siskebaplayout);}

        if (index ==regional1index)
        {//regional1layout.removeView(textregional1);
            Drawable img1 = getResources().getDrawable(R.mipmap.cancel);
            regional1img.setImageDrawable(img1);
            regional1layout.removeView(regional1img);

            kitchenlinear.removeView(regional1layout);}

        if (index ==regional2index)
        {//regional2layout.removeView(textregional2);
            Drawable img1 = getResources().getDrawable(R.mipmap.cancel);
            regional2img.setImageDrawable(img1);
            regional2layout.removeView(regional2img);

            kitchenlinear.removeView(regional2layout);}

        if (index ==regional3index)
        {//regional3layout.removeView(textregional3);
            Drawable img1 = getResources().getDrawable(R.mipmap.cancel);
            regional3img.setImageDrawable(img1);
            regional3layout.removeView(regional3img);

            kitchenlinear.removeView(regional3layout);}

        if (index ==regional4index)
        {//regional4layout.removeView(textregional4);
            Drawable img1 = getResources().getDrawable(R.mipmap.cancel);
            regional4img.setImageDrawable(img1);
            regional4layout.removeView(regional4img);

            kitchenlinear.removeView(regional4layout);}

        if (index ==regional5index)
        {//regional5layout.removeView(textregional5);
            Drawable img1 = getResources().getDrawable(R.mipmap.cancel);
            regional5img.setImageDrawable(img1);
            regional5layout.removeView(regional5img);

            kitchenlinear.removeView(regional5layout);}

        if (index ==regional6index)
        {//regional6layout.removeView(textregional6);
            Drawable img1 = getResources().getDrawable(R.mipmap.cancel);
            regional6img.setImageDrawable(img1);
            regional6layout.removeView(regional6img);

            kitchenlinear.removeView(regional6layout);}

        if (index ==drinks1index)
        {//drinks1layout.removeView(textdrinks1);
            Drawable img1 = getResources().getDrawable(R.mipmap.cancel);
            drinks1img.setImageDrawable(img1);
            drinks1layout.removeView(drinks1img);

            kitchenlinear.removeView(drinks1layout);}
        if (index ==drinks2index)
        {//drinks2layout.removeView(textdrinks2);
            Drawable img1 = getResources().getDrawable(R.mipmap.cancel);
            drinks2img.setImageDrawable(img1);
            drinks2layout.removeView(drinks2img);

            kitchenlinear.removeView(drinks2layout);}


        if (index ==drinks3index)
        {//drinks3layout.removeView(textdrinks3);
            Drawable img1 = getResources().getDrawable(R.mipmap.cancel);
            drinks3img.setImageDrawable(img1);
            drinks3layout.removeView(drinks3img);

            kitchenlinear.removeView(drinks3layout);}

        if (index ==drinks4index)
        {//drinks4layout.removeView(textdrinks4);
            Drawable img1 = getResources().getDrawable(R.mipmap.cancel);
            drinks4img.setImageDrawable(img1);
            drinks4layout.removeView(drinks4img);

            kitchenlinear.removeView(drinks4layout);}

        if (index ==drinks5index)
        {//drinks5layout.removeView(textdrinks5);
            Drawable img1 = getResources().getDrawable(R.mipmap.cancel);
            drinks5img.setImageDrawable(img1);
            drinks5layout.removeView(drinks5img);

            kitchenlinear.removeView(drinks5layout);}

        if (index ==drinks6index)
        {//drinks6layout.removeView(textdrinks6);
            Drawable img1 = getResources().getDrawable(R.mipmap.cancel);
            drinks6img.setImageDrawable(img1);
            drinks6layout.removeView(drinks6img);

            kitchenlinear.removeView(drinks6layout);}

        if (index ==desert1index)
        {//desert1layout.removeView(textdesert1);
            Drawable img1 = getResources().getDrawable(R.mipmap.cancel);
            desert1img.setImageDrawable(img1);
            desert1layout.removeView(desert1img);

            kitchenlinear.removeView(desert1layout);}

        if (index ==desert2index)
        {//desert2layout.removeView(textdesert2);
            Drawable img1 = getResources().getDrawable(R.mipmap.cancel);
            desert2img.setImageDrawable(img1);
            desert2layout.removeView(desert2img);

            kitchenlinear.removeView(desert2layout);}

        if (index ==desert3index)
        {//desert3layout.removeView(textdesert3);
            Drawable img1 = getResources().getDrawable(R.mipmap.cancel);
            desert3img.setImageDrawable(img1);
            desert3layout.removeView(desert3img);

            kitchenlinear.removeView(desert3layout);}

        if (index ==desert4index)
        {//desert4layout.removeView(textdesert4);
            Drawable img1 = getResources().getDrawable(R.mipmap.cancel);
            desert4img.setImageDrawable(img1);
            desert4layout.removeView(desert4img);

            kitchenlinear.removeView(desert4layout);}

        if (index ==desert5index)
        {//desert5layout.removeView(textdesert5);
            Drawable img1 = getResources().getDrawable(R.mipmap.cancel);
            desert5img.setImageDrawable(img1);
            desert5layout.removeView(desert5img);

            kitchenlinear.removeView(desert5layout);}

        if (index ==desert6index)
        {//desert6layout.removeView(textdesert6);
            Drawable img1 = getResources().getDrawable(R.mipmap.cancel);
            desert6img.setImageDrawable(img1);
            desert6layout.removeView(desert6img);

            kitchenlinear.removeView(desert6layout);}





        if (index ==hamburgerindex)
        {//hamburgerlayout.removeView(hamburgertext);

            Drawable img1 = getResources().getDrawable(R.mipmap.cancel);
            hamburgerimg.setImageDrawable(img1);
            hamburgerlayout.removeView(hamburgerimg);
            kitchenlinear.removeView(hamburgerlayout);}

        if (index ==greensoapindex)
        {//greensoaplayout.removeView(greensoaptext);

            Drawable img1 = getResources().getDrawable(R.mipmap.cancel);
            greensoapimg.setImageDrawable(img1);
            greensoaplayout.removeView(greensoapimg);
            hygienelinear.removeView(greensoaplayout);}


        if (index ==soap1index)
        {//greensoaplayout.removeView(greensoaptext);

            Drawable img1 = getResources().getDrawable(R.mipmap.cancel);
            soap1img.setImageDrawable(img1);
            soap1layout.removeView(soap1img);
            hygienelinear.removeView(soap1layout);}

        if (index ==soap2index)
        {//greensoaplayout.removeView(greensoaptext);

            Drawable img1 = getResources().getDrawable(R.mipmap.cancel);
            soap2img.setImageDrawable(img1);
            soap2layout.removeView(soap2img);
            hygienelinear.removeView(soap2layout);}



        if (index == sleeppotionindex)
        {//sleeppotionlayout.removeView(sleeppotiontext);
            Drawable img1 = getResources().getDrawable(R.mipmap.cancel);
            sleeppotionimg.setImageDrawable(img1);


            sleeppotionlayout.removeView(sleeppotionimg);
            kitchenlinear.removeView(sleeppotionlayout);}



        if (index ==hungerpotionindex)
        {//hungerpotionlayout.removeView(hungerpotiontext);

            Drawable img1 = getResources().getDrawable(R.mipmap.cancel);
            hungerpotionimg.setImageDrawable(img1);

            hungerpotionlayout.removeView(hungerpotionimg);
            kitchenlinear.removeView(hungerpotionlayout);}


        if (index ==hygienepotionindex)
        {//hygienepotionlayout.removeView(hygienepotiontext);
            Drawable img1 = getResources().getDrawable(R.mipmap.cancel);
            hygienepotionimg.setImageDrawable(img1);
            hygienepotionlayout.removeView(hygienepotionimg);
            kitchenlinear.removeView(hygienepotionlayout);}



        if (index ==lovepotionindex)
        {//lovepotionlayout.removeView(lovepotiontext);
            Drawable img1 = getResources().getDrawable(R.mipmap.cancel);
            lovepotionimg.setImageDrawable(img1);
            lovepotionlayout.removeView(lovepotionimg);
            kitchenlinear.removeView(lovepotionlayout);}



        if (index ==gamepotionindex)
        {//gamepotionlayout.removeView(gamepotiontext);

            Drawable img1 = getResources().getDrawable(R.mipmap.cancel);
            gamepotionimg.setImageDrawable(img1);
            gamepotionlayout.removeView(gamepotionimg);
            kitchenlinear.removeView(gamepotionlayout);}

        if (index ==allinpotionindex)
        {//gamepotionlayout.removeView(gamepotiontext);

            Drawable img1 = getResources().getDrawable(R.mipmap.cancel);
            allinpotionimg.setImageDrawable(img1);
            allinpotionlayout.removeView(allinpotionimg);
            kitchenlinear.removeView(allinpotionlayout);}

        if (index ==cellspongeindex)
        {//cellspongelayout.removeView(cellspongetext);

            Drawable img1 = getResources().getDrawable(R.mipmap.cancel);
            cellspongeimg.setImageDrawable(img1);
            cellspongelayout.removeView(cellspongeimg);
            hygienelinear.removeView(cellspongelayout);}

        if (index ==darkspongeindex)
        {//darkspongelayout.removeView(darkspongetext);

            Drawable img1 = getResources().getDrawable(R.mipmap.cancel);
            darkspongeimg.setImageDrawable(img1);
            darkspongelayout.removeView(darkspongeimg);
            hygienelinear.removeView(darkspongelayout);}

        if (index ==seaspongeindex)
        {//seaspongelayout.removeView(seaspongetext);

            Drawable img1 = getResources().getDrawable(R.mipmap.cancel);
            seaspongeimg.setImageDrawable(img1);
            seaspongelayout.removeView(seaspongeimg);
            hygienelinear.removeView(seaspongelayout);}






        if (index ==frenchfriesindex)
        {//frenchfireslayout.removeView(frenchfriestext);

            Drawable img1 = getResources().getDrawable(R.mipmap.cancel);
            frenchfriesimg.setImageDrawable(img1);
            frenchfireslayout.removeView(frenchfriesimg);
            kitchenlinear.removeView(frenchfireslayout);}

        if (index ==chickenlegindex)
        {//chickenleglayout.removeView(chcikenlegtext);

            Drawable img1 = getResources().getDrawable(R.mipmap.cancel);
            chickenlegimg.setImageDrawable(img1);
            chickenleglayout.removeView(chickenlegimg);
            kitchenlinear.removeView(chickenleglayout);}


        if (index ==fishindex)
        {//fishlayout.removeView(fishtext);


            Drawable img1 = getResources().getDrawable(R.mipmap.cancel);
            fishimg.setImageDrawable(img1);
            fishlayout.removeView(fishimg);
            kitchenlinear.removeView(fishlayout);}

        //appleimg,bostonrollimg,carrotimg,frenchtoastimg,meatarmimg, medisaladimg,noodleimg,mixedsaladimg, onionringsv,orangeimg,porkimg,mixedrollimg, salmonsushiimg,soupimg,squidimg,cokeimg,brownieimg,cheesecakeimg,cheeseimg, juiceimg;

        if (index ==appleindex)
        {//applelayout.removeView(appletext);

            Drawable img1 = getResources().getDrawable(R.mipmap.cancel);
            appleimg.setImageDrawable(img1);
            applelayout.removeView(appleimg);
            kitchenlinear.removeView(applelayout);}
        if (index ==bostonrollindex)
        {//bostonrolllayout.removeView(bostonrolltext);

            Drawable img1 = getResources().getDrawable(R.mipmap.cancel);
            bostonrollimg.setImageDrawable(img1);
            bostonrolllayout.removeView(bostonrollimg);
            kitchenlinear.removeView(bostonrolllayout);}

        if (index ==carrotindex)
        {//carrotlayout.removeView(carrottext);

            Drawable img1 = getResources().getDrawable(R.mipmap.cancel);
            carrotimg.setImageDrawable(img1);
            carrotlayout.removeView(carrotimg);
            kitchenlinear.removeView(carrotlayout);}

        if (index ==frenchtoastindex)
        {//frenchtoastlayout.removeView(frenchtoasttext);

            Drawable img1 = getResources().getDrawable(R.mipmap.cancel);
            frenchtoastimg.setImageDrawable(img1);
            frenchtoastlayout.removeView(frenchtoastimg);
            kitchenlinear.removeView(frenchtoastlayout);}

        if (index ==meatarmindex)
        {//meatarmlayout.removeView(meatarmtext);

            Drawable img1 = getResources().getDrawable(R.mipmap.cancel);
            meatarmimg.setImageDrawable(img1);
            meatarmlayout.removeView(meatarmimg);
            kitchenlinear.removeView(meatarmlayout);}

        if (index ==medisaladindex)
        {//medisaladlayout.removeView(medisaladtext);
            Drawable img1 = getResources().getDrawable(R.mipmap.cancel);
            medisaladimg.setImageDrawable(img1);

            medisaladlayout.removeView(medisaladimg);
            kitchenlinear.removeView(medisaladlayout);}

        if (index ==noodleindex)
        {//noodlelayout.removeView(noodletext);

            Drawable img1 = getResources().getDrawable(R.mipmap.cancel);
            noodleimg.setImageDrawable(img1);
            noodlelayout.removeView(noodleimg);
            kitchenlinear.removeView(noodlelayout);}

        if (index ==mixedsaladindex)
        {//mixedsaladlayout.removeView(mixedsaladtext);
            Drawable img1 = getResources().getDrawable(R.mipmap.cancel);
            mixedsaladimg.setImageDrawable(img1);

            mixedsaladlayout.removeView(mixedsaladimg);
            kitchenlinear.removeView(mixedsaladlayout);}

        if (index ==onionringsindex)
        {//onionringslayout.removeView(onionringstext);

            Drawable img1 = getResources().getDrawable(R.mipmap.cancel);
            onionringimg.setImageDrawable(img1);


            onionringslayout.removeView(onionringimg);
            kitchenlinear.removeView(onionringslayout);}

        if (index ==orangeindex)
        {//orangelayout.removeView(orangetext);


            Drawable img1 = getResources().getDrawable(R.mipmap.cancel);
            orangeimg.setImageDrawable(img1);


            orangelayout.removeView(orangeimg);
            kitchenlinear.removeView(orangelayout);}

        if (index ==porkindex)
        {//porklayout.removeView(porktext);


            Drawable img1 = getResources().getDrawable(R.mipmap.cancel);
            porkimg.setImageDrawable(img1);
            porklayout.removeView(porkimg);
            kitchenlinear.removeView(porklayout);}


        if (index ==mixedrollindex)
        {//mixedrolllayout.removeView(mixedrolltext);


            Drawable img1 = getResources().getDrawable(R.mipmap.cancel);
            mixedrollimg.setImageDrawable(img1);
            mixedrolllayout.removeView(mixedrollimg);
            kitchenlinear.removeView(mixedrolllayout);}


        if (index ==salmonsushiindex)
        {//salmonsushilayout.removeView(salmonsushitext);


            Drawable img1 = getResources().getDrawable(R.mipmap.cancel);
            salmonsushiimg.setImageDrawable(img1);

            salmonsushilayout.removeView(salmonsushiimg);
            kitchenlinear.removeView(salmonsushilayout);}

        if (index ==soupindex)
        {//souplayout.removeView(souptext);

            Drawable img1 = getResources().getDrawable(R.mipmap.cancel);
            soupimg.setImageDrawable(img1);

            souplayout.removeView(soupimg);
            kitchenlinear.removeView(souplayout);}

        if (index ==squidindex)
        {//squidlayout.removeView(squidtext);

            Drawable img1 = getResources().getDrawable(R.mipmap.cancel);
            squidimg.setImageDrawable(img1);


            squidlayout.removeView(squidimg);
            kitchenlinear.removeView(squidlayout);}

        if (index ==cokeindex)
        {//cokelayout.removeView(coketext);

            Drawable img1 = getResources().getDrawable(R.mipmap.cancel);
            cokeimg.setImageDrawable(img1);


            cokelayout.removeView(cokeimg);
            kitchenlinear.removeView(cokelayout);}


        if (index ==brownieindex)
        {//brownielayout.removeView(brownietext);

            Drawable img1 = getResources().getDrawable(R.mipmap.cancel);
            brownieimg.setImageDrawable(img1);


            brownielayout.removeView(brownieimg);
            kitchenlinear.removeView(brownielayout);}

        if (index ==cheesecakeindex)
        {//cheesecakelayout.removeView(cheesecaketext);

            Drawable img1 = getResources().getDrawable(R.mipmap.cancel);
            cheesecakeimg.setImageDrawable(img1);


            cheesecakelayout.removeView(cheesecakeimg);
            kitchenlinear.removeView(cheesecakelayout);}

        if (index ==cheeseindex)
        {//cheeselayout.removeView(cheesetext);

            Drawable img1 = getResources().getDrawable(R.mipmap.cancel);
            cheesecakeimg.setImageDrawable(img1);

            cheeselayout.removeView(cheeseimg);
            kitchenlinear.removeView(cheeselayout);}

        if (index ==juiceindex)
        {//juicelayout.removeView(juicetext);

            Drawable img1 = getResources().getDrawable(R.mipmap.cancel);
            juiceimg.setImageDrawable(img1);
            juicelayout.removeView(juiceimg);
            kitchenlinear.removeView(juicelayout);}


    }

    void printfood(int index){
        final TextView meattext2 = (TextView) findViewById(R.id.tbonetext);
        Typeface tf = Typeface.createFromAsset(getAssets(), "irisupsbold.ttf");

        //final TextView coinwrite = (TextView) findViewById(R.id.textView70);
        final TextView coinwrite1 = (TextView) findViewById(R.id.textView700);
        Typeface tf1 = Typeface.createFromAsset(getAssets(), "irisupsbold.ttf");
        //coinwrite.setTypeface(tf1);
        //coinwrite1.setTypeface(tf);


       final TextView textpizza2 = (TextView) findViewById(R.id.textView100);
       // textpizza2.setTypeface(tf);


//appleimg,bostonrollimg,carrotimg,frenchtoastimg,meatarmimg, medisaladimg,noodleimg,mixedsaladimg, onionringsv,orangeimg,porkimg,mixedrollimg, salmonsushiimg,soupimg,squidimg,cokeimg,brownieimg,cheesecakeimg,cheeseimg, juiceimg;


        final TextView hamburgertext2 = (TextView) findViewById(R.id.hamburgertext);
        final TextView greensoaptext2 = (TextView) findViewById(R.id.greensoaptext);
        final TextView soap1text2 = (TextView) findViewById(R.id.soap1text);
        final TextView soap2text2 = (TextView) findViewById(R.id.soap2text);
        final TextView cellspongetext2 = (TextView) findViewById(R.id.cellsoaptext);
        final TextView darkspongetext2 = (TextView) findViewById(R.id.greendarksoaptext);
        final TextView seaspongetext2 = (TextView) findViewById(R.id.seaspongetext);

        final TextView sleeppotiontext2 = (TextView) findViewById(R.id.sleepotiontext);
        final TextView hungerpotiontext2 = (TextView) findViewById(R.id.hungerpotiontext);
        final TextView hygienepotiontext2 = (TextView) findViewById(R.id.hygienepotiontext);
        final TextView lovepotiontext2 = (TextView) findViewById(R.id.lovepotiontext);
        final TextView gamepotiontext2 = (TextView) findViewById(R.id.gamepotiontext);
        final TextView allinpotiontext2 = (TextView) findViewById(R.id.allinpotiontext);


        final TextView watermelontext2 = (TextView) findViewById(R.id.watermelontext);
        final TextView tomatotext2 = (TextView) findViewById(R.id.tomatotext);
        final TextView pumpkintext2 = (TextView) findViewById(R.id.pumpkintext);
        final TextView peestext2 = (TextView) findViewById(R.id.peestext);
        final TextView kiwitext2 = (TextView) findViewById(R.id.kiwitext);
        final TextView hotdogtext2 = (TextView) findViewById(R.id.hotdogtext);
        final TextView corntext2 = (TextView) findViewById(R.id.corntext);
        final TextView chilistext2 = (TextView) findViewById(R.id.chilistext);
        final TextView broccolitext2 = (TextView) findViewById(R.id.broccolitext);
        final TextView bananatext2 = (TextView) findViewById(R.id.bananatext);
        final TextView siskebaptext2 = (TextView) findViewById(R.id.siskebaptext);
        final TextView regional1text2 = (TextView) findViewById(R.id.regional1text);
        final TextView regional2text2 = (TextView) findViewById(R.id.regional2text);
        final TextView regional3text2 = (TextView) findViewById(R.id.regional3text);
        final TextView regional4text2 = (TextView) findViewById(R.id.regional4text);
        final TextView regional5text2 = (TextView) findViewById(R.id.regional5text);
        final TextView regional6text2 = (TextView) findViewById(R.id.regional6text);



        final TextView drinks1text2 = (TextView) findViewById(R.id.drinks1text);
        final TextView drinks2text2 = (TextView) findViewById(R.id.drinks2text);
        final TextView drinks3text2 = (TextView) findViewById(R.id.drinks3text);
        final TextView drinks4text2 = (TextView) findViewById(R.id.drinks4text);
        final TextView drinks5text2 = (TextView) findViewById(R.id.drinks5text);
        final TextView drinks6text2 = (TextView) findViewById(R.id.drinks6text);



        final TextView desert1text2 = (TextView) findViewById(R.id.desert1text);
        final TextView desert2text2 = (TextView) findViewById(R.id.desert2text);
        final TextView desert3text2 = (TextView) findViewById(R.id.desert3text);
        final TextView desert4text2 = (TextView) findViewById(R.id.desert4text);
        final TextView desert5text2 = (TextView) findViewById(R.id.desert5text);
        final TextView desert6text2 = (TextView) findViewById(R.id.desert6text);




        final TextView frenchfriestext2 = (TextView) findViewById(R.id.frenchfriestext);
        final TextView chickenlegtext2 = (TextView) findViewById(R.id.chickenlegtext);
        final TextView fishtext2 = (TextView) findViewById(R.id.fishtext);
        final TextView appletext2 = (TextView) findViewById(R.id.appletext);
        final TextView bostonrolltext2 = (TextView) findViewById(R.id.bostonrolltext);
        final TextView carrottext2 = (TextView) findViewById(R.id.carrottext);
        final TextView frenchtoasttet2 = (TextView) findViewById(R.id.frenchtoasttext);
        final TextView meatarmtext2 = (TextView) findViewById(R.id.meatarmtext);
        final TextView medisaladtext2 = (TextView) findViewById(R.id.medisaladtext);
        final TextView noodletext2 = (TextView) findViewById(R.id.noodletext);
        final TextView mixedsaladtext2 = (TextView) findViewById(R.id.mixedsaladtext);
        final TextView onionringstext2 = (TextView) findViewById(R.id.onionringsltext);
        final TextView orangetext2 = (TextView) findViewById(R.id.orangetext);
        final TextView porktext2 = (TextView) findViewById(R.id.porktext);
        final TextView mixedrolltext2 = (TextView) findViewById(R.id.mixrolltext);
        final TextView salmonsushitext2 = (TextView) findViewById(R.id.salmonsushitext);
        final TextView souptext2 = (TextView) findViewById(R.id.souptext);
        final TextView squidtext2 = (TextView) findViewById(R.id.squidtext);
        final TextView coketext2 = (TextView) findViewById(R.id.coketext);
        final TextView brownietext2 = (TextView) findViewById(R.id.brownietext);
        final TextView cheesecaketext2 = (TextView) findViewById(R.id.cheescaketext);
        final TextView cheesetext2 = (TextView) findViewById(R.id.cheesetext);
        final TextView juicetext2 = (TextView) findViewById(R.id.juicetext);

        final float density = Resources.getSystem().getDisplayMetrics().density;


        if (index==meatindex)
        { textmeat.setText(Integer.toString(marketarray[meatindex]));
            textmeat.setTextColor(Color.BLACK);
            meattext2.setText(Integer.toString(marketarray[meatindex]));

            textmeat.setTextSize(14);
            LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(
                    ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);

            params.gravity = Gravity.CENTER;
            textmeat.setLayoutParams(params);


        }

        if (index==pizzaindex)
        { textpizza.setText(Integer.toString(marketarray[pizzaindex]));
            textpizza.setTextColor(Color.BLACK);
            textpizza2.setText(Integer.toString(marketarray[pizzaindex]));
            textpizza.setTextSize(14);
            //textpizza2.setTextColor(Color.argb(255,52,73,94));
            Typeface tft = Typeface.createFromAsset(getAssets(), "irisupsbold.ttf");
            //textpizza2.setTypeface(tft);
            //textpizza2.setTextSize(25);
            LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(
                    ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);

            params.gravity = Gravity.CENTER;
            textpizza.setLayoutParams(params);
        }

        if (index==hamburgerindex)
        { //hamburgertext.setText("Burger: " + Integer.toString(marketarray[hamburgerindex]));
            hamburgertext.setText(Integer.toString(marketarray[hamburgerindex]));
            hamburgertext.setTextColor(Color.BLACK);
            hamburgertext.setTextSize(14);
            LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(
                    ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);

            params.gravity = Gravity.CENTER;
            hamburgertext.setLayoutParams(params);


            hamburgertext2.setText(Integer.toString(marketarray[hamburgerindex]));

        }


        if (index==watermelonindex)
        { watermelontext.setText(Integer.toString(marketarray[watermelonindex]));
            watermelontext.setTextColor(Color.BLACK);
            watermelontext2.setText(Integer.toString(marketarray[watermelonindex]));
            watermelontext.setTextSize(14);
            LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(
                    ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);

            params.gravity = Gravity.CENTER;
            watermelontext.setLayoutParams(params);
        }

        if (index==tomatoindex)
        { tomatotext.setText(Integer.toString(marketarray[tomatoindex]));
            tomatotext.setTextColor(Color.BLACK);
            tomatotext2.setText(Integer.toString(marketarray[tomatoindex]));
            tomatotext.setTextSize(14);
            LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(
                    ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);

            params.gravity = Gravity.CENTER;
            tomatotext.setLayoutParams(params);
        }

        if (index==pumpkinindex)
        { pumpkintext.setText(Integer.toString(marketarray[pumpkinindex]));
            pumpkintext.setTextColor(Color.BLACK);
            pumpkintext2.setText(Integer.toString(marketarray[pumpkinindex]));
            pumpkintext.setTextSize(14);
            LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(
                    ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);

            params.gravity = Gravity.CENTER;
            pumpkintext.setLayoutParams(params);
        }


        if (index==peesindex)
        { peestext.setText(Integer.toString(marketarray[peesindex]));
            peestext.setTextColor(Color.BLACK);
            peestext2.setText(Integer.toString(marketarray[peesindex]));
            peestext.setTextSize(14);
            LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(
                    ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);

            params.gravity = Gravity.CENTER;
            peestext.setLayoutParams(params);
        }

        if (index==kiwiindex)
        { kiwitext.setText(Integer.toString(marketarray[kiwiindex]));
            kiwitext.setTextColor(Color.BLACK);
            kiwitext2.setText(Integer.toString(marketarray[kiwiindex]));
            kiwitext.setTextSize(14);
            LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(
                    ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);

            params.gravity = Gravity.CENTER;
            kiwitext.setLayoutParams(params);
        }

        if (index==hotdogindex)
        { hotdogtext.setText(Integer.toString(marketarray[hotdogindex]));
            hotdogtext.setTextColor(Color.BLACK);
            hotdogtext2.setText(Integer.toString(marketarray[hotdogindex]));
            hotdogtext.setTextSize(14);
            LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(
                    ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);

            params.gravity = Gravity.CENTER;
            hotdogtext.setLayoutParams(params);
        }

        if (index==cornindex)
        { corntext.setText(Integer.toString(marketarray[cornindex]));
            corntext.setTextColor(Color.BLACK);
            corntext2.setText(Integer.toString(marketarray[cornindex]));
            corntext.setTextSize(14);
            LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(
                    ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);

            params.gravity = Gravity.CENTER;
            corntext.setLayoutParams(params);
        }
        if (index==chilisindex)
        { chilistext.setText(Integer.toString(marketarray[chilisindex]));
            chilistext.setTextColor(Color.BLACK);
            chilistext2.setText(Integer.toString(marketarray[chilisindex]));
            chilistext.setTextSize(14);
            LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(
                    ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);

            params.gravity = Gravity.CENTER;
            chilistext.setLayoutParams(params);
        }

        if (index==broccoliindex)
        { broccolitext.setText(Integer.toString(marketarray[broccoliindex]));
            broccolitext.setTextColor(Color.BLACK);
            broccolitext2.setText(Integer.toString(marketarray[broccoliindex]));
            broccolitext.setTextSize(14);
            LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(
                    ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);

            params.gravity = Gravity.CENTER;
            broccolitext.setLayoutParams(params);
        }


        if (index==bananaindex)
        { bananatext.setText(Integer.toString(marketarray[bananaindex]));
            bananatext.setTextColor(Color.BLACK);
            bananatext2.setText(Integer.toString(marketarray[bananaindex]));
            bananatext.setTextSize(14);
            LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(
                    ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);

            params.gravity = Gravity.CENTER;
            bananatext.setLayoutParams(params);
        }

        if (index==siskebapindex)
        { siskebaptext.setText(Integer.toString(marketarray[siskebapindex]));
            siskebaptext.setTextColor(Color.BLACK);
            siskebaptext2.setText(Integer.toString(marketarray[siskebapindex]));
            siskebaptext.setTextSize(14);
            LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(
                    ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);

            params.gravity = Gravity.CENTER;
            siskebaptext.setLayoutParams(params);
        }

        if (index==regional1index)
        { regional1text.setText(Integer.toString(marketarray[regional1index]));
            regional1text.setTextColor(Color.BLACK);
            regional1text2.setText(Integer.toString(marketarray[regional1index]));
            regional1text.setTextSize(14);
            LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(
                    ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);

            params.gravity = Gravity.CENTER;
            regional1text.setLayoutParams(params);
        }

        if (index==regional2index)
        { regional2text.setText(Integer.toString(marketarray[regional2index]));
            regional2text.setTextColor(Color.BLACK);
            regional2text2.setText(Integer.toString(marketarray[regional2index]));
            regional2text.setTextSize(14);
            LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(
                    ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);

            params.gravity = Gravity.CENTER;
            regional2text.setLayoutParams(params);
        }
        if (index==regional3index)
        { regional3text.setText(Integer.toString(marketarray[regional3index]));
            regional3text.setTextColor(Color.BLACK);
            regional3text2.setText(Integer.toString(marketarray[regional3index]));
            regional3text.setTextSize(14);
            LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(
                    ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);

            params.gravity = Gravity.CENTER;
            regional3text.setLayoutParams(params);
        }

        if (index==regional4index)
        { regional4text.setText(Integer.toString(marketarray[regional4index]));
            regional4text.setTextColor(Color.BLACK);
            regional4text2.setText(Integer.toString(marketarray[regional4index]));
            regional4text.setTextSize(14);
            LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(
                    ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);

            params.gravity = Gravity.CENTER;
            regional4text.setLayoutParams(params);
        }
        if (index==regional5index)
        { regional5text.setText(Integer.toString(marketarray[regional5index]));
            regional5text.setTextColor(Color.BLACK);
            regional5text2.setText(Integer.toString(marketarray[regional5index]));
            regional5text.setTextSize(14);
            LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(
                    ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);

            params.gravity = Gravity.CENTER;
            regional5text.setLayoutParams(params);
        }

        if (index==regional6index)
        { regional6text.setText(Integer.toString(marketarray[regional6index]));
            regional6text.setTextColor(Color.BLACK);
            regional6text2.setText(Integer.toString(marketarray[regional6index]));
            regional6text.setTextSize(14);
            LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(
                    ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);

            params.gravity = Gravity.CENTER;
            regional6text.setLayoutParams(params);
        }

        if (index==drinks1index)
        { drinks1text.setText(Integer.toString(marketarray[drinks1index]));
            drinks1text.setTextColor(Color.BLACK);
            drinks1text2.setText(Integer.toString(marketarray[drinks1index]));
            drinks1text.setTextSize(14);
            LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(
                    ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);

            params.gravity = Gravity.CENTER;
            drinks1text.setLayoutParams(params);
        }

        if (index==drinks2index)
        { drinks2text.setText(Integer.toString(marketarray[drinks2index]));
            drinks2text.setTextColor(Color.BLACK);
            drinks2text2.setText(Integer.toString(marketarray[drinks2index]));
            drinks2text.setTextSize(14);
            LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(
                    ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);

            params.gravity = Gravity.CENTER;
            drinks2text.setLayoutParams(params);
        }

        if (index==drinks3index)
        { drinks3text.setText(Integer.toString(marketarray[drinks3index]));
            drinks3text.setTextColor(Color.BLACK);
            drinks3text2.setText(Integer.toString(marketarray[drinks3index]));
            drinks3text.setTextSize(14);
            LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(
                    ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);

            params.gravity = Gravity.CENTER;
            drinks3text.setLayoutParams(params);
        }

        if (index==drinks4index)
        { drinks4text.setText(Integer.toString(marketarray[drinks4index]));
            drinks4text.setTextColor(Color.BLACK);
            drinks4text2.setText(Integer.toString(marketarray[drinks4index]));
            drinks4text.setTextSize(14);
            LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(
                    ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);

            params.gravity = Gravity.CENTER;
            drinks4text.setLayoutParams(params);
        }
        if (index==drinks5index)
        { drinks5text.setText(Integer.toString(marketarray[drinks5index]));
            drinks5text.setTextColor(Color.BLACK);
            drinks5text2.setText(Integer.toString(marketarray[drinks5index]));
            drinks5text.setTextSize(14);
            LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(
                    ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);

            params.gravity = Gravity.CENTER;
            drinks5text.setLayoutParams(params);
        }
        if (index==drinks6index)
        { drinks6text.setText(Integer.toString(marketarray[drinks6index]));
            drinks6text.setTextColor(Color.BLACK);
            drinks6text2.setText(Integer.toString(marketarray[drinks6index]));
            drinks6text.setTextSize(14);
            LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(
                    ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);

            params.gravity = Gravity.CENTER;
            drinks6text.setLayoutParams(params);
        }

        if (index==desert1index)
        { desert1text.setText(Integer.toString(marketarray[desert1index]));
            desert1text.setTextColor(Color.BLACK);
            desert1text2.setText(Integer.toString(marketarray[desert1index]));
            desert1text.setTextSize(14);
            LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(
                    ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);

            params.gravity = Gravity.CENTER;
            desert1text.setLayoutParams(params);
        }

        if (index==desert2index)
        { desert2text.setText(Integer.toString(marketarray[desert2index]));
            desert2text.setTextColor(Color.BLACK);
            desert2text2.setText(Integer.toString(marketarray[desert2index]));
            desert2text.setTextSize(14);
            LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(
                    ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);

            params.gravity = Gravity.CENTER;
            desert2text.setLayoutParams(params);
        }

        if (index==desert3index)
        { desert3text.setText(Integer.toString(marketarray[desert3index]));
            desert3text.setTextColor(Color.BLACK);
            desert3text2.setText(Integer.toString(marketarray[desert3index]));
            desert3text.setTextSize(14);
            LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(
                    ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);

            params.gravity = Gravity.CENTER;
            desert3text.setLayoutParams(params);
        }

        if (index==desert4index)
        { desert4text.setText(Integer.toString(marketarray[desert4index]));
            desert4text.setTextColor(Color.BLACK);
            desert4text2.setText(Integer.toString(marketarray[desert4index]));
            desert4text.setTextSize(14);
            LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(
                    ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);

            params.gravity = Gravity.CENTER;
            desert4text.setLayoutParams(params);
        }

        if (index==desert5index)
        { desert5text.setText(Integer.toString(marketarray[desert5index]));
            desert5text.setTextColor(Color.BLACK);
            desert5text2.setText(Integer.toString(marketarray[desert5index]));
            desert5text.setTextSize(14);
            LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(
                    ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);

            params.gravity = Gravity.CENTER;
            desert5text.setLayoutParams(params);
        }

        if (index==desert6index)
        { desert6text.setText(Integer.toString(marketarray[desert6index]));
            desert6text.setTextColor(Color.BLACK);
            desert6text2.setText(Integer.toString(marketarray[desert6index]));
            desert6text.setTextSize(14);
            LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(
                    ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);

            params.gravity = Gravity.CENTER;
            desert6text.setLayoutParams(params);
        }



        if (index==greensoapindex)
        { greensoaptext.setTextSize(5 * density);
            greensoaptext.setText(Integer.toString(marketarray[greensoapindex]));
            greensoaptext.setTextColor(Color.BLACK);

            greensoaptext2.setText(Integer.toString(marketarray[greensoapindex]));

            LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(
                    ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);

            params.gravity = Gravity.CENTER;
            greensoaptext.setLayoutParams(params);
        }

        if (index==soap1index)
        {soap1text.setTextSize(5 * density);
            soap1text.setText(Integer.toString(marketarray[soap1index]));
            soap1text.setTextColor(Color.BLACK);

            soap1text2.setText(Integer.toString(marketarray[soap1index]));

            LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(
                    ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);

            params.gravity = Gravity.CENTER;
            soap1text.setLayoutParams(params);
        }
        if (index==soap2index)
        {soap2text.setTextSize(5 * density);
            soap2text.setText(Integer.toString(marketarray[soap2index]));
            soap2text.setTextColor(Color.BLACK);

            soap2text2.setText(Integer.toString(marketarray[soap2index]));

            LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(
                    ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);

            params.gravity = Gravity.CENTER;
            soap2text.setLayoutParams(params);
        }




        if (index==sleeppotionindex)
        { sleeppotiontext.setTextSize(5*density);
            sleeppotiontext.setText(Integer.toString(marketarray[sleeppotionindex]));
            sleeppotiontext.setTextColor(Color.BLACK);

            sleeppotiontext2.setText( Integer.toString(marketarray[sleeppotionindex]));

            LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(
                    ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);

            params.gravity = Gravity.CENTER;
            sleeppotiontext.setLayoutParams(params);
        }
        if (index==hungerpotionindex)
        { hungerpotiontext.setTextSize(5*density);
            hungerpotiontext.setText(Integer.toString(marketarray[hungerpotionindex]));
            hungerpotiontext.setTextColor(Color.BLACK);

            hungerpotiontext2.setText(Integer.toString(marketarray[hungerpotionindex]));

            LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(
                    ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);

            params.gravity = Gravity.CENTER;
            hungerpotiontext.setLayoutParams(params);
        }

        if (index==hygienepotionindex)
        { hygienepotiontext.setTextSize(5*density);
            hygienepotiontext.setText(Integer.toString(marketarray[hygienepotionindex]));
            hygienepotiontext.setTextColor(Color.BLACK);

            hygienepotiontext2.setText(Integer.toString(marketarray[hygienepotionindex]));

            LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(
                    ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);

            params.gravity = Gravity.CENTER;
            hygienepotiontext.setLayoutParams(params);
        }

        if (index==lovepotionindex)
        { lovepotiontext.setTextSize(5*density);
            lovepotiontext.setText(Integer.toString(marketarray[lovepotionindex]));
            lovepotiontext.setTextColor(Color.BLACK);

            lovepotiontext2.setText(Integer.toString(marketarray[lovepotionindex]));

            LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(
                    ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);

            params.gravity = Gravity.CENTER;
            lovepotiontext.setLayoutParams(params);
        }

        if (index==gamepotionindex)
        { gamepotiontext.setTextSize(5*density);
            gamepotiontext.setText(Integer.toString(marketarray[gamepotionindex]));
            gamepotiontext.setTextColor(Color.BLACK);

            gamepotiontext2.setText(Integer.toString(marketarray[gamepotionindex]));

            LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(
                    ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);

            params.gravity = Gravity.CENTER;
            gamepotiontext.setLayoutParams(params);
        }


        if (index==allinpotionindex)
        { allinpotiontext.setTextSize(5*density);
            allinpotiontext.setText(Integer.toString(marketarray[allinpotionindex]));
            allinpotiontext.setTextColor(Color.BLACK);

            allinpotiontext2.setText(Integer.toString(marketarray[allinpotionindex]));

            LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(
                    ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);

            params.gravity = Gravity.CENTER;
            allinpotiontext.setLayoutParams(params);
        }




        if (index==cellspongeindex)
        { cellspongetext.setTextSize(5*density);
            cellspongetext.setText("Cellulose: " + Integer.toString(marketarray[cellspongeindex]));
            cellspongetext.setTextColor(Color.BLACK);

            cellspongetext2.setText(Integer.toString(marketarray[cellspongeindex]));

        }

        if (index==darkspongeindex)
        { darkspongetext.setTextSize(5*density);
            darkspongetext.setText(Integer.toString(marketarray[darkspongeindex]));
            darkspongetext.setTextColor(Color.BLACK);

            darkspongetext2.setText(Integer.toString(marketarray[darkspongeindex]));

        }

        if (index==seaspongeindex)
        { seaspongetext.setTextSize(5*density);
            seaspongetext.setText(Integer.toString(marketarray[seaspongeindex]));
            seaspongetext.setTextColor(Color.BLACK);

            seaspongetext2.setText(Integer.toString(marketarray[seaspongeindex]));

        }



        if (index==frenchfriesindex)
        { frenchfriestext.setText( Integer.toString(marketarray[frenchfriesindex]));
            frenchfriestext.setTextColor(Color.BLACK);
            frenchfriestext2.setText(Integer.toString(marketarray[frenchfriesindex]));

            frenchfriestext.setTextSize(14);
            LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(
                    ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);

            params.gravity = Gravity.CENTER;
            frenchfriestext.setLayoutParams(params);


        }
        if (index==chickenlegindex)
        { chcikenlegtext.setText(Integer.toString(marketarray[chickenlegindex]));
            chcikenlegtext.setTextColor(Color.BLACK);
            chickenlegtext2.setText(Integer.toString(marketarray[chickenlegindex]));

            chcikenlegtext.setTextSize(14);
            LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(
                    ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);

            params.gravity = Gravity.CENTER;
            chcikenlegtext.setLayoutParams(params);



        }
        if (index==fishindex)
        { fishtext.setText(Integer.toString(marketarray[fishindex]));
            fishtext.setTextColor(Color.BLACK);
            fishtext2.setText(Integer.toString(marketarray[fishindex]));
            fishtext.setTextSize(14);
            LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(
                    ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);

            params.gravity = Gravity.CENTER;
            fishtext.setLayoutParams(params);
        }


        if (index==appleindex)
        { appletext.setText(Integer.toString(marketarray[appleindex]));
            appletext.setTextColor(Color.BLACK);
            appletext2.setText(Integer.toString(marketarray[appleindex]));
            appletext.setTextSize(14);
            LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(
                    ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);

            params.gravity = Gravity.CENTER;
            appletext.setLayoutParams(params);
        }


        if (index==bostonrollindex)
        { bostonrolltext.setText(Integer.toString(marketarray[bostonrollindex]));
            bostonrolltext.setTextColor(Color.BLACK);
            bostonrolltext2.setText("BOSTON ROLL:" + Integer.toString(marketarray[bostonrollindex]));
            bostonrolltext.setTextSize(14);
            LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(
                    ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);

            params.gravity = Gravity.CENTER;
            bostonrolltext.setLayoutParams(params);
        }

        if (index==carrotindex)
        { carrottext.setText(Integer.toString(marketarray[carrotindex]));
            carrottext.setTextColor(Color.BLACK);
            carrottext2.setText(Integer.toString(marketarray[carrotindex]));
            carrottext.setTextSize(14);
            LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(
                    ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);

            params.gravity = Gravity.CENTER;
            carrottext.setLayoutParams(params);
        }
        if (index==frenchtoastindex)
        { frenchtoasttext.setText(Integer.toString(marketarray[frenchtoastindex]));
            frenchtoasttext.setTextColor(Color.BLACK);
            frenchtoasttet2.setText(Integer.toString(marketarray[frenchtoastindex]));

            frenchtoasttext.setTextSize(14);
            LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(
                    ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);

            params.gravity = Gravity.CENTER;
            frenchtoasttext.setLayoutParams(params);


        }
        if (index==meatarmindex)
        { meatarmtext.setText(Integer.toString(marketarray[meatarmindex]));
            meatarmtext.setTextColor(Color.BLACK);
            meatarmtext2.setText(Integer.toString(marketarray[meatarmindex]));
            meatarmtext.setTextSize(14);
            LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(
                    ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);

            params.gravity = Gravity.CENTER;
            meatarmtext.setLayoutParams(params);
        }

        if (index==medisaladindex)
        { medisaladtext.setText(Integer.toString(marketarray[medisaladindex]));
            medisaladtext.setTextColor(Color.BLACK);
            medisaladtext2.setText(Integer.toString(marketarray[medisaladindex]));
            medisaladtext.setTextSize(14);
            LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(
                    ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);

            params.gravity = Gravity.CENTER;
            medisaladtext.setLayoutParams(params);
        }

        if (index==noodleindex)
        { noodletext.setText(Integer.toString(marketarray[noodleindex]));
            noodletext.setTextColor(Color.BLACK);
            noodletext2.setText(Integer.toString(marketarray[noodleindex]));
            noodletext.setTextSize(14);
            LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(
                    ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);

            params.gravity = Gravity.CENTER;
            noodletext.setLayoutParams(params);
        }
        if (index==mixedsaladindex)
        { mixedsaladtext.setText(Integer.toString(marketarray[mixedsaladindex]));
            mixedsaladtext.setTextColor(Color.BLACK);
            mixedsaladtext2.setText(Integer.toString(marketarray[mixedsaladindex]));
            mixedsaladtext.setTextSize(14);
            LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(
                    ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);

            params.gravity = Gravity.CENTER;
            mixedsaladtext.setLayoutParams(params);

        }

        if (index==onionringsindex)
        { onionringstext.setText(Integer.toString(marketarray[onionringsindex]));
            onionringstext.setTextColor(Color.BLACK);
            onionringstext2.setText(Integer.toString(marketarray[onionringsindex]));

            onionringstext.setTextSize(14);
            LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(
                    ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);

            params.gravity = Gravity.CENTER;
            onionringstext.setLayoutParams(params);

        }

        if (index==orangeindex)
        { orangetext.setText(Integer.toString(marketarray[orangeindex]));
            orangetext.setTextColor(Color.BLACK);
            orangetext2.setText(Integer.toString(marketarray[orangeindex]));

            orangetext.setTextSize(14);
            LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(
                    ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);

            params.gravity = Gravity.CENTER;
            orangetext.setLayoutParams(params);

        }

        if (index==porkindex)
        { porktext.setText(Integer.toString(marketarray[porkindex]));
            porktext.setTextColor(Color.BLACK);
            porktext2.setText(Integer.toString(marketarray[porkindex]));

            porktext.setTextSize(14);
            LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(
                    ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);

            params.gravity = Gravity.CENTER;
            porktext.setLayoutParams(params);


        }

        if (index==mixedrollindex)
        { mixedrolltext.setText( Integer.toString(marketarray[mixedrollindex]));
            mixedrolltext.setTextColor(Color.BLACK);
            mixedrolltext2.setText("MIXED ROLL:" + Integer.toString(marketarray[mixedrollindex]));

            mixedrolltext.setTextSize(14);
            LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(
                    ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);

            params.gravity = Gravity.CENTER;
            mixedrolltext.setLayoutParams(params);
        }

        if (index==salmonsushiindex)
        { salmonsushitext.setText( Integer.toString(marketarray[salmonsushiindex]));
            salmonsushitext.setTextColor(Color.BLACK);
            salmonsushitext2.setText("NIGIRI:" + Integer.toString(marketarray[salmonsushiindex]));

            salmonsushitext.setTextSize(14);
            LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(
                    ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);

            params.gravity = Gravity.CENTER;
            salmonsushitext.setLayoutParams(params);



        }

        if (index==soupindex)
        { souptext.setText(Integer.toString(marketarray[soupindex]));
            souptext.setTextColor(Color.BLACK);
            souptext2.setText(Integer.toString(marketarray[soupindex]));

            souptext.setTextSize(14);
            LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(
                    ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);

            params.gravity = Gravity.CENTER;
            souptext.setLayoutParams(params);


        }


        if (index==squidindex)
        { squidtext.setText(Integer.toString(marketarray[squidindex]));
            squidtext.setTextColor(Color.BLACK);
            squidtext2.setText("SQUID:" + Integer.toString(marketarray[squidindex]));

            squidtext.setTextSize(14);
            LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(
                    ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);

            params.gravity = Gravity.CENTER;
            squidtext.setLayoutParams(params);



        }


        if (index==cokeindex)
        { coketext.setText(Integer.toString(marketarray[cokeindex]));
            coketext.setTextColor(Color.BLACK);
            coketext2.setText(Integer.toString(marketarray[cokeindex]));

            coketext.setTextSize(14);
            LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(
                    ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);

            params.gravity = Gravity.CENTER;
            coketext.setLayoutParams(params);

        }


        if (index==brownieindex)
        { brownietext.setText(Integer.toString(marketarray[brownieindex]));
            brownietext.setTextColor(Color.BLACK);
            brownietext2.setText(Integer.toString(marketarray[brownieindex]));


            brownietext.setTextSize(14);
            LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(
                    ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);

            params.gravity = Gravity.CENTER;
            brownietext.setLayoutParams(params);


        }

        if (index==cheesecakeindex)
        { cheesecaketext.setText(Integer.toString(marketarray[cheesecakeindex]));
            cheesecaketext.setTextColor(Color.BLACK);
            cheesecaketext2.setText(Integer.toString(marketarray[cheesecakeindex]));

            cheesecaketext.setTextSize(14);
            LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(
                    ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);

            params.gravity = Gravity.CENTER;
            cheesecaketext.setLayoutParams(params);

        }

        if (index==cheeseindex)
        { cheesetext.setText(Integer.toString(marketarray[cheeseindex]));
            cheesetext.setTextColor(Color.BLACK);
            cheesetext2.setText(Integer.toString(marketarray[cheeseindex]));

            cheesetext.setTextSize(14);
            LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(
                    ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);

            params.gravity = Gravity.CENTER;
            cheesetext.setLayoutParams(params);


        }

        if (index==juiceindex)
        { juicetext.setText(Integer.toString(marketarray[juiceindex]));
            juicetext.setTextColor(Color.BLACK);
            juicetext2.setText(Integer.toString(marketarray[juiceindex]));

            juicetext.setTextSize(14);
            LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(
                    ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);

            params.gravity = Gravity.CENTER;
            juicetext.setLayoutParams(params);


        }



        //appleimg,bostonrollimg,carrotimg,frenchtoastimg,meatarmimg, medisaladimg,noodleimg,mixedsaladimg, onionringsv,orangeimg,porkimg,mixedrollimg, salmonsushiimg,soupimg,squidimg,cokeimg,brownieimg,cheesecakeimg,cheeseimg, juiceimg;
    }
/*

    void redface()

    {

        FrameLayout red1 = (FrameLayout) findViewById(R.id.redface1);
        FrameLayout red2 = (FrameLayout) findViewById(R.id.redface2);
        ImageView i1 = (ImageView) findViewById(R.id.imageView16);
        ImageView i2 = (ImageView) findViewById(R.id.imageView17);

        Bitmap bitmap= BitmapFactory.decodeResource(getResources(),
                R.mipmap.hearteffectpng);

        i1.setImageBitmap(bitmap);
        i1.setAlpha(0.1f);
        i2.setImageBitmap(bitmap);
        i2.setAlpha(0.1f);


        final float density1 = Resources.getSystem().getDisplayMetrics().density;
        ViewGroup.MarginLayoutParams gifmargin = new ViewGroup.MarginLayoutParams(red1.getLayoutParams());
        ViewGroup.MarginLayoutParams gifmargin2 = new ViewGroup.MarginLayoutParams(red1.getLayoutParams());

        gifmargin.setMargins((int)(pupilrightxstore-5*density1),(int) (pupilrighty1store+10*density1), 0, 0);
        gifmargin2.setMargins((int)(pupilleftxstore-5*density1),(int) (pupillefty1store+10*density1), 0, 0);

        FrameLayout.LayoutParams gifparams = new FrameLayout.LayoutParams(gifmargin);
        FrameLayout.LayoutParams gifparams2 = new FrameLayout.LayoutParams(gifmargin2);
        gifparams.height = (int) (40*density1) ;
        gifparams.width= (int) (40*density1);
        gifparams2.height = (int) (40*density1) ;
        gifparams2.width= (int) (40*density1);
        red1.setLayoutParams(gifparams);
        red1.setVisibility(View.VISIBLE);
        red2.setLayoutParams(gifparams2);
        red2.setVisibility(View.VISIBLE);

    }*/

    void dirt()


    {

        FrameLayout red1 = (FrameLayout) findViewById(R.id.redface1);
        FrameLayout red2 = (FrameLayout) findViewById(R.id.redface2);
        FrameLayout red3 = (FrameLayout) findViewById(R.id.redface3);
        FrameLayout red4 = (FrameLayout) findViewById(R.id.redface4);
        FrameLayout red5 = (FrameLayout) findViewById(R.id.redface5);
        FrameLayout red6 = (FrameLayout) findViewById(R.id.redface6);

        ImageView i1 = (ImageView) findViewById(R.id.imageView16);
        ImageView i2 = (ImageView) findViewById(R.id.imageView17);
        ImageView i3 = (ImageView) findViewById(R.id.imageViewredface3);
        ImageView i4 = (ImageView) findViewById(R.id.imageViewredface4);
        ImageView i5 = (ImageView) findViewById(R.id.imageViewredface5);
        ImageView i6 = (ImageView) findViewById(R.id.imageViewredface6);

        if(process[1]>=20 && process[1]<MAXDIRT) {

            Bitmap bitmap = BitmapFactory.decodeResource(getResources(), R.mipmap.dirt11);

            Bitmap bitmap2 = BitmapFactory.decodeResource(getResources(),
                    R.mipmap.mouthdirt1);

            i1.setImageBitmap(bitmap);
            i2.setImageBitmap(bitmap);
            i3.setImageBitmap(bitmap2);
            i4.setImageBitmap(bitmap2);
            i5.setImageBitmap(bitmap2);
            i6.setImageBitmap(bitmap2);

            red1.setVisibility(View.VISIBLE);
            red2.setVisibility(View.VISIBLE);
            red3.setVisibility(View.VISIBLE);
            red4.setVisibility(View.VISIBLE);
            red5.setVisibility(View.VISIBLE);
            red6.setVisibility(View.VISIBLE);

            //i2.setAlpha(0.1f);
        }
       else if(process[1]>=10 && process[1]<20) {
            Bitmap bitmap = BitmapFactory.decodeResource(getResources(), R.mipmap.dirt12,options);

            Bitmap bitmap2 = BitmapFactory.decodeResource(getResources(),
                    R.mipmap.mouthdirt2);

            i1.setImageBitmap(bitmap);
            i2.setImageBitmap(bitmap);
            i3.setImageBitmap(bitmap2);
            i4.setImageBitmap(bitmap2);
            i5.setImageBitmap(bitmap2);
            i6.setImageBitmap(bitmap2);

            red1.setVisibility(View.VISIBLE);
            red2.setVisibility(View.VISIBLE);
            red3.setVisibility(View.VISIBLE);
            red4.setVisibility(View.VISIBLE);
            red5.setVisibility(View.VISIBLE);
            red6.setVisibility(View.VISIBLE);
            //i2.setAlpha(0.1f);
        }
        else if(process[1]<10 ) {
            Bitmap bitmap = BitmapFactory.decodeResource(getResources(), R.mipmap.dirt13,options);

            Bitmap bitmap2 = BitmapFactory.decodeResource(getResources(),
                    R.mipmap.mouthdirt3,options);

            i1.setImageBitmap(bitmap);
            i2.setImageBitmap(bitmap);
            i3.setImageBitmap(bitmap2);
            i4.setImageBitmap(bitmap2);
            i5.setImageBitmap(bitmap2);
            i6.setImageBitmap(bitmap2);

            red1.setVisibility(View.VISIBLE);
            red2.setVisibility(View.VISIBLE);
            red3.setVisibility(View.VISIBLE);
            red4.setVisibility(View.VISIBLE);
            red5.setVisibility(View.VISIBLE);
            red6.setVisibility(View.VISIBLE);
            //i2.setAlpha(0.1f);
        }

        else {
            red1.setVisibility(View.INVISIBLE);
            red2.setVisibility(View.INVISIBLE);
            red3.setVisibility(View.INVISIBLE);
            red4.setVisibility(View.INVISIBLE);
            red5.setVisibility(View.INVISIBLE);
            red6.setVisibility(View.INVISIBLE);
        }




        final float density1 = Resources.getSystem().getDisplayMetrics().density;
        ViewGroup.MarginLayoutParams gifmargin = new ViewGroup.MarginLayoutParams(red1.getLayoutParams());
        ViewGroup.MarginLayoutParams gifmargin2 = new ViewGroup.MarginLayoutParams(red1.getLayoutParams());
        ViewGroup.MarginLayoutParams gifmargin3 = new ViewGroup.MarginLayoutParams(red3.getLayoutParams());
        ViewGroup.MarginLayoutParams gifmargin4 = new ViewGroup.MarginLayoutParams(red4.getLayoutParams());
        ViewGroup.MarginLayoutParams gifmargin5 = new ViewGroup.MarginLayoutParams(red3.getLayoutParams());
        ViewGroup.MarginLayoutParams gifmargin6 = new ViewGroup.MarginLayoutParams(red4.getLayoutParams());


        gifmargin.setMargins((int)(x3store-25*density1),(int) (y2store+10*density1), 0, 0);
        gifmargin2.setMargins((int)(x5store-25*density1),(int) (y3store+10*density1), 0, 0);
        gifmargin3.setMargins((int)(x6store-40*density1),(int) (y5store-5*density1), 0, 0);
        gifmargin4.setMargins((int)(x7store)+10*(int)density1,(int) (y5store-5*density1), 0, 0);
        gifmargin5.setMargins((int)(x6store+25*density1),(int) (y6store+8*density1), 0, 0);
        gifmargin6.setMargins((int)(x7store)+3*(int)density1,(int) (y5store+25*density1), 0, 0);


        FrameLayout.LayoutParams gifparams = new FrameLayout.LayoutParams(gifmargin);
        FrameLayout.LayoutParams gifparams2 = new FrameLayout.LayoutParams(gifmargin2);
        FrameLayout.LayoutParams gifparams3 = new FrameLayout.LayoutParams(gifmargin3);
        FrameLayout.LayoutParams gifparams4 = new FrameLayout.LayoutParams(gifmargin4);
        FrameLayout.LayoutParams gifparams5 = new FrameLayout.LayoutParams(gifmargin5);
        FrameLayout.LayoutParams gifparams6 = new FrameLayout.LayoutParams(gifmargin6);

        gifparams.height = (int) (80*density1) ;
        gifparams.width= (int) (80*density1);
        gifparams2.height = (int) (80*density1) ;
        gifparams2.width= (int) (80*density1);
        gifparams3.height = (int) (40*density1) ;
        gifparams3.width= (int) (40*density1);
        gifparams4.height = (int) (35*density1) ;
        gifparams4.width= (int) (35*density1);
        gifparams5.height = (int) (40*density1) ;
        gifparams5.width= (int) (40*density1);
        gifparams6.height = (int) (30*density1) ;
        gifparams6.width= (int) (30*density1);

        red1.setLayoutParams(gifparams);
        red2.setLayoutParams(gifparams2);
        red3.setLayoutParams(gifparams3);
        red4.setLayoutParams(gifparams4);
        red5.setLayoutParams(gifparams5);
        red6.setLayoutParams(gifparams6);
    }

    @Override
    public void onBackPressed() {
        //Display alert message when back button has been pressed
      //int state;
// If an interstitial is on screen, close it.

         //   super.onBackPressed();
        final Button watchvideo2 =(Button) findViewById(R.id.imageView35);
        final Button cancelcoinwarning =(Button) findViewById(R.id.imageView34);
        final RelativeLayout shopframe2 = (RelativeLayout) findViewById(R.id.market);
        final Button potionswarningbtn =(Button) findViewById(R.id.potionsbutton2);
        final ImageButton washbutton = (ImageButton) findViewById(R.id.imageView52);
        final ImageButton peebtn =  (ImageButton) findViewById(R.id.peefrm);
        final Button lamp1 = (Button) findViewById(R.id.imageView30);
        final Button lamp2 = (Button) findViewById(R.id.imageView31);
        final ImageView toiletsign = (ImageView) findViewById(R.id.imageView32);
        final TextView Modename = (TextView) findViewById(R.id.Modename);
        final RelativeLayout wariningbox = (RelativeLayout) findViewById(R.id.warningbox);
        final Button yesbutton = (Button) findViewById(R.id.button36);
        final Button nobutton = (Button) findViewById(R.id.button37);
        final  RelativeLayout mainmenulayout = (RelativeLayout ) findViewById(R.id.Mainmenulayout);
        final Button backtooption = (Button) findViewById(R.id.buttoncontinue);
        final RelativeLayout optlayout = (RelativeLayout) findViewById(R.id.Optionlayout);
        final RelativeLayout faqlayout = (RelativeLayout) findViewById(R.id.faqlayout);
        final Button faqbutton = (Button) findViewById(R.id.faqbutton);
        final RelativeLayout header = (RelativeLayout) findViewById(R.id.header);
        final Button Quitgame = (Button) findViewById(R.id.sharelinkbutton);
        final Button optionbtn = (Button ) findViewById(R.id.button33);
        final RelativeLayout optionlayout = (RelativeLayout) findViewById(R.id.OptionsLayout);
        final Button leaderboard3 = (Button) findViewById(R.id.buttongoogleleader);
        final Button signin3 = (Button) findViewById(R.id.buttongooglesign);

        Button cancelshop = (Button) findViewById(R.id.cancelimg);
        final RelativeLayout shopframe = (RelativeLayout) findViewById(R.id.market);
       // final HorizontalScrollView scroll = (HorizontalScrollView) findViewById(R.id.hor2);
        final ImageButton washhandbutton = (ImageButton) findViewById(R.id.imageView52);
        final Button shop = (Button) findViewById(R.id.shopframeimg);

        final LinearLayout segments = (LinearLayout) findViewById(R.id.segments);
        final Button canceltomain2 = (Button) findViewById(R.id.imageButton2);
        final FrameLayout mealslayout = (FrameLayout) findViewById(R.id.Mealsmain);
        final Button mealstofood = (Button) findViewById(R.id.mealstofood);
        final Button segmentkitchen = (Button) findViewById(R.id.button14);
        final Button segmenthygiene = (Button) findViewById(R.id.button15);
        final Button segmentbedroom = (Button) findViewById(R.id.button16);
        final Button segmentgameroom = (Button) findViewById(R.id.button17);
        final Button segmentwc = (Button) findViewById(R.id.button18);

        final TextView lovetext = (TextView) findViewById(R.id.editText8);

        final ImageButton setting = (ImageButton) findViewById(R.id.imageView26);
        final RelativeLayout wclayout = (RelativeLayout) findViewById(R.id.wclayout);
        final TextView sharettext = (TextView) findViewById(R.id.sharetext);
        final RelativeLayout likelayout = (RelativeLayout) findViewById(R.id.LikeLayout);
        final FrameLayout printscreen = (FrameLayout) findViewById(R.id.printscreenshow);

        final Button buycoingbutton = (Button) findViewById(R.id.Buycoinbutton);
        final ImageView main = (ImageView) findViewById(R.id.imageView);

        final FrameLayout sleeplayout = (FrameLayout) findViewById(R.id.sleeplayout);
        final LinearLayout lin1 = (LinearLayout) findViewById(R.id.linearLayout);
        final RelativeLayout lin2 = (RelativeLayout) findViewById(R.id.linearLayout3);
        final LinearLayout lin3 = (LinearLayout) findViewById(R.id.linearLayout6);
        final FrameLayout disableallchild = (FrameLayout) findViewById(R.id.draglayout);
        final FrameLayout disableallchild2option = (FrameLayout) findViewById(R.id.draglayout2);
        final TextView lin4 = (TextView) findViewById(R.id.name);
        final ImageView lin5 = (ImageView) findViewById(R.id.testImagebrain);
        final ImageView lin6 = (ImageView) findViewById(R.id.testImagebrain2);
        final TextView brain3 = (TextView) findViewById(R.id.textiq);
        final TextView lin7 = (TextView) findViewById(R.id.editText3);
        final TextView lin8 = (TextView) findViewById(R.id.editText4);
        final TextView lin9 = (TextView) findViewById(R.id.editText6);
        final TextView lin10 = (TextView) findViewById(R.id.editText7);
        final TextView lin11 = (TextView) findViewById(R.id.editText8);
        final CircularProgressBar lin12 = (CircularProgressBar) findViewById(R.id.circularprogressbar1);
        final CircularProgressBar lin13 = (CircularProgressBar) findViewById(R.id.circularprogressbar2);
        final CircularProgressBar lin14 = (CircularProgressBar) findViewById(R.id.circularprogressbar3);
        final CircularProgressBar lin15 = (CircularProgressBar) findViewById(R.id.circularprogressbarfour);
        final CircularProgressBar lin16 = (CircularProgressBar) findViewById(R.id.circularprogressbar6);

        final Button lin17 = ( Button) findViewById(R.id.buttonoperation);
        final Button lin18 = ( Button) findViewById(R.id.colordeception);
        final Button lin19 = ( Button) findViewById(R.id.simpilictyicon);
        final Button lin20 = ( Button) findViewById(R.id.memorygame);
        final Button lin21 = ( Button) findViewById(R.id.calc);
        final Button lin22 = ( Button) findViewById(R.id.colorpick);
        final RelativeLayout lin23= (RelativeLayout) findViewById(R.id.circle1);
        final RelativeLayout lin24= (RelativeLayout) findViewById(R.id.circle2);
        final RelativeLayout lin25= (RelativeLayout) findViewById(R.id.circle3);
        final RelativeLayout lin26= (RelativeLayout) findViewById(R.id.circle4);
        final RelativeLayout lin27= (RelativeLayout) findViewById(R.id.circle5);
        final ImageView lin28 = (ImageView) findViewById(R.id.testImagecoin);
        final RelativeLayout foodmenulayout = (RelativeLayout) findViewById(R.id.Foodmenu);
        //  final ImageButton foodmenu = (ImageButton) findViewById(R.id.imageButton30);
        //  final ImageButton mealsmenu = (ImageButton) findViewById(R.id.fastfoodbutton);
        final ImageButton meals = (ImageButton) findViewById(R.id.mealsbutton);
        final TextView Menutext = (TextView) findViewById(R.id.textView30);

        final ImageView coinimage = (ImageView) findViewById(R.id.testImagecoin);

      //  final ImageView  = (ImageView) findViewById(R.id.buttonsoup);

        final Button sortingbtn = (Button) findViewById(R.id.calc);
        final Button opgamebtn = (Button) findViewById(R.id.buttonoperation);
        final Button colorbtn = (Button) findViewById(R.id.colordeception);
        final Button simplicitybtn = (Button) findViewById(R.id.simpilictyicon);
        final Button memorybtn = (Button) findViewById(R.id.memorygame);
        final Button colorpickbtn = (Button) findViewById(R.id.colorpick);

        final Button share = (Button) findViewById(R.id.imageButtonshare);
        final FrameLayout printscreenlayout = (FrameLayout) findViewById(R.id.printscreenshow);
        final ImageView printscreenimage = (ImageView) findViewById(R.id.printimage);
        final RelativeLayout printscreenlayout2 = (RelativeLayout) findViewById(R.id.printscreenshow1);
        final Button cancelbutton = (Button) findViewById(R.id.button7);
        final RelativeLayout coinlayout = (RelativeLayout) findViewById(R.id.coinlayout);
        final ImageButton coinvideoimg = (ImageButton) findViewById(R.id.advideocoin);
        final ImageButton coin1img = (ImageButton) findViewById(R.id.coin1img);
        final ImageButton coin2img = (ImageButton) findViewById(R.id.coin2img);

        final ImageButton breakfastmenu = (ImageButton) findViewById(R.id.breakfastbutton);
        final ImageButton startersmenu = (ImageButton) findViewById(R.id.appetizersButton);
        final ImageButton veggiesmenu = (ImageButton) findViewById(R.id.veggiesButton);
        final ImageButton fruitsmenu = (ImageButton) findViewById(R.id.fruitsbutton);
        final ImageButton desertsmenumenu = (ImageButton) findViewById(R.id.desertsbutton);
        final ImageButton drinksmenu = (ImageButton) findViewById(R.id.drinkbutton);
        final ImageButton regionalmenu = (ImageButton) findViewById(R.id.regionalbutton);
        final ImageButton cleaningmenu = (ImageButton) findViewById(R.id.cleaningbutton);
        final ImageButton potionsmenu = (ImageButton) findViewById(R.id.potionsbutton);


        final RelativeLayout eyebandrelative = (RelativeLayout) findViewById(R.id.eyebandrelative);

        //  final FrameLayout fishmenulayout = (FrameLayout) findViewById(R.id.Fishmenu);
       // final FrameLayout sushimenulayout = (FrameLayout) findViewById(R.id.sushimenu);
        //final FrameLayout pastamenulayout = (FrameLayout) findViewById(R.id.pastamenu);
        //final FrameLayout pizzmenulayout = (FrameLayout) findViewById(R.id.pizzamenu);
        //final FrameLayout breakfastmenulayout = (FrameLayout) findViewById(R.id.breakfast);
        //final FrameLayout startersmenulayout = (FrameLayout) findViewById(R.id.startersmenu);
        final FrameLayout veggiesmenulayout = (FrameLayout) findViewById(R.id.veggiesmenu);
        final FrameLayout fruitsmenulayout = (FrameLayout) findViewById(R.id.fruitmenu);
        final FrameLayout desertsmenumenulayut = (FrameLayout) findViewById(R.id.desertmenu);
        final FrameLayout drinksmenulayout = (FrameLayout) findViewById(R.id.drinksmenu);
        final FrameLayout regionalmenulayout = (FrameLayout) findViewById(R.id.regionalmenu);
        final FrameLayout cleaninglayout = (FrameLayout) findViewById(R.id.Cleaninglayout);
        final FrameLayout potionslayout = (FrameLayout) findViewById(R.id.potionslayout);
        final Button canceltomain = (Button) findViewById(R.id.canceltomain);
        final RelativeLayout headermenu = (RelativeLayout) findViewById(R.id.Heading);

        final TextView meattext2 = (TextView) findViewById(R.id.tbonetext);
        //button_sbm = (ImageView) findViewById(R.id.button);
        button_sbm2 = (ImageButton) findViewById(R.id.button2);
        button_sbm3 = (ImageButton) findViewById(R.id.button3);
        button_sbm4 = (Button) findViewById(R.id.button4);


       if (STATE == MAINSTATE) {
           moveTaskToBack(true);
           quitgame();

       }

       else if (STATE == OPTIONEXIT) {
           STATE = MENU;
           if(!mutestate[0])
               soundPool.play(soundID, volume, volume, 1, 0, 1f);
           optlayout.setVisibility(View.INVISIBLE);
           mainmenulayout.setVisibility(View.VISIBLE);
           faqlayout.setVisibility(View.INVISIBLE);
           //header.setVisibility(View.INVISIBLE);
       }
       else if (STATE == MENU)
       {
           if (!coinbackpressflag) {

           }

        else{
            STATE = MARKETEXIT;

            if (!mutestate[0])
                soundPool.play(soundID, volume, volume, 1, 0, 1f);


            optionsound = false;

            if (optionaudio.isPlaying()) {
                optionaudio.pause();
            }
            shopframe2.setVisibility(View.VISIBLE);
            disableallchild2option.setVisibility(View.INVISIBLE);
            main.setEnabled(false);
            //segments.setEnabled(false);
            //meattext2.setText("Meat:" + Integer.toString(marketarray[meatindex]));
            //mainmenuframe.setVisibility(View.VISIBLE);
            //   fastfoodframe.setVisibility(View.INVISIBLE);

            //    mAdView.setVisibility(View.VISIBLE);
            optionlayout.setVisibility(View.INVISIBLE);
            coinlayout.setVisibility(View.INVISIBLE);
            STATE = MARKETEXIT;
            potionslayout.setVisibility(View.INVISIBLE);
            foodmenulayout.setVisibility(View.VISIBLE);
            share.setVisibility(View.INVISIBLE);
            //segments.setVisibility(View.INVISIBLE);
            Drawable x = getResources().getDrawable(R.mipmap.sborder2);
            headermenu.setBackground(x);
            buycoingbutton.setBackground(x);
            if (gamelang == ENGLISH) Menutext.setText("MARKET");
            else if (gamelang == TURKISH) Menutext.setText("PAZAR");
            else if (gamelang == FRENCH) Menutext.setText("MARCHÉ");
            else if (gamelang == SPANISH) Menutext.setText("MERCADO");
            else if (gamelang == RUSSIAN) Menutext.setText("РЫНОК");
            else if (gamelang == CHINESE) Menutext.setText("市場");
            else if (gamelang == JAPANESE) Menutext.setText("市場");
            else if (gamelang == PORTUGUESE) Menutext.setText("MERCADO");
            else Menutext.setText("MARKET");
            STATE = MARKETEXIT;
            segmentkitchen.setEnabled(false);
            sleeplayout.setEnabled(false);
            wclayout.setEnabled(false);
            segmenthygiene.setEnabled(false);
            segmentbedroom.setEnabled(false);
            segmentgameroom.setEnabled(false);
            peebtn.setEnabled(false);
            button_sbm3.setEnabled(false);
            washhandbutton.setEnabled(false);
            button_sbm4.setEnabled(false);
            segmentwc.setEnabled(false);


            optionsound = false;

            if (optionaudio.isPlaying()) {
                optionaudio.pause();
            }

            disableallchild2option.setVisibility(View.INVISIBLE);
            main.setEnabled(false);
            //segments.setEnabled(false);
            //meattext2.setText("Meat:" + Integer.toString(marketarray[meatindex]));
            //mainmenuframe.setVisibility(View.VISIBLE);
            //   fastfoodframe.setVisibility(View.INVISIBLE);

            // mAdView.setVisibility(View.VISIBLE);
            optionlayout.setVisibility(View.INVISIBLE);
            coinlayout.setVisibility(View.INVISIBLE);
            STATE = MARKETEXIT;
            potionslayout.setVisibility(View.INVISIBLE);
            foodmenulayout.setVisibility(View.VISIBLE);
            //meattext2.setText("Meat:" + Integer.toString(marketarray[meatindex]));
            // mainmenuframe.setVisibility(View.INVISIBLE);
            //  fastfoodframe.setVisibility(View.INVISIBLE);
            optionlayout.setVisibility(View.INVISIBLE);
            veggiesmenulayout.setVisibility(View.INVISIBLE);
            eyebandrelative.setVisibility(View.INVISIBLE);
            fruitsmenulayout.setVisibility(View.INVISIBLE);
            regionalmenulayout.setVisibility(View.INVISIBLE);
            desertsmenumenulayut.setVisibility(View.INVISIBLE);
            drinksmenulayout.setVisibility(View.INVISIBLE);
            cleaninglayout.setVisibility(View.INVISIBLE);
            potionslayout.setVisibility(View.INVISIBLE);

            desertsmenumenulayut.setVisibility(View.INVISIBLE);

            veggiesmenulayout.setVisibility(View.INVISIBLE);

            fruitsmenulayout.setVisibility(View.INVISIBLE);
            regionalmenulayout.setVisibility(View.INVISIBLE);
            drinksmenulayout.setVisibility(View.INVISIBLE);
            coinlayout.setVisibility(View.INVISIBLE);


            foodmenulayout.setVisibility(View.VISIBLE);
            share.setVisibility(View.INVISIBLE);
            mealslayout.setVisibility(View.INVISIBLE);

            headermenu.setBackground(x);
            buycoingbutton.setBackground(x);
            STATE = MARKETEXIT;
            if (gamelang == ENGLISH) Menutext.setText("MARKET");
            else if (gamelang == TURKISH) Menutext.setText("PAZAR");
            else if (gamelang == FRENCH) Menutext.setText("MARCHÉ");
            else if (gamelang == SPANISH) Menutext.setText("MERCADO");
            else if (gamelang == RUSSIAN) Menutext.setText("РЫНОК");
            else if (gamelang == CHINESE) Menutext.setText("市場");
            else if (gamelang == JAPANESE) Menutext.setText("市場");
            else if (gamelang == PORTUGUESE) Menutext.setText("MERCADO");
            else Menutext.setText("MARKET");
        }
           //segments.setVisibility(View.INVISIBLE);

           // canceltomain.set

       }

        else if (STATE == MARKETEXIT)
       {

           if(!mutestate[0])
               soundPool.play(soundID, volume, volume, 1, 0, 1f);
           if (coinbackpressflag) {
           STATE = MAINSTATE;





           main.setEnabled(true);
           shopframe.setVisibility(View.INVISIBLE);
           //mainmenuframe.setVisibility(View.VISIBLE);
           //   fastfoodframe.setVisibility(View.INVISIBLE);
           foodmenulayout.setVisibility(View.INVISIBLE);
           mealslayout.setVisibility(View.INVISIBLE);
           coinlayout.setVisibility(View.INVISIBLE);
           coinimage.setVisibility(View.VISIBLE);
           share.setVisibility(View.VISIBLE);
           disableallchild2option.setVisibility(View.INVISIBLE);
           segments.setVisibility(View.VISIBLE);
           //  setting.setVisibility(View.VISIBLE);


           shop.setVisibility(View.VISIBLE);

           printscreenlayout2.setVisibility(View.INVISIBLE);

           share.setVisibility(View.VISIBLE);
           buycoingbutton.setVisibility(View.VISIBLE);
           //  fastfoodframe.setVisibility(View.INVISIBLE);
           mealslayout.setVisibility(View.INVISIBLE);
           foodmenulayout.setVisibility(View.INVISIBLE);
           canceltomain2.setVisibility(View.INVISIBLE);
           mealstofood.setVisibility(View.INVISIBLE);
           cleaninglayout.setVisibility(View.INVISIBLE);
           potionslayout.setVisibility(View.INVISIBLE);

           desertsmenumenulayut.setVisibility(View.INVISIBLE);

           veggiesmenulayout.setVisibility(View.INVISIBLE);
           eyebandrelative.setVisibility(View.INVISIBLE);

           fruitsmenulayout.setVisibility(View.INVISIBLE);
           regionalmenulayout.setVisibility(View.INVISIBLE);
           drinksmenulayout.setVisibility(View.INVISIBLE);
           canceltomain.setVisibility(View.INVISIBLE);
           canceltomain2.setVisibility(View.INVISIBLE);





              sleeplayout.setEnabled(true);
              wclayout.setEnabled(true);
              segmentkitchen.setEnabled(true);
              segmenthygiene.setEnabled(true);
              segmentbedroom.setEnabled(true);
              segmentgameroom.setEnabled(true);
              segmentwc.setEnabled(true);
              peebtn.setEnabled(true);
              button_sbm3.setEnabled(true);
              washhandbutton.setEnabled(true);
              button_sbm4.setEnabled(true);
              lin1.setEnabled(true);
              lin2.setEnabled(true);
              lin3.setEnabled(true);
              lin4.setEnabled(true);
              lin5.setEnabled(true);
              brain3.setEnabled(true);
              lin6.setEnabled(true);
              lin7.setEnabled(true);
              lin8.setEnabled(true);
              lin9.setEnabled(true);
              lin10.setEnabled(true);
              lin11.setEnabled(true);
              lin12.setEnabled(true);
              lin13.setEnabled(true);
              lin14.setEnabled(true);
              lin15.setEnabled(true);
              lin16.setEnabled(true);
              lin17.setEnabled(true);
              lin18.setEnabled(true);
              lin19.setEnabled(true);
              lin20.setEnabled(true);
              lin21.setEnabled(true);
              lin22.setEnabled(true);
              lin23.setEnabled(true);
              lin24.setEnabled(true);
              lin25.setEnabled(true);
              lin26.setEnabled(true);
              lin27.setEnabled(true);
              lin28.setEnabled(true);
              shop.setEnabled(true);
          }

           else {


          }

       }

        else {

           super.onBackPressed();

       }



    }



    void fireworks(){

        final FrameLayout disableallchild = (FrameLayout) findViewById(R.id.draglayout);
        final MediaPlayer bubble = MediaPlayer.create(getApplicationContext(), R.raw.iqlevel);
        bubble.start();
        final LayoutTransition transitioner = new LayoutTransition();
        final FrameLayout uponeanimfrm = ( FrameLayout) findViewById(R.id.plusoneanim);
        final GifView plusonegif = (GifView) findViewById(R.id.plusonegif);
        final RelativeLayout coinwinlayout = ( RelativeLayout) findViewById(R.id.iquplevel);

        Bundle params = new Bundle();
        params.putString("image_name", "iqlevelup");
        params.putString("full_text", "iqlevelup");
        mFirebaseAnalytics.logEvent("iqlevelup", params);


        final RelativeLayout iquplevel = (RelativeLayout) findViewById(R.id.iquplevel);
final TextView cointext = (TextView) findViewById(R.id.uplevelcointext);

        final ImageView imagebrain = (ImageView) findViewById(R.id.testImagebrain);
        final TextView textiq = (TextView) findViewById(R.id.textiq);

        final GifView fireworks = (GifView) findViewById(R.id.gifiqincrease);
        final FrameLayout fireworksframe = (FrameLayout) findViewById(R.id.iqincrease);
        final GifView fireworks2 = (GifView) findViewById(R.id.gifiqincrease2);
        final FrameLayout fireworksframe2 = (FrameLayout) findViewById(R.id.iqincrease2);

        fireworks.setVisibility(View.VISIBLE);
        fireworks2.setVisibility(View.VISIBLE);
        iquplevel.setVisibility(View.VISIBLE);
        disableallchild.setVisibility(View.VISIBLE);
        final Animation shake = AnimationUtils.loadAnimation(this, R.anim.lefttoright);
        final MediaPlayer clickaudio2 = MediaPlayer.create(getApplicationContext(), R.raw.popupsound);
        if(!mutestate[0]) {
            clickaudio2.start();
            clickaudio2.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                public void onCompletion(MediaPlayer mp) {
                    clickaudio2.release();

                }

                ;
            });
        }
        shake.setDuration(SLIDEANIMDUR);
        iquplevel.setAnimation(shake);

        //plusonegif.setVisibility(View.VISIBLE);
        uponeanimfrm.setVisibility(View.VISIBLE);
        //imagebrain.setVisibility(View.INVISIBLE);
        textiq.setVisibility(View.INVISIBLE);
       // cointext.setText(Integer.toString(coin[0]));
        final float density1 = Resources.getSystem().getDisplayMetrics().density;

        ViewGroup.MarginLayoutParams lovemargin2 = new ViewGroup.MarginLayoutParams(fireworksframe.getLayoutParams());
        lovemargin2.setMargins(x8store - ((int)(density1*20)),y1store-((int)(density1*75)), 0, 0);
        FrameLayout.LayoutParams vp =  new FrameLayout.LayoutParams(lovemargin2);
        vp.height=(int)(density1*180);
        vp.width=(int)(density1*240);
        fireworksframe.setLayoutParams(vp);

        fireworks.speed=1;
        fireworks.loadGIFResource(this, R.mipmap.fireworks);


       /* ViewGroup.MarginLayoutParams onemargin = new ViewGroup.MarginLayoutParams(uponeanimfrm.getLayoutParams());
        onemargin.setMargins(0,0, 0, 0);
        FrameLayout.LayoutParams vpone =  new FrameLayout.LayoutParams(onemargin);
        vpone.height=120*(int)density1;;
        vpone.width=160*(int)density1;
        plusonegif.setLayoutParams(vpone);

        plusonegif.speed=0.4;
        plusonegif.loadGIFResource(this, R.mipmap.plusonegif);*/



        ViewGroup.MarginLayoutParams lovemargin3 = new ViewGroup.MarginLayoutParams(fireworksframe2.getLayoutParams());
        lovemargin3.setMargins(x1store, y7store - ((int)(density1*75)), 0, 0);
        FrameLayout.LayoutParams vp2 =  new FrameLayout.LayoutParams(lovemargin3);
        vp2.height=(int)(density1*180);
        vp2.width=(int)(density1*240);
        fireworksframe2.setLayoutParams(vp2);

        fireworks2.speed=1;
        fireworks2.loadGIFResource(this, R.mipmap.fireworks);



        Animation fadeIn = new AlphaAnimation(0, 1);
        fadeIn.setInterpolator(new DecelerateInterpolator()); //add this
        fadeIn.setDuration(1000);

        Animation fadeOut = new AlphaAnimation(1, 0);
        fadeOut.setInterpolator(new AccelerateInterpolator()); //and this
        fadeOut.setStartOffset(1000);
        fadeOut.setDuration(6000);

        AnimationSet animation = new AnimationSet(false); //change to false
        animation.addAnimation(fadeIn);
        animation.addAnimation(fadeOut);
        //iquplevel.setAnimation(animation);

        //imagebrain.setVisibility(View.INVISIBLE);
        //textiq.setVisibility(View.INVISIBLE);

/*
        new CountDownTimer(1500, 100) {
            public void onTick(long milsec) {

            }

            public void onFinish() {
                if(notification==true)


                {

                    if (vibration==true & mutestate[0] ==false) showNotificationiq();
                    else if (vibration==false & mutestate[0] ==false) showNotificationiqnovibs();
                    else if (vibration==false & mutestate[0] ==true) showNotificationiqnovibsnosound();
                    else if (vibration==true & mutestate[0] ==true) showNotificationiqnosound();

                }




            }
        }.start();
*/


        new CountDownTimer(5000, 1000) {


            public void onTick(long milsec) {



                // love.speed = 2;
                //love.loadGIFResource(x, R.mipmap.heart12);


            }

            public void onFinish() {

                imagebrain.setVisibility(View.VISIBLE);
                textiq.setVisibility(View.VISIBLE);
                fireworks.setVisibility(View.INVISIBLE);
                fireworks2.setVisibility(View.INVISIBLE);
               // iquplevel.setVisibility(View.INVISIBLE);
                plusonegif.setVisibility(View.INVISIBLE);
                uponeanimfrm.setVisibility(View.INVISIBLE);
                ValueAnimator animator = new ValueAnimator();
                animator.setObjectValues(iq-1, iq);
                animator.setDuration(500);
                animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {
                    public void onAnimationUpdate(ValueAnimator animation) {
                        textiq.setText("" + (int) animation.getAnimatedValue());


                    }

                });
                animator.start();






            }
        }.start();

    }




    void pluscoin2(int x)

    {




        final FrameLayout disableallchild = (FrameLayout) findViewById(R.id.draglayout);
        final RelativeLayout pluscoinlayout = ( RelativeLayout) findViewById(R.id.pluscoinlayout);
        final int y = x;
        final TextView textcoin = (TextView) findViewById(R.id.textcoin);
        coin[0] = coin[0]+10;
        disableallchild.setVisibility(View.VISIBLE);
        pluscoinamount=y;
        // if(!mutestate[0]) coinbelow10.start();

        //textcoin.setVisibility(View.INVISIBLE);
        TextView tcoinamount = (TextView) findViewById(R.id.coinamount);

        SharedPreferences pref;
        pref = getSharedPreferences("info", MODE_PRIVATE);
        final SharedPreferences.Editor editor = pref.edit();
        editor.putInt("coin",coin[0]);
        editor.commit();

        final Context con =this;

        tcoinamount.setText("+" +Integer.toString(x));


        new CountDownTimer(1500, 100) {


            public void onTick(long milsec) {



            }

            public void onFinish() {

                //coinflip();
                pluscoinlayout.setVisibility(View.VISIBLE);
                final Animation shake = AnimationUtils.loadAnimation(con, R.anim.lefttoright);
                disableallchild.setVisibility(View.VISIBLE);
                final MediaPlayer clickaudio2 = MediaPlayer.create(getApplicationContext(), R.raw.popupsound);
                if(!mutestate[0]) {
                    clickaudio2.start();
                    clickaudio2.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                        public void onCompletion(MediaPlayer mp) {
                            clickaudio2.release();

                        }

                        ;
                    });
                }

                shake.setDuration(SLIDEANIMDUR);
                pluscoinlayout.setAnimation(shake);
            }
        }.start();



    }


    void pluscoin(int x)

 {




    final FrameLayout disableallchild = (FrameLayout) findViewById(R.id.draglayout);
     final RelativeLayout pluscoinlayout = ( RelativeLayout) findViewById(R.id.pluscoinlayout);
     final int y = x;
     final TextView textcoin = (TextView) findViewById(R.id.textcoin);
    coin[0] = coin[0]+10;

     pluscoinamount=y;
    // if(!mutestate[0]) coinbelow10.start();

     //textcoin.setVisibility(View.INVISIBLE);
     TextView tcoinamount = (TextView) findViewById(R.id.coinamount);




   final Context con =this;

    tcoinamount.setText("+" +Integer.toString(x));


     new CountDownTimer(1500, 100) {


         public void onTick(long milsec) {



         }

         public void onFinish() {

             coinflip();
             pluscoinlayout.setVisibility(View.VISIBLE);
             final Animation shake = AnimationUtils.loadAnimation(con, R.anim.lefttoright);
             coinbackpressflag = false;
             disableallchild.setVisibility(View.VISIBLE);
             final MediaPlayer clickaudio2 = MediaPlayer.create(getApplicationContext(), R.raw.popupsound);
             if(!mutestate[0]) {
                 clickaudio2.start();
                 clickaudio2.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                     public void onCompletion(MediaPlayer mp) {
                         clickaudio2.release();

                     }

                     ;
                 });
             }

             shake.setDuration(SLIDEANIMDUR);
             pluscoinlayout.setAnimation(shake);
         }
     }.start();




    /* new CountDownTimer(3000, 1000) {


         public void onTick(long milsec) {

             final MediaPlayer clickaudio2 = MediaPlayer.create(getApplicationContext(), R.raw.coinbelow10);
             if(!mutestate[0]) {
                 clickaudio2.start();
                 clickaudio2.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                     public void onCompletion(MediaPlayer mp) {
                         clickaudio2.release();

                     }

                     ;
                 });
             }

         }

         public void onFinish() {

             textcoin.setVisibility(View.VISIBLE);
             ValueAnimator animator = new ValueAnimator();
             animator.setObjectValues(coin[0]-y, coin[0]);
             animator.setDuration(500);
             animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {
                 public void onAnimationUpdate(ValueAnimator animation) {
                     textcoin.setText("" + (int) animation.getAnimatedValue());


                 }

             });
             animator.start();


         }
     }.start();*/

 }


    void plusonelife()

    {
        final FrameLayout disableallchild = (FrameLayout) findViewById(R.id.draglayout);
        final RelativeLayout plusoneliferel = (RelativeLayout) findViewById(R.id.plusonelifelayout);


        final Animation shake = AnimationUtils.loadAnimation(this, R.anim.lefttoright);

      //  final MediaPlayer clickaudio2 = MediaPlayer.create(getApplicationContext(), R.raw.iqlevel);

        disableallchild.setVisibility(View.VISIBLE);

              /*  if(!mutestate[0]) {
                    clickaudio2.start();
                    clickaudio2.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                        public void onCompletion(MediaPlayer mp) {
                            clickaudio2.release();

                        }

                        ;
                    });
                }*/
                plusoneliferel.setVisibility(View.VISIBLE);
                pluscoinlayout3();
                shake.setDuration(SLIDEANIMDUR);
                disableallchild.setVisibility(View.VISIBLE);
                plusoneliferel.setAnimation(shake);
                mobInterstitial2.load();
            //    AdColony.requestInterstitial( ZONE_ID, listener, ad_options );


    }



    void pluscoinaward(int x)

    {
        final FrameLayout disableallchild = (FrameLayout) findViewById(R.id.draglayout);
        final MediaPlayer coinbelow10 = MediaPlayer.create(getApplicationContext(), R.raw.coinbelow10);
        final MediaPlayer coinabove10 = MediaPlayer.create(getApplicationContext(), R.raw.coinabove10);
        final RelativeLayout pluscoinlayout = ( RelativeLayout) findViewById(R.id.pluscoinlayout2);
        final int y = x;
        final TextView textcoin = (TextView) findViewById(R.id.textcoin);
        coin[0] = coin[0]+x;


        if(x>10)  {
            final MediaPlayer clickaudio = MediaPlayer.create(getApplicationContext(), R.raw.coinabove10);
            if(!mutestate[0]) {
                clickaudio.start();
                clickaudio.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                    public void onCompletion(MediaPlayer mp) {
                        clickaudio.release();

                    }

                    ;
                });
            }
        }
        else {
            if (!mutestate[0]) soundPool6.play(soundID6, volume, volume, 1, 0, 1f);
        }
        coinflip();
        textcoin.setVisibility(View.INVISIBLE);


        new CountDownTimer(3000, 1000) {


            public void onTick(long milsec) {

            }

            public void onFinish() {

                textcoin.setVisibility(View.VISIBLE);
                ValueAnimator animator = new ValueAnimator();
                animator.setObjectValues(coin[0]-y, coin[0]);
                animator.setDuration(500);
                animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {
                    public void onAnimationUpdate(ValueAnimator animation) {
                        textcoin.setText("" + (int) animation.getAnimatedValue());


                    }

                });
                animator.start();

            }
        }.start();

     /*   SharedPreferences pref;
        pref = getSharedPreferences("info", MODE_PRIVATE);
        final SharedPreferences.Editor editor = pref.edit();
        editor.putInt("coin",coin[0]);
        editor.commit();*/

    }




void bubble(float x,float y){

   // final MediaPlayer bubble = MediaPlayer.create(getApplicationContext(), R.raw.bubbles);
   // bubble.start();

    if (!mutestate[0]) soundPoolbubble.play(soundID8, volume, volume, 1, 0, 1f);
   /* final MediaPlayer clickaudio = MediaPlayer.create(getApplicationContext(), R.raw.bubbles);
    if(!mutestate[0]) {
        clickaudio.start();
        clickaudio.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
            public void onCompletion(MediaPlayer mp) {
                mp.release();

            }

            ;
        });
    }*/


    Bundle params = new Bundle();
    params.putString("image_name", "bubble");
    params.putString("full_text", "bubble");
    mFirebaseAnalytics.logEvent("bubble", params);


    final GifView love = (GifView) findViewById(R.id.bubbleview);
    final FrameLayout flove = (FrameLayout) findViewById(R.id.bubblegiflayout);
    // final FrameLayout flove = new FrameLayout(x);
    final FrameLayout grd = (FrameLayout) findViewById(R.id.yigit);
    final CircularProgressBar c2 = (CircularProgressBar) findViewById(R.id.circularprogressbar2);

    //bubbleincrement(c2, process[1], process[1] + 15, 2);


    //final GifView love;
    final float density1 = Resources.getSystem().getDisplayMetrics().density;
    //final  GifView imageView = new GifView(this);
    final ImageView imageView = new ImageView(this);
    final ImageView imageView2 = new ImageView(this);
    final ImageView imageView3 = new ImageView(this);





    ViewGroup.MarginLayoutParams lovemargin2 = new ViewGroup.MarginLayoutParams(flove.getLayoutParams());
    lovemargin2.setMargins((int) x-(50),(int) (y-280)-100, 0, 0);
    FrameLayout.LayoutParams vp =  new FrameLayout.LayoutParams(lovemargin2);
    vp.height=200;
    vp.width=200;
    imageView.setLayoutParams(vp);

    ViewGroup.MarginLayoutParams lovemargin3 = new ViewGroup.MarginLayoutParams(flove.getLayoutParams());
    lovemargin2.setMargins((int) x-(40),(int) (y-280)-100, 0, 0);
    FrameLayout.LayoutParams vp2 =  new FrameLayout.LayoutParams(lovemargin3);
    vp2.height=200;
    vp2.width=200;
    imageView2.setLayoutParams(vp2);

    ViewGroup.MarginLayoutParams lovemargin4 = new ViewGroup.MarginLayoutParams(flove.getLayoutParams());
    lovemargin2.setMargins((int) x-(20),(int) (y-280)-100, 0, 0);
    FrameLayout.LayoutParams vp3 =  new FrameLayout.LayoutParams(lovemargin4);
    vp3.height=200;
    vp3.width=200;
    imageView3.setLayoutParams(vp3);





    //imageView.speed= 2;
    //imageView.loadGIFResource(x,R.mipmap.heart12);
    //grd.addView(imageView);

    flove.setVisibility(View.VISIBLE);
    ViewGroup.MarginLayoutParams lovemargin = new ViewGroup.MarginLayoutParams(flove.getLayoutParams());
    lovemargin.setMargins((int) x-(50),(int) (y-280)-100, 0, 0);;
    FrameLayout.LayoutParams loveparams = new FrameLayout.LayoutParams(lovemargin);
    loveparams.height = 200 ;
    loveparams.width= 200;
    flove.setLayoutParams(loveparams);
    //flove.addView(love);

    //gifimageleft.speed=3;
    //gifimageleft.loadGIFResource(this, R.mipmap.indesit_krople_woda);
    //love.setVisibility(View.INVISIBLE);
    imageView.setBackgroundResource(R.drawable.bubble);
    final AnimationDrawable bubbleanimation = (AnimationDrawable) imageView.getBackground();
    bubbleanimation.start();


    imageView2.setBackgroundResource(R.drawable.bubble);
    final AnimationDrawable bubbleanimation2 = (AnimationDrawable) imageView.getBackground();
    bubbleanimation2.start();

    imageView3.setBackgroundResource(R.drawable.bubble);
    final AnimationDrawable bubbleanimation3 = (AnimationDrawable) imageView.getBackground();
    bubbleanimation3.start();




    //imageView.speed= 2;
    //imageView.loadGIFResource(this, R.mipmap.bluebubble);
    //imageView.loadGIFResource(x, R.mipmap.bubblegif3);
    grd.addView(imageView);

    new CountDownTimer(700, 1000) {


        public void onTick(long milsec) {



            // love.speed = 2;
            //love.loadGIFResource(x, R.mipmap.heart12);


        }

        public void onFinish() {

            bubbleanimation.stop();
            bubbleanimation2.stop();
            bubbleanimation3.stop();
            imageView.setVisibility(View.INVISIBLE);
            imageView.invalidate();

        }
    }.start();


}

    public static Bitmap getcliphalfup(Bitmap bitmap) {
        Bitmap output = Bitmap.createBitmap(bitmap.getWidth(),
                bitmap.getHeight(), Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(output);

        final Paint paint = new Paint();
        final Rect rect = new Rect(0, 0, bitmap.getWidth(), bitmap.getHeight());
        final RectF rectf = new RectF(0, 0, bitmap.getWidth(), bitmap.getHeight());
        paint.setAntiAlias(true);
        canvas.drawARGB(0, 0, 0, 0);

        //canvas.drawArc(new RectF(PADDING, PADDING, getWidth() - PADDING, getHeight() - PADDING), 0, 180, true, mRectPaint);
        canvas.drawArc(rectf, 180, 180, true, paint);
        //canvas.drawCircle(bitmap.getWidth() / 2, bitmap.getHeight() / 2,

        //        bitmap.getWidth() / 2, paint);
        paint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.SRC_IN));
        canvas.drawBitmap(bitmap, rect, rect, paint);
        return output;
    }



    boolean checkgamestar(int counter)

    {

        if (counter % gamewaittime == 0)
        {
            return true;


        }

        return false;

    }



    void quitgame(){


        finish();


    }





    void gotomain(){

        SharedPreferences pref;
        pref = getSharedPreferences("info", MODE_PRIVATE);
//Using putXXX - with XXX is type data you want to write like: putString, putInt...   from      Editor object
        SharedPreferences.Editor editor = pref.edit();
        editor.putInt("ongame", 1);
        editor.putInt("newgame", 0);
        editor.commit();

    quit=true;
        Intent i = new Intent(this, MainActivity.class);

        startActivity(i);
        finish();

    }


public void go(){

        SharedPreferences pref;
        pref = getSharedPreferences("info", MODE_PRIVATE);
//Using putXXX - with XXX is type data you want to write like: putString, putInt...   from      Editor object
         SharedPreferences.Editor editor = pref.edit();
        editor.putInt("newgame", 0);
        editor.putInt("ongame", 0);
        editor.putBoolean("backbuttoneyes", false);
        editor.putBoolean("backbutton", false);
        quit=true;
        editor.commit();

    Intent service = new Intent(this, MyService.class);  //your Intent localIntent = new Intent("com.test.sample");
    //intent.putExtra("alarmId", alarmId); // So we can catch the id on BroadcastReceiver
    PendingIntent alarmIntent;
    alarmIntent = PendingIntent.getBroadcast(this,
            alarmId, service,
            0);
    AlarmManager am = (AlarmManager) this.getSystemService(Context.ALARM_SERVICE);

    am.cancel(alarmIntent);


    Intent intentnew =  new Intent(this, MyService.class);
    intentnew.setAction("STOP");

    //stopService(intentnew);
   // stopService(new Intent(getBaseContext(), MyService.class));
   // stopService(new Intent(getBaseContext(), alarmService.class));


        Intent i = new Intent(this,CameraActivity.class);
        startActivity(i);
        finish();

    }


    private void initInstances() {
   /*    // rel = (Button) findViewById(R.id.login);
       // likeView = (LikeView) findViewById(R.id.likeview);
        likeView.setLikeViewStyle(LikeView.Style.BOX_COUNT);
        likeView.setAuxiliaryViewPosition(LikeView.AuxiliaryViewPosition.INLINE);


        likeView.setObjectIdAndType(
                "https://www.facebook.com/diabetlive",
                LikeView.ObjectType.OPEN_GRAPH);



        rel.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                LoginManager.getInstance().logInWithReadPermissions(GameforActivity.this, Arrays.asList("public_profile"));
            }
        });*/
    }



    private void initCallbackManager() {
        callbackManager=CallbackManager.Factory.create();
        LoginManager.getInstance().registerCallback(callbackManager, new FacebookCallback<LoginResult>() {
            @Override
            public void onSuccess(LoginResult loginResult) {
                refreshButtonsState();
            }

            @Override
            public void onCancel() {

            }

            @Override
            public void onError(FacebookException e) {

            }
        });
    }



    private void refreshButtonsState() {

    }

    public boolean isLoggedIn() {
        return AccessToken.getCurrentAccessToken() != null;
    }


    public void endfly(){

        final FrameLayout flylayout = (FrameLayout) findViewById(R.id.gifflylayout);
        final FrameLayout flylayout2 = (FrameLayout) findViewById(R.id.gifflylayout2);
        final FrameLayout flylayout3 = (FrameLayout) findViewById(R.id.gifflylayout3);
        final FrameLayout flylayout4 = (FrameLayout) findViewById(R.id.gifflylayout4);
        final FrameLayout flylayout5 = (FrameLayout) findViewById(R.id.gifflylayout5);

        final ImageView flygif = (ImageView) findViewById(R.id.giffly);
        final ImageView flygif2 = (ImageView) findViewById(R.id.giffly2);
        final ImageView flygif3 = (ImageView) findViewById(R.id.giffly3);
        final ImageView flygif4 = (ImageView) findViewById(R.id.giffly4);
        final ImageView flygif5 = (ImageView) findViewById(R.id.giffly5);


        if ( flyanimation!= null) flyanimation.stop();
        if ( flyanimation2!= null) flyanimation2.stop();
        if ( flyanimation3!= null) flyanimation3.stop();
        if ( flyanimation4!= null) flyanimation4.stop();
        if ( flyanimation5!= null) flyanimation5.stop();
//      rocketAnimation3.stop();
        flylayout.setVisibility(View.INVISIBLE);
        flylayout2.setVisibility(View.INVISIBLE);
        flylayout3.setVisibility(View.INVISIBLE);
        flylayout4.setVisibility(View.INVISIBLE);
        flylayout5.setVisibility(View.INVISIBLE);

    flygif.setBackgroundResource(R.drawable.border);
        flygif2.setBackgroundResource(R.drawable.border);
        flygif3.setBackgroundResource(R.drawable.border);
        flygif4.setBackgroundResource(R.drawable.border);
        flygif5.setBackgroundResource(R.drawable.border);
        ///flygif.loadGIFResource(x,R.mipmap.vivo8);
      //flygif.clearAnimation();
       //flygif.invalidate();



       // flylayout.setVisibility(View.INVISIBLE);
    }

    public void fly(){


        final FrameLayout flylayout = (FrameLayout) findViewById(R.id.gifflylayout);
        final FrameLayout flylayout2 = (FrameLayout) findViewById(R.id.gifflylayout2);
        final FrameLayout flylayout3 = (FrameLayout) findViewById(R.id.gifflylayout3);
        final FrameLayout flylayout4 = (FrameLayout) findViewById(R.id.gifflylayout4);
        final FrameLayout flylayout5 = (FrameLayout) findViewById(R.id.gifflylayout5);

        final ImageView flygif = (ImageView) findViewById(R.id.giffly);
        final ImageView flygif2 = (ImageView) findViewById(R.id.giffly2);
        final ImageView flygif3 = (ImageView) findViewById(R.id.giffly3);
        final ImageView flygif4 = (ImageView) findViewById(R.id.giffly4);
        final ImageView flygif5 = (ImageView) findViewById(R.id.giffly5);


        final float density1 = Resources.getSystem().getDisplayMetrics().density;



        ViewGroup.MarginLayoutParams flymargin = new ViewGroup.MarginLayoutParams(flylayout.getLayoutParams());
        flymargin.setMargins(((int) (40*density1)), ( (int)(10* density1)), 0, 0);
        FrameLayout.LayoutParams vp =  new FrameLayout.LayoutParams(flymargin);
        flylayout.setLayoutParams(vp);

        ViewGroup.MarginLayoutParams flymargin2 = new ViewGroup.MarginLayoutParams(flylayout2.getLayoutParams());
        flymargin2.setMargins((int) (density1*240), ( (int)(10* density1)), 0, 0);
        FrameLayout.LayoutParams vp2 =  new FrameLayout.LayoutParams(flymargin2);
        flylayout2.setLayoutParams(vp2);

        ViewGroup.MarginLayoutParams flymargin3 = new ViewGroup.MarginLayoutParams(flylayout3.getLayoutParams());
        flymargin3.setMargins((int) (40*density1), (int)( density1*410), 0, 0);
        FrameLayout.LayoutParams vp3 =  new FrameLayout.LayoutParams(flymargin3);
        flylayout3.setLayoutParams(vp3);


        ViewGroup.MarginLayoutParams flymargin4 = new ViewGroup.MarginLayoutParams(flylayout4.getLayoutParams());
        flymargin4.setMargins((int) (density1*240), (int)( density1*410), 0, 0);
        FrameLayout.LayoutParams vp4 =  new FrameLayout.LayoutParams(flymargin4);
        flylayout4.setLayoutParams(vp4);

        ViewGroup.MarginLayoutParams flymargin5 = new ViewGroup.MarginLayoutParams(flylayout5.getLayoutParams());
        flymargin5.setMargins((int) (density1*200), (int) (density1*200), 0, 0);
        FrameLayout.LayoutParams vp5 =  new FrameLayout.LayoutParams(flymargin5);
        flylayout5.setLayoutParams(vp5);


        flygif.setBackgroundResource(R.drawable.flygif);
        flygif2.setBackgroundResource(R.drawable.flygif);
        flygif3.setBackgroundResource(R.drawable.flygif);
        flygif4.setBackgroundResource(R.drawable.flygif);
        flygif5.setBackgroundResource(R.drawable.flygif);


        flyanimation = (AnimationDrawable) flygif.getBackground();
        flyanimation2 = (AnimationDrawable) flygif2.getBackground();
        flyanimation3 = (AnimationDrawable) flygif3.getBackground();
        flyanimation4 = (AnimationDrawable) flygif4.getBackground();
        flyanimation5 = (AnimationDrawable) flygif5.getBackground();


        if(process[1]<20) {


            flylayout.setVisibility(View.VISIBLE);
            flylayout2.setVisibility(View.VISIBLE);
            flylayout3.setVisibility(View.VISIBLE);
            flylayout4.setVisibility(View.VISIBLE);
            flylayout5.setVisibility(View.VISIBLE);


            flyanimation.start();
            flyanimation2.start();
            flyanimation3.start();
            flyanimation4.start();
            flyanimation5.start();
        }

        else if( process[1]<MAXDIRT &&process[1]>=20)

        {


            flylayout.setVisibility(View.VISIBLE);
            flylayout2.setVisibility(View.VISIBLE);
            flylayout3.setVisibility(View.VISIBLE);
            flylayout4.setVisibility(View.INVISIBLE);
            flylayout5.setVisibility(View.INVISIBLE);

            flyanimation.start();
            flyanimation2.start();
            flyanimation3.start();

        }


        //flygif.speed=1;

        else {
            flylayout.setVisibility(View.INVISIBLE);
            flylayout2.setVisibility(View.INVISIBLE);
            flylayout3.setVisibility(View.INVISIBLE);
            flylayout4.setVisibility(View.INVISIBLE);
            flylayout5.setVisibility(View.INVISIBLE);

        }

        //if(process[1]<95 & process[1]>=20) flygif.loadGIFResource(x,R.mipmap.flylast);
        //else if(process[1]<20 & process[1]>=10) flygif.loadGIFResource(x,R.mipmap.flylast);
        //else if(process[1]<10 ) flygif.loadGIFResource(x,R.mipmap.flylast);
      //  else flylayout.setVisibility(View.INVISIBLE);
    }


    public void sleepcover(boolean status)

    {


        SharedPreferences pref;
        pref = getSharedPreferences("info", MODE_PRIVATE);
//Using putXXX - with XXX is type data you want to write like: putString, putInt...   from      Editor object
        final SharedPreferences.Editor editor = pref.edit();

        if (!status) {
            wakeupcount++;

            editor.putInt("wakeupcount", wakeupcount);

        if (wakeupcount % 3 == 1) {
          //  interstitialnew.load();
           // AdColony.requestInterstitial( ZONE_ID, listener, ad_options );
            if(!adflag) mobInterstitial.load();
        }
        else if (wakeupcount % 3 == 0 && !adflag) {
           // if (mInterstitialAd != null && mInterstitialAd.isLoaded() && !adflag) {
             //   mInterstitialAd.show();
              showad();
        }
    }
        final FrameLayout sleepcoverlayout = (FrameLayout) findViewById(R.id.sleepcover);
        final ImageView sleepcoverlayoutimg = (ImageView) findViewById(R.id.sleepcoverimg);

        sleepcoverlayoutimg.setImageResource(R.mipmap.greeneyecover);

       int min = 1;
        int max = 6;
        int pick = 0;


        ArrayList<Integer> number3 = new ArrayList<Integer>();
        for (int i = min; i <= max; ++i) number3.add(i);
        Collections.shuffle(number3);
        pick= number3.get(1);
        if (sleepbandpick == 1)

        {
            sleepcoverlayoutimg.setImageResource(R.mipmap.greeneyecover);
        }
       else if (sleepbandpick == 2)

        {

            sleepcoverlayoutimg.setImageResource(R.mipmap.redeyecover);


        }
        else if (sleepbandpick == 3)

        {

            sleepcoverlayoutimg.setImageResource(R.mipmap.buleeyecover);
        }
        else if (sleepbandpick == 4)

        {

            sleepcoverlayoutimg.setImageResource(R.mipmap.purpleeyecover);
        }

        else if (sleepbandpick == 5)

        {

            sleepcoverlayoutimg.setImageResource(R.mipmap.brownieeyecover);
        }
        else if (sleepbandpick == 6)

        {

            sleepcoverlayoutimg.setImageResource(R.mipmap.yelloweyecover);
        }


        final float density1 = Resources.getSystem().getDisplayMetrics().density;

        ViewGroup.MarginLayoutParams lovemargin2 = new ViewGroup.MarginLayoutParams(sleepcoverlayout.getLayoutParams());
        lovemargin2.setMargins(x1store - ((int) (20*density1)), y1store - ((int)(20* density1)), 0, 0);
        FrameLayout.LayoutParams vp =  new FrameLayout.LayoutParams(lovemargin2);
        vp.width=x2store-x1store+((int)(40*density1));
        vp.height=vp.width/22*9;
        sleepcoverlayout.setLayoutParams(vp);
        //imageView.speed= 2;
        //imageView.loadGIFResource(x,R.mipmap.heart12);
        //grd.addView(imageView);

        if(status==true) {
            sleepcoverlayout.setVisibility(View.VISIBLE);
            Bundle params = new Bundle();
            params.putString("image_name", "sleep");
            params.putString("full_text", "sleep");
            mFirebaseAnalytics.logEvent("sleep", params);
        }




        else {
            sleepcoverlayout.setVisibility(View.INVISIBLE);


            Bundle params = new Bundle();
            params.putString("image_name", "wakeup");
            params.putString("full_text", "wakeup");
            mFirebaseAnalytics.logEvent("wakeup", params);
        }
    }



    public void vibrate(int duration)
    {

        if(vibration==true)
        {
            Vibrator vibs = (Vibrator) getSystemService(Context.VIBRATOR_SERVICE);
            vibs.vibrate(duration);}
    }


    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        // Handle action bar item clicks here. The action bar will
        // automatically handle clicks on the Home/Up button, so long
        // as you specify a parent activity in AndroidManifest.xml.
        int id = item.getItemId();

        //noinspection SimplifiableIfStatement
        if (id == R.id.action_settings) {
            return true;
        }


        ActionBar actionBar = getActionBar();
        if (actionBar != null) {
            actionBar.setHomeButtonEnabled(false); // disable the button
            actionBar.setDisplayHomeAsUpEnabled(false); // remove the left caret
            actionBar.setDisplayShowHomeEnabled(false); // remove the icon
        }


        return super.onOptionsItemSelected(item);
    }

    public void clickFunc(View view){



        view.setScaleX(0.85f);
        view.setScaleY(0.85f);
        view.setAlpha(0.33f);


    }




    public void wait5()
    {


        meaticonimg.setEnabled(false);
        appleimg.setEnabled(false);
        bostonrollimg.setEnabled(false);
        carrotimg.setEnabled(false);
        frenchtoastimg.setEnabled(false);
        meatarmimg.setEnabled(false);
        medisaladimg.setEnabled(false);
        noodleimg.setEnabled(false);
        mixedsaladimg.setEnabled(false);
        onionringimg.setEnabled(false);
        orangeimg.setEnabled(false);
        porkimg.setEnabled(false);
        mixedrollimg.setEnabled(false);
        salmonsushiimg.setEnabled(false);
        soupimg.setEnabled(false);
        squidimg.setEnabled(false);
        cokeimg.setEnabled(false);
        brownieimg.setEnabled(false);
        cheesecakeimg.setEnabled(false);
        cheeseimg.setEnabled(false);
        juiceimg.setEnabled(false);



        frenchfriesimg.setEnabled(false);
        pizzaimp.setEnabled(false);
        watermelonimg.setEnabled(false);
        tomatoimg.setEnabled(false);
        pumpkinimg.setEnabled(false);
        peesimg.setEnabled(false);
        kiwiimg.setEnabled(false);
        hotdogimg.setEnabled(false);
        cornimg.setEnabled(false);
        cookieimg.setEnabled(false);
        chilisimg.setEnabled(false);
        broccoliimg.setEnabled(false);
        bananaimg.setEnabled(false);
        regional1img.setEnabled(false);
        regional2img.setEnabled(false);
        regional3img.setEnabled(false);
        regional4img.setEnabled(false);
        regional5img.setEnabled(false);
        regional6img.setEnabled(false);
        siskebapimg.setEnabled(false);

        drinks1img.setEnabled(false);
        drinks2img.setEnabled(false);
        drinks3img.setEnabled(false);
        drinks4img.setEnabled(false);
        drinks5img.setEnabled(false);
        drinks6img.setEnabled(false);

        desert1img.setEnabled(false);
        desert2img.setEnabled(false);
        desert3img.setEnabled(false);
        desert4img.setEnabled(false);
        desert5img.setEnabled(false);
        desert6img.setEnabled(false);


        hamburgerimg.setEnabled(false);
        greensoapimg.setEnabled(false);
       soap1img.setEnabled(false);
        soap2img.setEnabled(false);

        cellspongeimg.setEnabled(false);
        darkspongeimg.setEnabled(false);
        seaspongeimg.setEnabled(false);


        sleeppotionimg.setEnabled(false);
        hungerpotionimg.setEnabled(false);
        hygienepotionimg.setEnabled(false);
        lovepotionimg.setEnabled(false);
        gamepotionimg.setEnabled(false);
        allinpotionimg.setEnabled(false);
        chickenlegimg.setEnabled(false);
        fishimg.setEnabled(false);

        new CountDownTimer(1000, 100) {
            public void onTick(long milsec) {


            }

            public void onFinish() {


                meaticonimg.setEnabled(true);
                appleimg.setEnabled(true);
                bostonrollimg.setEnabled(true);
                carrotimg.setEnabled(true);
                frenchtoastimg.setEnabled(true);
                meatarmimg.setEnabled(true);
                medisaladimg.setEnabled(true);
                noodleimg.setEnabled(true);
                mixedsaladimg.setEnabled(true);
                onionringimg.setEnabled(true);
                orangeimg.setEnabled(true);
                porkimg.setEnabled(true);
                mixedrollimg.setEnabled(true);
                salmonsushiimg.setEnabled(true);
                soupimg.setEnabled(true);
                squidimg.setEnabled(true);
                cokeimg.setEnabled(true);
                brownieimg.setEnabled(true);
                cheesecakeimg.setEnabled(true);
                cheeseimg.setEnabled(true);
                juiceimg.setEnabled(true);

                frenchfriesimg.setEnabled(true);
                pizzaimp.setEnabled(true);
                watermelonimg.setEnabled(true);
                tomatoimg.setEnabled(true);
                pumpkinimg.setEnabled(true);
                peesimg.setEnabled(true);
                kiwiimg.setEnabled(true);
                hotdogimg.setEnabled(true);
                cornimg.setEnabled(true);
                cookieimg.setEnabled(true);
                chilisimg.setEnabled(true);
                broccoliimg.setEnabled(true);
                bananaimg.setEnabled(true);
                regional1img.setEnabled(true);
                regional2img.setEnabled(true);
                regional3img.setEnabled(true);
                regional4img.setEnabled(true);
                regional5img.setEnabled(true);
                regional6img.setEnabled(true);
                siskebapimg.setEnabled(true);

                drinks1img.setEnabled(true);
                drinks2img.setEnabled(true);
                drinks3img.setEnabled(true);
                drinks4img.setEnabled(true);
                drinks5img.setEnabled(true);
                drinks6img.setEnabled(true);

                desert1img.setEnabled(true);
                desert2img.setEnabled(true);
                desert3img.setEnabled(true);
                desert4img.setEnabled(true);
                desert5img.setEnabled(true);
                desert6img.setEnabled(true);


                hamburgerimg.setEnabled(true);
                greensoapimg.setEnabled(true);
                soap1img.setEnabled(true);
                soap2img.setEnabled(true);
                cellspongeimg.setEnabled(true);
                darkspongeimg.setEnabled(true);
                seaspongeimg.setEnabled(true);


                sleeppotionimg.setEnabled(true);
                hungerpotionimg.setEnabled(true);
                hygienepotionimg.setEnabled(true);
                lovepotionimg.setEnabled(true);
                gamepotionimg.setEnabled(true);
               allinpotionimg.setEnabled(true);
                chickenlegimg.setEnabled(true);
                fishimg.setEnabled(true);
            }
        }.start();
    }






    public void updateEnglish()

    {


        SharedPreferences pref;
        pref = getSharedPreferences("info", MODE_PRIVATE);
        final SharedPreferences.Editor editor = pref.edit();

        gamelang=ENGLISH;
        editor.putInt("gamelang", ENGLISH);

        editor.commit();

        TextView eyebandtext = (TextView) findViewById(R.id.eyebandetext);
        Button b1 = (Button) findViewById(R.id.button14);
        Button b2 = (Button) findViewById(R.id.button15);
        Button b3 = (Button) findViewById(R.id.button18);
        Button b4 = (Button) findViewById(R.id.button17);
        Button b5 = (Button) findViewById(R.id.button16);
        TextView edittext3 = (TextView) findViewById(R.id.editText3);
        TextView edittext4 = (TextView) findViewById(R.id.editText4);
        TextView edittext6 = (TextView) findViewById(R.id.editText6);
        TextView edittext7 = (TextView) findViewById(R.id.editText7);
        TextView edittext8 = (TextView) findViewById(R.id.editText8);

        TextView mealttextview = (TextView ) findViewById(R.id.mealtextview);
        TextView regionalview = (TextView ) findViewById(R.id.regionalview);
        TextView textView20 = (TextView ) findViewById(R.id.textView20);
        TextView textView60 = (TextView ) findViewById(R.id.textView60);
        TextView desertview = (TextView ) findViewById(R.id.desertview);
        TextView textView18 = (TextView ) findViewById(R.id.textView18);
        TextView fruittextview = (TextView ) findViewById(R.id.fruittextview);
        TextView optiontextview = (TextView ) findViewById(R.id.optiontextview);
        TextView drinkview = (TextView ) findViewById(R.id.drinkview);


        TextView edittext12 = (TextView) findViewById(R.id.editText12);
        TextView edittext13= (TextView) findViewById(R.id.editText13);
        TextView edittext14 = (TextView) findViewById(R.id.editText14);

        Button signin = (Button) findViewById(R.id.sign_in_button);
        Button button29 = (Button) findViewById(R.id.button29);
        TextView t7= (TextView) findViewById(R.id.textView7);
        Button b19 = (Button) findViewById(R.id.button19);
        TextView sharetext = (TextView) findViewById(R.id.sharetext);
        Button b7 = (Button) findViewById(R.id.button7);
        Button b8 = (Button) findViewById(R.id.button8);




        final TextView watermelonheader = (TextView) findViewById(R.id.watermelontext2);
        final TextView tomatoheader = (TextView) findViewById(R.id.tomatotext2);
        final TextView cappucionoheader = (TextView) findViewById(R.id.onionringsltext2);

        final TextView pumpkinheader = (TextView) findViewById(R.id.pumpkintext2);
        final TextView peesheader = (TextView) findViewById(R.id.peestext2);
        final TextView kiwiheader = (TextView) findViewById(R.id.kiwitext2);
        final TextView hotdogheader = (TextView) findViewById(R.id.hotdogtext2);
        final TextView cornheader = (TextView) findViewById(R.id.corntext2);

        final TextView chilisheader = (TextView) findViewById(R.id.chilistext2);
        final TextView broccoliheader = (TextView) findViewById(R.id.broccolitext2);
        final TextView bananaheader = (TextView) findViewById(R.id.bananatext2);
        final TextView regionalheader1 = (TextView) findViewById(R.id.regional1text2);
        final TextView regionalheader2 = (TextView) findViewById(R.id.regional2text2);
        final TextView regionalheader3 = (TextView) findViewById(R.id.regional3text2);
        final TextView regionalheader4 = (TextView) findViewById(R.id.regional4text2);
        final TextView regionalheader5 = (TextView) findViewById(R.id.regional5text2);
        final TextView regionalheader6 = (TextView) findViewById(R.id.regional6text2);
        final TextView siskebapheader = (TextView) findViewById(R.id.siskebaptext2);
        final TextView drinkheader1 = (TextView) findViewById(R.id.drinks1text2);
        final TextView drinkheader2 = (TextView) findViewById(R.id.drinks2text2);
        final TextView drinkheader3 = (TextView) findViewById(R.id.drinks3text2);
        final TextView drinkheader4 = (TextView) findViewById(R.id.drinks4text2);
        final TextView drinkheader5 = (TextView) findViewById(R.id.drinks5text2);
        final TextView drinkheader6 = (TextView) findViewById(R.id.drinks6text2);
        final TextView desertheader1 = (TextView) findViewById(R.id.desert1text2);
        final TextView desertheader2 = (TextView) findViewById(R.id.desert2text2);
        final TextView desertheader3 = (TextView) findViewById(R.id.desert3text2);
        final TextView desertheader4 = (TextView) findViewById(R.id.desert4text2);
        final TextView desertheader5 = (TextView) findViewById(R.id.desert5text2);
        final TextView desertheader6 = (TextView) findViewById(R.id.desert6text2);


        final TextView pizzaheader = (TextView) findViewById(R.id.pizzatext);
        final TextView hamburgerheader = (TextView) findViewById(R.id.hamburgertext2);
        final TextView frenchfriesheader = (TextView) findViewById(R.id.frenchfriestext2);
        final TextView chickenheader = (TextView) findViewById(R.id.chickenlegtext2);
        final TextView fishheader = (TextView) findViewById(R.id.fishtext2);
        final TextView tboneheader = (TextView) findViewById(R.id.tbonetext2);
        final TextView meatarmheader = (TextView) findViewById(R.id.meatarmtext2);
        final TextView porkheader = (TextView) findViewById(R.id.porktext2);

        final TextView greensoapheader = (TextView) findViewById(R.id.greensoaptext2);
        final TextView cellsoapheader = (TextView) findViewById(R.id.cellsoaptext2);
        final TextView seaspongeheader = (TextView) findViewById(R.id.seaspongetext2);
        final TextView greendarkhedar = (TextView) findViewById(R.id.greendarksoaptext2);
        final TextView soap1header = (TextView) findViewById(R.id.soap1text2);
        final TextView soap2header = (TextView) findViewById(R.id.soap2text2);

        final TextView sleeppheader = (TextView) findViewById(R.id.sleepotiontext2);
        final TextView hungerpheader = (TextView) findViewById(R.id.hungerpotiontext2);
        final TextView hygieneheader = (TextView) findViewById(R.id.hygienepotiontext2);
        final TextView lovepheader = (TextView) findViewById(R.id.lovepotiontext2);
        final TextView gamepheader = (TextView) findViewById(R.id.gamepotiontext2);
        final TextView allinpheader = (TextView) findViewById(R.id.allinpotiontext2);

        final TextView cokeheader = (TextView) findViewById(R.id.coketext2);
        final TextView juiceheader = (TextView) findViewById(R.id.juicetext2);
        final TextView carrotheader = (TextView) findViewById(R.id.carrottext2);
        final TextView saladheader = (TextView) findViewById(R.id.saladtext2);

        final TextView applehader = (TextView) findViewById(R.id.appletext2);
        final TextView orangeheader = (TextView) findViewById(R.id.orangetext2);
        final TextView noodleheader = (TextView) findViewById(R.id.noodletext2);
        final TextView brownieheader = (TextView) findViewById(R.id.brownietext2);
        final TextView cheesecakeheader = (TextView) findViewById(R.id.cheesecaktext2);


        final TextView frenchtoastheader = (TextView) findViewById(R.id.frenchtoasttext2);
        final TextView cheeseheader = (TextView) findViewById(R.id.cheesetext2);
        final TextView soupheader = (TextView) findViewById(R.id.souptext2);


        Button newgamebutton = (Button) findViewById(R.id.button23);
        Button buttoncontinue = (Button) findViewById(R.id.buttoncontinue);
        Button faqbutton = (Button) findViewById(R.id.faqbutton);
        Button option = (Button) findViewById(R.id.button33);
        Button sharelink = (Button) findViewById(R.id.sharelinkbutton);
        Button signin1 = (Button) findViewById(R.id.buttongooglesign);
        Button signin2 = (Button) findViewById(R.id.buttongoogleleader);

        Button buycoin = (Button) findViewById(R.id.Buycoinbutton);



        TextView textview9 = (TextView) findViewById(R.id.textView9);
        TextView textView10 = (TextView) findViewById(R.id.textView10);
        TextView textView33 = (TextView) findViewById(R.id.textView33);
        TextView textView53 = (TextView) findViewById(R.id.textView53);
        TextView textView11 = (TextView) findViewById(R.id.textView11);
        TextView textView28 = (TextView) findViewById(R.id.textView28);
        TextView textView31 = (TextView) findViewById(R.id.textView31);
        TextView textView35 = (TextView) findViewById(R.id.textView35);
        TextView textView56 = (TextView) findViewById(R.id.textView56);
        TextView textView14 = (TextView) findViewById(R.id.textView14);



        TextView textview46 = (TextView) findViewById(R.id.textView46);
        TextView textview48 = (TextView) findViewById(R.id.textView48);
        TextView textview49 = (TextView) findViewById(R.id.textView49);
        Button potionsbutton1 = (Button) findViewById(R.id.potionsbutton2);
        Button imageView35 = (Button) findViewById(R.id.imageView35);
        TextView textview155 = (TextView) findViewById(R.id.textView155);
        Button button32 = (Button) findViewById(R.id.button32);
        TextView textview15 = (TextView) findViewById(R.id.textView15);
        TextView textViewconrats = (TextView) findViewById(R.id.textViewconrats);
        Button button322 = (Button) findViewById(R.id.button322);
        TextView textview55 = (TextView) findViewById(R.id.textView55);
        TextView textViewconrats2 = (TextView) findViewById(R.id.textViewconrats2);
        Button button3222 = (Button) findViewById(R.id.button3222);
        TextView textview552 = (TextView) findViewById(R.id.textView552);
        TextView textview761 = (TextView) findViewById(R.id.textView761);
        Button button361 = (Button) findViewById(R.id.button361);
        TextView textview871 = (TextView) findViewById(R.id.textView871);
        Button button371 = (Button) findViewById(R.id.button371);

        TextView textview76 = (TextView) findViewById(R.id.textView76);
        Button button36 = (Button) findViewById(R.id.button36);
        TextView textview87 = (TextView) findViewById(R.id.textView87);
        Button button37 = (Button) findViewById(R.id.button37);

        TextView vivoname = (TextView) findViewById(R.id.textView104);
        TextView birthdate = (TextView) findViewById(R.id.textView105);
        Button buttoncontact = (Button) findViewById(R.id.contactbutton);



        TextView textViewconrats3 = (TextView) findViewById(R.id.textViewconrats3);
        Button button3221 = (Button) findViewById(R.id.button3221);
        TextView textview551 = (TextView) findViewById(R.id.textView551);


        Button okbutton = (Button) findViewById(R.id.button32221);
        TextView congra = (TextView) findViewById(R.id.textViewconrats21);
        TextView textView762 = (TextView) findViewById(R.id.textView762);
        TextView textView87 = (TextView) findViewById(R.id.textView87);
        Button button362 = (Button) findViewById(R.id.button362);

        TextView headert = (TextView) findViewById(R.id.textView763);
        Button buttonno2 = (Button) findViewById(R.id.button363);
        Button buttonyes2 = (Button) findViewById(R.id.button373);

        TextView headert2 = (TextView) findViewById(R.id.textView101);


        drinkheader4.setTextSize(MENUTEXTFONTSIZE);
        drinkheader6.setTextSize(MENUTEXTFONTSIZE);
        cappucionoheader.setTextSize(MENUTEXTFONTSIZE);
        final Button cancelcoinwarning =(Button) findViewById(R.id.imageView34);
        cancelcoinwarning.setText("OK");

        headert2.setText("WARNING");
        headert.setText("WARNING");
        buttonno2.setText("NO");
        buttonyes2.setText("YES");
        eyebandtext.setTextSize(15);
        shareyourvivo = "Share " + CharacterName;
        sharefreindstext = "Share Vivo with friends";
        textView762.setText("INFORMATION");
        button362.setText("OK");

        okbutton.setText("OK");
        congra.setText("PURCHASE");

        textViewconrats3.setText("GAME BONUS");
        button3221.setText("COLLECT");
        textview551.setText("You have earned");


        buttoncontact.setText("CONTACT");


        vivoname.setText("Vivo Name");
        birthdate.setText("Date of Birth");
        eyebandtext.setText("EYE BANDS");

        textview46.setText("You have no more hearts for playing games! Please wait");
        textview48.setText("or watch a video to play game.");
        textview49.setText("GET POTIONS");
        potionsbutton1.setText("BUY POTIONS");
        imageView35.setText("WATCH VIDEO");
        textview155.setText("BRAIN DEVELOPMENT");
        button32.setText("COLLECT");
        textViewconrats.setText("LOYALTY BONUS");
        button322.setText("COLLECT");
        textview55.setText("You have earned");
        textview15.setText("You have earned");
        textViewconrats2.setText("BONUS AWARD");
        button3222.setText("COLLECT");
        textview552.setText("You have earned");
        textview761.setText("WARNING");
        button361.setText("OK");
        textview871.setText("Your overall energy below %20. Please feed and love your Vivo.");

        textview76.setText("WARNING");
        button36.setText("YES");
        textview87.setText("You are creating a new character. All your game information will be protected.");
        button37.setText("NO");





        textview9.setText("Notification");
        textView10.setText("Sound");
        textView33.setText("Vibration");
        textView53.setText("Language");
        textView11.setText("OPTIONS");
        textView28.setText("Project Coordinator");
        textView31.setText("Project Designer");
        textView35.setText("Chief Developer");
        textView56.setText("Chief Marketing Officer");
        textView14.setText("CREDITS");




        buycoin.setText("BUY COIN");
        newgamebutton.setText("NEW CHARACTER");
        buttoncontinue.setText("CONTINUE");
        faqbutton.setText("CREDITS");
        option.setText("OPTIONS");
        sharelink.setText("SHARE WITH FRIENDS");
        signin1.setText("LEADERBOARD");
        signin2.setText("LEADERBOARD");



        pizzaheader.setText("PIZZA");
        hamburgerheader.setText("BURGER");
        frenchfriesheader.setText("FRIES");
        fishheader.setText("FISH");
        chickenheader.setText("CHICKEN");
        tboneheader.setText("T-BONE");
        meatarmheader.setText("SANDWICH");
        porkheader.setText("TURKEY");
        hotdogheader.setText("HOTDOG");

        carrotheader.setText("CARROT");
        saladheader.setText("MUSHROOM");
        tomatoheader.setText("TOMATO");
        pumpkinheader.setText("PUMPKIN");
        peesheader.setText("PEES");
        cornheader.setText("CORN");
        chilisheader.setText("CHILI PEPPER");
        broccoliheader.setText("BROCCOLI");
        desertheader6.setText("PAPRIKA");

        applehader.setText("APPLE");
        orangeheader.setText("PEAR");
        frenchtoastheader.setText("GRAPE");
        cheeseheader.setText("BERRY");
        soupheader.setText("CHERRY");
        watermelonheader.setText("WATERMELON");
        kiwiheader.setText("KIWI");
        bananaheader.setText("BANANA");
        regionalheader6.setText("PINEAPPLE");

        noodleheader.setText("TACO");
        regionalheader3.setText("PAELLA");
        siskebapheader.setText("SHISH KEBAB");
        regionalheader1.setText("NOODLE");
        regionalheader2.setText("DONER KEBAB");
        regionalheader4.setText("SUSHI");


        brownieheader.setText("COOKIE");
        cheesecakeheader.setText("CUPCAKE");
        desertheader3.setText("ICE CREAM");
        desertheader1.setText("DONUT");
        desertheader2.setText("CHOCOLATE");
        desertheader4.setText("CACAO ICE");
        desertheader5.setText("PANCAKE");

        drinkheader1.setText("WATER");
        drinkheader2.setText("MILK");
        drinkheader3.setText("TEA");
        juiceheader.setText("LEMONADE");
        drinkheader5.setText("COFFEE");
        cokeheader.setText("ESPRESSO");
        drinkheader6.setText("ORANGE JUICE");
        cappucionoheader.setText("CHERRY JUICE");
        drinkheader4.setText("MIXED JUICE");

        greensoapheader.setText("GREEN");
        cellsoapheader.setText("RED");
        greendarkhedar.setText("YELLOW");
        seaspongeheader.setText("PINK");
        soap1header.setText("OLIVE");
        soap2header.setText("BLUE");


        hygieneheader.setText("HYGIENE");
        lovepheader.setText("LOVE");
        hungerpheader.setText("HUNGER");
        sleeppheader.setText("SLEEP");
        gamepheader.setText("GAME");
        allinpheader.setText("ALL IN");




        mealttextview.setText("MEALS");
        regionalview.setText("REGIONAL");
        textView20.setText("HYGIENE");
        textView60.setText("POTIONS");
        desertview.setText("SWEETS");
        textView18.setText("VEGGIES");
        fruittextview.setText("FRUITS");
        optiontextview.setText("OPTIONS");
        drinkview.setText("DRINKS");


        b1.setText("KITCHEN");
        b2.setText("HYGIENE");
        b3.setText("WC");
        b4.setText("GAMES");
        b5.setText("BEDROOM");


        edittext3.setText("HUNGER");
        edittext4.setText("HYGIENE");
        edittext6.setText("BLADDER");
        edittext7.setText("SLEEP");
        edittext8.setText("LOVE");



        SharedPreferences shared = getSharedPreferences("info", MODE_PRIVATE);
        String Vivoidtext = shared.getString("vivoid", "");
        String name = shared.getString("charactername", "");
        String lastname = shared.getString("lastname", "");
        String Birthdate = shared.getString("birthdate", "");

        edittext12.setText(CharacterName);
        edittext13.setText(GoogleId);
        edittext14.setText(Birthdate);



        signin.setText("LEADERBOARD");
        button29.setText("LEADERBOARD");

        t7.setText("VIVO PASS");
        b19.setText("OK");
        sharetext.setText("Would you like to share ?");
        b7.setText("Back");
        b8.setText("Share");


    }


    public void updateTurkish()

    {

        SharedPreferences pref;
        pref = getSharedPreferences("info", MODE_PRIVATE);
        final SharedPreferences.Editor editor = pref.edit();
        editor.putInt("gamelang", TURKISH);
        gamelang=TURKISH;
        editor.commit();


        Button b1 = (Button) findViewById(R.id.button14);
        Button b2 = (Button) findViewById(R.id.button15);
        Button b3 = (Button) findViewById(R.id.button18);
        Button b4 = (Button) findViewById(R.id.button17);
        Button b5 = (Button) findViewById(R.id.button16);
        TextView edittext3 = (TextView) findViewById(R.id.editText3);
        TextView edittext4 = (TextView) findViewById(R.id.editText4);
        TextView edittext6 = (TextView) findViewById(R.id.editText6);
        TextView edittext7 = (TextView) findViewById(R.id.editText7);
        TextView edittext8 = (TextView) findViewById(R.id.editText8);

        TextView edittext12 = (TextView) findViewById(R.id.editText12);
        TextView edittext13= (TextView) findViewById(R.id.editText13);
        TextView edittext14 = (TextView) findViewById(R.id.editText14);

        Button signin = (Button) findViewById(R.id.sign_in_button);
        Button button29 = (Button) findViewById(R.id.button29);
        TextView t7= (TextView) findViewById(R.id.textView7);
        Button b19 = (Button) findViewById(R.id.button19);
        TextView sharetext = (TextView) findViewById(R.id.sharetext);
        Button b7 = (Button) findViewById(R.id.button7);
        Button b8 = (Button) findViewById(R.id.button8);
       // Typeface tf = Typeface.createFromAsset(getAssets(), "browbold.ttf");

        TextView mealttextview = (TextView ) findViewById(R.id.mealtextview);
        TextView regionalview = (TextView ) findViewById(R.id.regionalview);
        TextView textView20 = (TextView ) findViewById(R.id.textView20);
        TextView textView60 = (TextView ) findViewById(R.id.textView60);
        TextView desertview = (TextView ) findViewById(R.id.desertview);
        TextView textView18 = (TextView ) findViewById(R.id.textView18);
        TextView fruittextview = (TextView ) findViewById(R.id.fruittextview);
        TextView optiontextview = (TextView ) findViewById(R.id.optiontextview);
        TextView drinkview = (TextView ) findViewById(R.id.drinkview);

        final TextView watermelonheader = (TextView) findViewById(R.id.watermelontext2);
        final TextView tomatoheader = (TextView) findViewById(R.id.tomatotext2);
        final TextView cappucionoheader = (TextView) findViewById(R.id.onionringsltext2);

        final TextView pumpkinheader = (TextView) findViewById(R.id.pumpkintext2);
        final TextView peesheader = (TextView) findViewById(R.id.peestext2);
        final TextView kiwiheader = (TextView) findViewById(R.id.kiwitext2);
        final TextView hotdogheader = (TextView) findViewById(R.id.hotdogtext2);
        final TextView cornheader = (TextView) findViewById(R.id.corntext2);

        final TextView chilisheader = (TextView) findViewById(R.id.chilistext2);
        final TextView broccoliheader = (TextView) findViewById(R.id.broccolitext2);
        final TextView bananaheader = (TextView) findViewById(R.id.bananatext2);
        final TextView regionalheader1 = (TextView) findViewById(R.id.regional1text2);
        final TextView regionalheader2 = (TextView) findViewById(R.id.regional2text2);
        final TextView regionalheader3 = (TextView) findViewById(R.id.regional3text2);
        final TextView regionalheader4 = (TextView) findViewById(R.id.regional4text2);
        final TextView regionalheader5 = (TextView) findViewById(R.id.regional5text2);
        final TextView regionalheader6 = (TextView) findViewById(R.id.regional6text2);
        final TextView siskebapheader = (TextView) findViewById(R.id.siskebaptext2);
        final TextView drinkheader1 = (TextView) findViewById(R.id.drinks1text2);
        final TextView drinkheader2 = (TextView) findViewById(R.id.drinks2text2);
        final TextView drinkheader3 = (TextView) findViewById(R.id.drinks3text2);
        final TextView drinkheader4 = (TextView) findViewById(R.id.drinks4text2);
        final TextView drinkheader5 = (TextView) findViewById(R.id.drinks5text2);
        final TextView drinkheader6 = (TextView) findViewById(R.id.drinks6text2);
        final TextView desertheader1 = (TextView) findViewById(R.id.desert1text2);
        final TextView desertheader2 = (TextView) findViewById(R.id.desert2text2);
        final TextView desertheader3 = (TextView) findViewById(R.id.desert3text2);
        final TextView desertheader4 = (TextView) findViewById(R.id.desert4text2);
        final TextView desertheader5 = (TextView) findViewById(R.id.desert5text2);
        final TextView desertheader6 = (TextView) findViewById(R.id.desert6text2);


        final TextView pizzaheader = (TextView) findViewById(R.id.pizzatext);
        final TextView hamburgerheader = (TextView) findViewById(R.id.hamburgertext2);
        final TextView frenchfriesheader = (TextView) findViewById(R.id.frenchfriestext2);
        final TextView chickenheader = (TextView) findViewById(R.id.chickenlegtext2);
        final TextView fishheader = (TextView) findViewById(R.id.fishtext2);
        final TextView tboneheader = (TextView) findViewById(R.id.tbonetext2);
        final TextView meatarmheader = (TextView) findViewById(R.id.meatarmtext2);
        final TextView porkheader = (TextView) findViewById(R.id.porktext2);

        final TextView greensoapheader = (TextView) findViewById(R.id.greensoaptext2);
        final TextView cellsoapheader = (TextView) findViewById(R.id.cellsoaptext2);
        final TextView seaspongeheader = (TextView) findViewById(R.id.seaspongetext2);
        final TextView greendarkhedar = (TextView) findViewById(R.id.greendarksoaptext2);
        final TextView soap1header = (TextView) findViewById(R.id.soap1text2);
        final TextView soap2header = (TextView) findViewById(R.id.soap2text2);

        final TextView sleeppheader = (TextView) findViewById(R.id.sleepotiontext2);
        final TextView hungerpheader = (TextView) findViewById(R.id.hungerpotiontext2);
        final TextView hygieneheader = (TextView) findViewById(R.id.hygienepotiontext2);
        final TextView lovepheader = (TextView) findViewById(R.id.lovepotiontext2);
        final TextView gamepheader = (TextView) findViewById(R.id.gamepotiontext2);
        final TextView allinpheader = (TextView) findViewById(R.id.allinpotiontext2);

        final TextView cokeheader = (TextView) findViewById(R.id.coketext2);
        final TextView juiceheader = (TextView) findViewById(R.id.juicetext2);
        final TextView carrotheader = (TextView) findViewById(R.id.carrottext2);
        final TextView saladheader = (TextView) findViewById(R.id.saladtext2);

        final TextView applehader = (TextView) findViewById(R.id.appletext2);
        final TextView orangeheader = (TextView) findViewById(R.id.orangetext2);
        final TextView noodleheader = (TextView) findViewById(R.id.noodletext2);
        final TextView brownieheader = (TextView) findViewById(R.id.brownietext2);
        final TextView cheesecakeheader = (TextView) findViewById(R.id.cheesecaktext2);


        final TextView frenchtoastheader = (TextView) findViewById(R.id.frenchtoasttext2);
        final TextView cheeseheader = (TextView) findViewById(R.id.cheesetext2);
        final TextView soupheader = (TextView) findViewById(R.id.souptext2);


        Button newgamebutton = (Button) findViewById(R.id.button23);
        Button buttoncontinue = (Button) findViewById(R.id.buttoncontinue);
        Button faqbutton = (Button) findViewById(R.id.faqbutton);
        Button option = (Button) findViewById(R.id.button33);
        Button sharelink = (Button) findViewById(R.id.sharelinkbutton);
        Button signin1 = (Button) findViewById(R.id.buttongooglesign);
        Button signin2 = (Button) findViewById(R.id.buttongoogleleader);

        Button buycoin = (Button) findViewById(R.id.Buycoinbutton);


        TextView textview9 = (TextView) findViewById(R.id.textView9);
        TextView textView10 = (TextView) findViewById(R.id.textView10);
        TextView textView33 = (TextView) findViewById(R.id.textView33);
        TextView textView53 = (TextView) findViewById(R.id.textView53);
        TextView textView11 = (TextView) findViewById(R.id.textView11);
        TextView textView28 = (TextView) findViewById(R.id.textView28);
        TextView textView31 = (TextView) findViewById(R.id.textView31);
        TextView textView35 = (TextView) findViewById(R.id.textView35);
        TextView textView56 = (TextView) findViewById(R.id.textView56);
        TextView textView14 = (TextView) findViewById(R.id.textView14);



        TextView textview46 = (TextView) findViewById(R.id.textView46);
        TextView textview48 = (TextView) findViewById(R.id.textView48);
        TextView textview49 = (TextView) findViewById(R.id.textView49);
        Button potionsbutton1 = (Button) findViewById(R.id.potionsbutton2);
        Button imageView35 = (Button) findViewById(R.id.imageView35);
        TextView textview155 = (TextView) findViewById(R.id.textView155);
        Button button32 = (Button) findViewById(R.id.button32);
        TextView textview15 = (TextView) findViewById(R.id.textView15);
        TextView textViewconrats = (TextView) findViewById(R.id.textViewconrats);
        Button button322 = (Button) findViewById(R.id.button322);
        TextView textview55 = (TextView) findViewById(R.id.textView55);
        TextView textViewconrats2 = (TextView) findViewById(R.id.textViewconrats2);
        Button button3222 = (Button) findViewById(R.id.button3222);
        TextView textview552 = (TextView) findViewById(R.id.textView552);
        TextView textview761 = (TextView) findViewById(R.id.textView761);
        Button button361 = (Button) findViewById(R.id.button361);
        TextView textview871 = (TextView) findViewById(R.id.textView871);
        Button button371 = (Button) findViewById(R.id.button371);

        TextView textview76 = (TextView) findViewById(R.id.textView76);
        Button button36 = (Button) findViewById(R.id.button36);
        TextView textview87 = (TextView) findViewById(R.id.textView87);
        Button button37 = (Button) findViewById(R.id.button37);

        TextView vivoname = (TextView) findViewById(R.id.textView104);
        TextView birthdate = (TextView) findViewById(R.id.textView105);
        Button buttoncontact = (Button) findViewById(R.id.contactbutton);

        TextView eyebandtext = (TextView) findViewById(R.id.eyebandetext);



        TextView textViewconrats3 = (TextView) findViewById(R.id.textViewconrats3);
        Button button3221 = (Button) findViewById(R.id.button3221);
        TextView textview551 = (TextView) findViewById(R.id.textView551);



        Button okbutton = (Button) findViewById(R.id.button32221);
        TextView congra = (TextView) findViewById(R.id.textViewconrats21);



        TextView textView762 = (TextView) findViewById(R.id.textView762);

        Button button362 = (Button) findViewById(R.id.button362);

        TextView headert = (TextView) findViewById(R.id.textView763);
        Button buttonno2 = (Button) findViewById(R.id.button363);
        Button buttonyes2 = (Button) findViewById(R.id.button373);
        TextView headert2 = (TextView) findViewById(R.id.textView101);
        drinkheader4.setTextSize(MENUTEXTFONTSIZE);
        drinkheader6.setTextSize(MENUTEXTFONTSIZE);
        cappucionoheader.setTextSize(MENUTEXTFONTSIZE);

        final Button cancelcoinwarning =(Button) findViewById(R.id.imageView34);
        cancelcoinwarning.setText("TAMAM");
        eyebandtext.setTextSize(15);
        headert2.setText("UYARI");

        headert.setText("UYARI");
        buttonno2.setText("HAYIR");
        buttonyes2.setText("EVET");

        sharefreindstext = "Vivo'yu arkadaşlarınla paylaş";
        textView762.setText("BİLGİ");

        button362.setText("TAMAM");

        okbutton.setText("TAMAM");
        congra.setText("SATIN ALMA");

        textViewconrats3.setText("OYUN HAKKI");
        button3221.setText("TOPLA");
        textview551.setText("Kazandınız");
        shareyourvivo = "Karakterin " + CharacterName + " paylaş";



        eyebandtext.setText("GÖZ BANTLARI");
        buttoncontact.setText("İLETİŞİM");
        vivoname.setText("Vivo Adı");
        birthdate.setText("Doğum Tarihi");
        textview46.setText("Oyun oynamak için başka kalbiniz yok! Lütfen bekleyiniz");
        textview48.setText("veya oyunu oynamak için bir video izleyin.");
        textview49.setText("İKSİR ALIN");
        potionsbutton1.setText("İKSİR SATIN AL");
        imageView35.setText("VIDEO İZLE");
        textview155.setText("BEYİN GELİŞİMİ");
        button32.setText("TOPLA");
        textViewconrats.setText("SADAKAT ÖDÜLÜ");
        button322.setText("TOPLA");
        textview55.setText("Kazandınız");
        textview15.setText("Kazandınız");
        textViewconrats2.setText("ÖDÜL");
        button3222.setText("TOPLA");
        textview552.setText("Kazandınız");
        textview761.setText("UYARI");
        button361.setText("TAMAM");
        textview871.setText("Toplam enerjiniz %20'nin altında! Lütfen Vivo'nuzu besleyin ve sevin.");

        textview76.setText("UYARI");
        button36.setText("EVET");
        textview87.setText("Yeni bir karakter yaratıyorsunuz. Tüm oyun bilgileriniz korunacaktır.");
        button37.setText("HAYIR");





        textview9.setText("Uyarılar");
        textView10.setText("Ses");
        textView33.setText("Titreşim");
        textView53.setText("Dil Seçeneği");
        textView11.setText("SEÇENEKLER");
        textView28.setText("Proje Koordinatörü");
        textView31.setText("Proje Yaratıcısı");
        textView35.setText("Baş Yazılımcı ");
        textView56.setText("Pazarlama Direktörü");
        textView14.setText("HAKKIMIZDA");

        buycoin.setText("JETON SATIN AL");
        newgamebutton.setText("YENİ KARAKTER");
        buttoncontinue.setText("DEVAM");
        faqbutton.setText("HAKKINDA");
        option.setText("SEÇENEKLER");
       sharelink.setText("ARKADAŞINLA PAYLAŞ");
        signin1.setText("LİDER TABLOSU");
        signin2.setText("LİDER TABLOSU");



        pizzaheader.setText("PİZZA");
        hamburgerheader.setText("BURGER");
        frenchfriesheader.setText("PATATES");
        fishheader.setText("BALIK");
        chickenheader.setText("TAVUK");
        tboneheader.setText("T-BONE");
        meatarmheader.setText("SANDVİÇ");
        porkheader.setText("HİNDİ");
        hotdogheader.setText("SOSİSLİ");

        carrotheader.setText("HAVUÇ");
        saladheader.setText("MANTAR");
        tomatoheader.setText("DOMATES");
        pumpkinheader.setText("BALKABAĞI");
        peesheader.setText("FASULYE");
        cornheader.setText("MISIR");
        chilisheader.setText("ACI BİBER");
        broccoliheader.setText("BROKOLİ");
        desertheader6.setText("KIRMIZI BİBER");

        applehader.setText("ELMA");
        orangeheader.setText("ARMUT");
        frenchtoastheader.setText("ÜZÜM");
        cheeseheader.setText("ÇİLEK");
        soupheader.setText("VİŞNE");
        watermelonheader.setText("KARPUZ");
        kiwiheader.setText("KİVİ");
        bananaheader.setText("MUZ");
        regionalheader6.setText("ANANAS");

        noodleheader.setText("TACO");
        regionalheader3.setText("PAELLA");
        siskebapheader.setText("ŞİŞ KEBAP");
        regionalheader1.setText("NOODLE");
        regionalheader2.setText("DÖNER");
        regionalheader4.setText("SUSHI");


        brownieheader.setText("KURABİYE");
        cheesecakeheader.setText("KEK");
        desertheader3.setText("DONDURMA");
        desertheader1.setText("DONUT");
        desertheader2.setText("ÇİKOLATA");
        desertheader4.setText("CACAO ICE");
        desertheader5.setText("MEYVELİ KREP");

        drinkheader1.setText("SU");
        drinkheader2.setText("SÜT");
        drinkheader3.setText("ÇAY");
        juiceheader.setText("LİMONATA");
        drinkheader5.setText("KAHVE");
        cokeheader.setText("ESPRESSO");
        drinkheader6.setText("PORTAKAL SUYU");
        cappucionoheader.setText("VİŞNE SUYU");
        drinkheader4.setText("MEYVE SUYU");

        greensoapheader.setText("YEŞİL");
        cellsoapheader.setText("KIRMIZI");
        greendarkhedar.setText("SARI");
        seaspongeheader.setText("PEMBE");
        soap1header.setText("ZEYTİN");
        soap2header.setText("MAVİ");


        hygieneheader.setText("TEMİZLİK");
        lovepheader.setText("SEVGİ");
        hungerpheader.setText("AÇLIK");
        sleeppheader.setText("UYKU");
        gamepheader.setText("OYUN");
        allinpheader.setText("HEPSİ");



        mealttextview.setText("ANA YEMEKLER");
        regionalview.setText("YÖRESEL");
        textView20.setText("TEMİZLİK");
        textView60.setText("İKSİRLER");
        desertview.setText("TATLILAR");
        textView18.setText("SEBZELER");
        fruittextview.setText("MEYVELER");
        optiontextview.setText("SEÇENEKLER");
        drinkview.setText("İÇECEKLER");



        b1.setText("MUTFAK");
        b2.setText("TEMİZLİK");
        b3.setText("WC");
        b4.setText("OYUNLAR");
        b5.setText("YATAK ODASI");


        //edittext3.setTypeface(tf);
        //edittext4.setTypeface(tf);
        //edittext6.setTypeface(tf);
        //edittext7.setTypeface(tf);
        //edittext8.setTypeface(tf);
        //sharetext.setTypeface(tf);
        edittext3.setText("AÇLIK");
        edittext4.setText("TEMİZLİK");
        edittext6.setText("WC");
        edittext7.setText("UYKU");
        edittext8.setText("SEVGİ");




        SharedPreferences shared = getSharedPreferences("info", MODE_PRIVATE);
        String Vivoidtext = shared.getString("vivoid", "");
        String name = shared.getString("name", "");
        String lastname = shared.getString("lastname", "");
        String Birthdate = shared.getString("birthdate", "");

        edittext12.setText(CharacterName);
        edittext13.setText(GoogleId);
        edittext14.setText(Birthdate);

        edittext12.setVisibility(View.VISIBLE);
        edittext13.setVisibility(View.VISIBLE);
        edittext14.setVisibility(View.VISIBLE);

        signin.setText("LİDER TABLOSU");
        button29.setText("LİDER TABLOSU");

        t7.setText("VIVO PASS");
        b19.setText("Tamam");
        sharetext.setText("Paylaşmak ister misin ?");
        b7.setText("Geri");
        b8.setText("Paylaş");


    }



    public void updateFrench()

    {


        SharedPreferences pref;
        pref = getSharedPreferences("info", MODE_PRIVATE);
        final SharedPreferences.Editor editor = pref.edit();
        editor.putInt("gamelang", FRENCH);

        editor.commit();
        gamelang=FRENCH;

        Button b1 = (Button) findViewById(R.id.button14);
        Button b2 = (Button) findViewById(R.id.button15);
        Button b3 = (Button) findViewById(R.id.button18);
        Button b4 = (Button) findViewById(R.id.button17);
        Button b5 = (Button) findViewById(R.id.button16);
        TextView edittext3 = (TextView) findViewById(R.id.editText3);
        TextView edittext4 = (TextView) findViewById(R.id.editText4);
        TextView edittext6 = (TextView) findViewById(R.id.editText6);
        TextView edittext7 = (TextView) findViewById(R.id.editText7);
        TextView edittext8 = (TextView) findViewById(R.id.editText8);

        TextView edittext12 = (TextView) findViewById(R.id.editText12);
        TextView edittext13= (TextView) findViewById(R.id.editText13);
        TextView edittext14 = (TextView) findViewById(R.id.editText14);

        Button signin = (Button) findViewById(R.id.sign_in_button);
        Button button29 = (Button) findViewById(R.id.button29);
        TextView t7= (TextView) findViewById(R.id.textView7);
        Button b19 = (Button) findViewById(R.id.button19);
        TextView sharetext = (TextView) findViewById(R.id.sharetext);
        Button b7 = (Button) findViewById(R.id.button7);
        Button b8 = (Button) findViewById(R.id.button8);


        TextView mealttextview = (TextView ) findViewById(R.id.mealtextview);
        TextView regionalview = (TextView ) findViewById(R.id.regionalview);
        TextView textView20 = (TextView ) findViewById(R.id.textView20);
        TextView textView60 = (TextView ) findViewById(R.id.textView60);
        TextView desertview = (TextView ) findViewById(R.id.desertview);
        TextView textView18 = (TextView ) findViewById(R.id.textView18);
        TextView fruittextview = (TextView ) findViewById(R.id.fruittextview);
        TextView optiontextview = (TextView ) findViewById(R.id.optiontextview);
        TextView drinkview = (TextView ) findViewById(R.id.drinkview);



        final TextView watermelonheader = (TextView) findViewById(R.id.watermelontext2);
        final TextView tomatoheader = (TextView) findViewById(R.id.tomatotext2);
        final TextView cappucionoheader = (TextView) findViewById(R.id.onionringsltext2);

        final TextView pumpkinheader = (TextView) findViewById(R.id.pumpkintext2);
        final TextView peesheader = (TextView) findViewById(R.id.peestext2);
        final TextView kiwiheader = (TextView) findViewById(R.id.kiwitext2);
        final TextView hotdogheader = (TextView) findViewById(R.id.hotdogtext2);
        final TextView cornheader = (TextView) findViewById(R.id.corntext2);

        final TextView chilisheader = (TextView) findViewById(R.id.chilistext2);
        final TextView broccoliheader = (TextView) findViewById(R.id.broccolitext2);
        final TextView bananaheader = (TextView) findViewById(R.id.bananatext2);
        final TextView regionalheader1 = (TextView) findViewById(R.id.regional1text2);
        final TextView regionalheader2 = (TextView) findViewById(R.id.regional2text2);
        final TextView regionalheader3 = (TextView) findViewById(R.id.regional3text2);
        final TextView regionalheader4 = (TextView) findViewById(R.id.regional4text2);
        final TextView regionalheader5 = (TextView) findViewById(R.id.regional5text2);
        final TextView regionalheader6 = (TextView) findViewById(R.id.regional6text2);
        final TextView siskebapheader = (TextView) findViewById(R.id.siskebaptext2);
        final TextView drinkheader1 = (TextView) findViewById(R.id.drinks1text2);
        final TextView drinkheader2 = (TextView) findViewById(R.id.drinks2text2);
        final TextView drinkheader3 = (TextView) findViewById(R.id.drinks3text2);
        final TextView drinkheader4 = (TextView) findViewById(R.id.drinks4text2);
        final TextView drinkheader5 = (TextView) findViewById(R.id.drinks5text2);
        final TextView drinkheader6 = (TextView) findViewById(R.id.drinks6text2);
        final TextView desertheader1 = (TextView) findViewById(R.id.desert1text2);
        final TextView desertheader2 = (TextView) findViewById(R.id.desert2text2);
        final TextView desertheader3 = (TextView) findViewById(R.id.desert3text2);
        final TextView desertheader4 = (TextView) findViewById(R.id.desert4text2);
        final TextView desertheader5 = (TextView) findViewById(R.id.desert5text2);
        final TextView desertheader6 = (TextView) findViewById(R.id.desert6text2);


        final TextView pizzaheader = (TextView) findViewById(R.id.pizzatext);
        final TextView hamburgerheader = (TextView) findViewById(R.id.hamburgertext2);
        final TextView frenchfriesheader = (TextView) findViewById(R.id.frenchfriestext2);
        final TextView chickenheader = (TextView) findViewById(R.id.chickenlegtext2);
        final TextView fishheader = (TextView) findViewById(R.id.fishtext2);
        final TextView tboneheader = (TextView) findViewById(R.id.tbonetext2);
        final TextView meatarmheader = (TextView) findViewById(R.id.meatarmtext2);
        final TextView porkheader = (TextView) findViewById(R.id.porktext2);

        final TextView greensoapheader = (TextView) findViewById(R.id.greensoaptext2);
        final TextView cellsoapheader = (TextView) findViewById(R.id.cellsoaptext2);
        final TextView seaspongeheader = (TextView) findViewById(R.id.seaspongetext2);
        final TextView greendarkhedar = (TextView) findViewById(R.id.greendarksoaptext2);
        final TextView soap1header = (TextView) findViewById(R.id.soap1text2);
        final TextView soap2header = (TextView) findViewById(R.id.soap2text2);

        final TextView sleeppheader = (TextView) findViewById(R.id.sleepotiontext2);
        final TextView hungerpheader = (TextView) findViewById(R.id.hungerpotiontext2);
        final TextView hygieneheader = (TextView) findViewById(R.id.hygienepotiontext2);
        final TextView lovepheader = (TextView) findViewById(R.id.lovepotiontext2);
        final TextView gamepheader = (TextView) findViewById(R.id.gamepotiontext2);
        final TextView allinpheader = (TextView) findViewById(R.id.allinpotiontext2);

        final TextView cokeheader = (TextView) findViewById(R.id.coketext2);
        final TextView juiceheader = (TextView) findViewById(R.id.juicetext2);
        final TextView carrotheader = (TextView) findViewById(R.id.carrottext2);
        final TextView saladheader = (TextView) findViewById(R.id.saladtext2);

        final TextView applehader = (TextView) findViewById(R.id.appletext2);
        final TextView orangeheader = (TextView) findViewById(R.id.orangetext2);
        final TextView noodleheader = (TextView) findViewById(R.id.noodletext2);
        final TextView brownieheader = (TextView) findViewById(R.id.brownietext2);
        final TextView cheesecakeheader = (TextView) findViewById(R.id.cheesecaktext2);


        final TextView frenchtoastheader = (TextView) findViewById(R.id.frenchtoasttext2);
        final TextView cheeseheader = (TextView) findViewById(R.id.cheesetext2);
        final TextView soupheader = (TextView) findViewById(R.id.souptext2);


        Button newgamebutton = (Button) findViewById(R.id.button23);
        Button buttoncontinue = (Button) findViewById(R.id.buttoncontinue);
        Button faqbutton = (Button) findViewById(R.id.faqbutton);
        Button option = (Button) findViewById(R.id.button33);
        Button sharelink = (Button) findViewById(R.id.sharelinkbutton);
        Button signin1 = (Button) findViewById(R.id.buttongooglesign);
        Button signin2 = (Button) findViewById(R.id.buttongoogleleader);

        Button buycoin = (Button) findViewById(R.id.Buycoinbutton);



        TextView textview9 = (TextView) findViewById(R.id.textView9);
        TextView textView10 = (TextView) findViewById(R.id.textView10);
        TextView textView33 = (TextView) findViewById(R.id.textView33);
        TextView textView53 = (TextView) findViewById(R.id.textView53);
        TextView textView11 = (TextView) findViewById(R.id.textView11);
        TextView textView28 = (TextView) findViewById(R.id.textView28);
        TextView textView31 = (TextView) findViewById(R.id.textView31);
        TextView textView35 = (TextView) findViewById(R.id.textView35);
        TextView textView56 = (TextView) findViewById(R.id.textView56);
        TextView textView14 = (TextView) findViewById(R.id.textView14);



        TextView textview46 = (TextView) findViewById(R.id.textView46);
        TextView textview48 = (TextView) findViewById(R.id.textView48);
        TextView textview49 = (TextView) findViewById(R.id.textView49);
        Button potionsbutton1 = (Button) findViewById(R.id.potionsbutton2);
        Button imageView35 = (Button) findViewById(R.id.imageView35);
        TextView textview155 = (TextView) findViewById(R.id.textView155);
        Button button32 = (Button) findViewById(R.id.button32);
        TextView textview15 = (TextView) findViewById(R.id.textView15);
        TextView textViewconrats = (TextView) findViewById(R.id.textViewconrats);
        Button button322 = (Button) findViewById(R.id.button322);
        TextView textview55 = (TextView) findViewById(R.id.textView55);
        TextView textViewconrats2 = (TextView) findViewById(R.id.textViewconrats2);
        Button button3222 = (Button) findViewById(R.id.button3222);
        TextView textview552 = (TextView) findViewById(R.id.textView552);
        TextView textview761 = (TextView) findViewById(R.id.textView761);
        Button button361 = (Button) findViewById(R.id.button361);
        TextView textview871 = (TextView) findViewById(R.id.textView871);
        Button button371 = (Button) findViewById(R.id.button371);

        TextView textview76 = (TextView) findViewById(R.id.textView76);
        Button button36 = (Button) findViewById(R.id.button36);
        TextView textview87 = (TextView) findViewById(R.id.textView87);
        Button button37 = (Button) findViewById(R.id.button37);

        TextView vivoname = (TextView) findViewById(R.id.textView104);
        TextView birthdate = (TextView) findViewById(R.id.textView105);
        Button buttoncontact = (Button) findViewById(R.id.contactbutton);



        TextView textViewconrats3 = (TextView) findViewById(R.id.textViewconrats3);
        Button button3221 = (Button) findViewById(R.id.button3221);
        TextView textview551 = (TextView) findViewById(R.id.textView551);
        Button okbutton = (Button) findViewById(R.id.button32221);
        TextView congra = (TextView) findViewById(R.id.textViewconrats21);
        TextView textView762 = (TextView) findViewById(R.id.textView762);

        Button button362 = (Button) findViewById(R.id.button362);


        TextView headert = (TextView) findViewById(R.id.textView763);
        Button buttonno2 = (Button) findViewById(R.id.button363);
        Button buttonyes2 = (Button) findViewById(R.id.button373);

        TextView headert2 = (TextView) findViewById(R.id.textView101);
        drinkheader4.setTextSize(MENUTEXTFONTSIZE);
        drinkheader6.setTextSize(MENUTEXTFONTSIZE);
        cappucionoheader.setTextSize(MENUTEXTFONTSIZE);


        final Button cancelcoinwarning =(Button) findViewById(R.id.imageView34);
        cancelcoinwarning.setText("D'accord");


        headert2.setText("ATTENTION");
        headert.setText("ATTENTION");
        buttonno2.setText("NON");
        buttonyes2.setText("OUI");

        sharefreindstext = "Partagez votre enthousiasme pour Vivo";
        textView762.setText("INFORMATION");

        button362.setText("D'accord");
        okbutton.setText("D'accord");
        congra.setText("ACHAT");


        textViewconrats3.setText("JEU BONUS");
        button3221.setText("COLLECTE");
        textview551.setText("Vous avez gagné");



        TextView eyebandtext = (TextView) findViewById(R.id.eyebandetext);
        eyebandtext.setTextSize(15);
        eyebandtext.setText("BANDES D'OEIL");
        buttoncontact.setText("CONTACT");
        vivoname.setText("Vivo Prénom");
        birthdate.setText("Date de Naissance");
        textview46.setText("Vous n'avez plus de cœurs pour jouer! S'il vous plaît, attendez");
        textview48.setText("Ou regarder une vidéo pour jouer.");
        textview49.setText("OBTENEZ DES POTONS");
        potionsbutton1.setText("ACHETER DES POTONS");
        imageView35.setText("REGARDER la VIDEO");
        textview155.setText("DÉVELOPPEMENT DU CERVEAU");
        button32.setText("COLLECTE");
        textViewconrats.setText("FIDÉLITÉ BONUS");
        button322.setText("COLLECTE");
        textview55.setText("Vous avez gagné");
        textview15.setText("Vous avez gagné");
        textViewconrats2.setText("BONUS AWARD");
        button3222.setText("COLLECTE");
        textview552.setText("Vous avez gagné");
        textview761.setText("ATTENTION");
        button361.setText("D'accord");
        textview871.setText("Votre énergie globale en dessous de% 20. S'il vous plaît nourrir et aimer votre Vivo.");

        textview76.setText("ATTENTION");
        button36.setText("OUI");
        textview87.setText("Vous créez un nouveau caractère. Toutes vos informations de jeu seront protégées.");
        button37.setText("NON");

        shareyourvivo = "Partager " + CharacterName;
        textview9.setText("Notification");
        textView10.setText("Son");
        textView11.setText("OPTIONS");
        textView14.setText("CRÉDITS");
        textView33.setText("Vibration");
        textView53.setText("Langue");


        textView28.setText("Coordinateur de Projet");
        textView31.setText("Project Creator");
        textView35.setText("Développeur en Chef");
        textView56.setText("Directeur marketing");




        buycoin.setText("ACHETER COIN");
        newgamebutton.setText("NOUVEAU CARACTÈRE");
        buttoncontinue.setText("CONTINUER");
        faqbutton.setText("CRÉDITS");
        option.setText("OPTIONS");
        sharelink.setText("PARTAGER AVEC DES AMIS");
        signin1.setText("LEADERBOARD");
        signin2.setText("LEADERBOARD");



        pizzaheader.setText("PIZZA");
        hamburgerheader.setText("BURGER");
        frenchfriesheader.setText("FRITES");
        fishheader.setText("POISSON");
        chickenheader.setText("POULET");
        tboneheader.setText("T-BONE");
        meatarmheader.setText("SANDWICH");
        porkheader.setText("DINDE");
        hotdogheader.setText("HOTDOG");

        carrotheader.setText("CAROTTE");
        saladheader.setText("CHAMPIGNON");
        tomatoheader.setText("TOMATE");
        pumpkinheader.setText("CITROUILLE");
        peesheader.setText("HARICOT");
        cornheader.setText("MAÏS");
        chilisheader.setText("CHILIS");
        broccoliheader.setText("BROCOLI");
        desertheader6.setText("PAPRIKA");

        applehader.setText("POMME");
        orangeheader.setText("POIRE");
        frenchtoastheader.setText("RAISIN");
        cheeseheader.setText("BAIE");
        soupheader.setText("CERISE");
        watermelonheader.setText("PASTÈQUE");
        kiwiheader.setText("KIWI");
        bananaheader.setText("BANANE");
        regionalheader6.setText("ANANAS");

        noodleheader.setText("TACO");
        regionalheader3.setText("PAËLLA");
        siskebapheader.setText("SHISH KEBAB");
        regionalheader1.setText("NOUILLE");
        regionalheader2.setText("DONER KEBAB");
        regionalheader4.setText("SUSHI");


        brownieheader.setText("BISCUIT");
        cheesecakeheader.setText("CUPCAKE");
        desertheader3.setText("CRÈME GLACÉE");
        desertheader1.setText("DONUT");
        desertheader2.setText("CHOCOLAT");
        desertheader4.setText("CACAO ICE");
        desertheader5.setText("CRÊPE");

        drinkheader1.setText("EAU");
        drinkheader2.setText("LAIT");
        drinkheader3.setText("THÉ");
        juiceheader.setText("LIMONADE");
        drinkheader5.setText("CAFÉ");
        cokeheader.setText("ESPRESSO");
        drinkheader6.setText("JUS D'ORANGE");
        cappucionoheader.setText("JUS DE CERISE");
        drinkheader4.setText("JUS DE FRUITS");

        greensoapheader.setText("VERT");
        cellsoapheader.setText("ROUGE");
        greendarkhedar.setText("JAUNE");
        seaspongeheader.setText("ROSE");
        soap1header.setText("OLIVE");
        soap2header.setText("BLEU");


        hygieneheader.setText("HYGIÈNE");
        lovepheader.setText("AMOUR");
        hungerpheader.setText("FAIM");
        sleeppheader.setText("SOMMEIL");
        gamepheader.setText("JEU");
        allinpheader.setText("TOUT");

        mealttextview.setText("REPAS");
        regionalview.setText("RÉGIONAL");
        textView20.setText("NETTOYAGE");
        textView60.setText("POTIONS");
        desertview.setText("BONBONS");
        textView18.setText("LÉGUMES");
        fruittextview.setText("FRUITS");
        optiontextview.setText("OPTIONS");
        drinkview.setText("BOISSONS");


        b1.setText("CUISINE");
        b2.setText("NETTOYAGE");
        b3.setText("WC");
        b4.setText("JEUX");
        b5.setText("CHAMBRE");


        edittext3.setText("FAIM");
        edittext4.setText("HYGIÈNE");
        edittext6.setText("VESSIE");
        edittext7.setText("SOMMEIL");
        edittext8.setText("AMOUR");



        SharedPreferences shared = getSharedPreferences("info", MODE_PRIVATE);
        String Vivoidtext = shared.getString("vivoid", "");
        String name = shared.getString("charactername", "");
        String lastname = shared.getString("lastname", "");
        String Birthdate = shared.getString("birthdate", "");


        edittext12.setText(CharacterName);
        edittext13.setText(GoogleId);
        edittext14.setText(Birthdate);


        signin.setText("LEADERBOARD");
        button29.setText("LEADERBOARD");

        t7.setText("VIVO PASS");
        b19.setText("D'accord");
        sharetext.setText("Voulez-vous partager ?");
        b7.setText("Arrière");
        b8.setText("Partager");





    }


    public void pluscoinlayout(){




        final RelativeLayout iquplevel = (RelativeLayout) findViewById(R.id.pluscoinlayout);

        final Button simpbutton = (Button) findViewById(R.id.simpilictyicon);
        new CountDownTimer(SLIDEANIMDUR, 100) {
            public void onTick(long milsec) {


            }

            public void onFinish() {

                simpbutton.setEnabled(true);
                simpbutton.setClickable(true);
                iquplevel.setVisibility(View.INVISIBLE);
            }
        }.start();



    }



    public void pluscoinlayout4(){
        final FrameLayout disableallchild = (FrameLayout) findViewById(R.id.draglayout);
        final FrameLayout disableallchild2option = (FrameLayout) findViewById(R.id.draglayout2);
        final ImageView main = (ImageView) findViewById(R.id.imageView);

        final Button shop = (Button) findViewById(R.id.shopframeimg);
        final Button share = (Button) findViewById(R.id.imageButtonshare);
        final TextView name = (TextView) findViewById(R.id.name);
        final RelativeLayout rel = (RelativeLayout) findViewById(R.id.vivorelative);
        final ImageButton peebtn = (ImageButton) findViewById(R.id.peefrm);
        final FrameLayout vivoidlayout = (FrameLayout) findViewById(R.id.VivoId);

        final TextView name2 = (TextView) findViewById(R.id.name2);

        final FrameLayout iquplevel = (FrameLayout) findViewById(R.id.VivoId);


        new CountDownTimer(SLIDEANIMDUR, 100) {
            public void onTick(long milsec) {


            }

            public void onFinish() {
                final RelativeLayout coinlayout = (RelativeLayout) findViewById(R.id.coinlayout);
                coinlayout.setEnabled(true);
                disableallchild.setVisibility(View.INVISIBLE);
                main.setEnabled(true);
                shop.setEnabled(true);
                share.setEnabled(true);

                name2.setVisibility(View.INVISIBLE);
                name.setVisibility(View.VISIBLE);
                name.setEnabled(true);
                iquplevel.setVisibility(View.INVISIBLE);
            }
        }.start();



    }


public void disablegamebtns()

{
    final Button simpbutton = (Button) findViewById(R.id.simpilictyicon);
    final Button opbutton = (Button) findViewById(R.id.buttonoperation);
    final Button colorbtn = (Button) findViewById(R.id.colordeception);
    final Button membutton = (Button) findViewById(R.id.memorygame);
    final Button pickbtn = (Button) findViewById(R.id.colorpick);
    final Button sortbtn = (Button) findViewById(R.id.calc);

    simpbutton.setEnabled(false);
    opbutton.setEnabled(false);
    colorbtn.setEnabled(false);
    membutton.setEnabled(false);
    pickbtn.setEnabled(false);
    sortbtn.setEnabled(false);
}
    public void enablegamebtns()

    {
        final Button simpbutton = (Button) findViewById(R.id.simpilictyicon);
        final Button opbutton = (Button) findViewById(R.id.buttonoperation);
        final Button colorbtn = (Button) findViewById(R.id.colordeception);
        final Button membutton = (Button) findViewById(R.id.memorygame);
        final Button pickbtn = (Button) findViewById(R.id.colorpick);
        final Button sortbtn = (Button) findViewById(R.id.calc);

        simpbutton.setEnabled(true);
        opbutton.setEnabled(true);
        colorbtn.setEnabled(true);
        membutton.setEnabled(true);
        pickbtn.setEnabled(true);
        sortbtn.setEnabled(true);
    }

    public void pluscoinlayout3(){




        final RelativeLayout iquplevel = (RelativeLayout) findViewById(R.id.coinwarning);

        final Button simpbutton = (Button) findViewById(R.id.simpilictyicon);
        new CountDownTimer(SLIDEANIMDUR, 100) {
            public void onTick(long milsec) {


            }

            public void onFinish() {
                simpbutton.setEnabled(true);
                enablegamebtns();
                iquplevel.setVisibility(View.INVISIBLE);
            }
        }.start();



    }

    public void warningbox(){




        final RelativeLayout iquplevel = (RelativeLayout) findViewById(R.id.warningbox);


        new CountDownTimer(SLIDEANIMDUR, 100) {
            public void onTick(long milsec) {


            }

            public void onFinish() {

                iquplevel.setVisibility(View.INVISIBLE);
            }
        }.start();



    }
    public void pluscoinlayout9(){




        final RelativeLayout iquplevel = (RelativeLayout) findViewById(R.id.gameenergywarning);


        new CountDownTimer(SLIDEANIMDUR, 100) {
            public void onTick(long milsec) {


            }

            public void onFinish() {
                enablegamebtns();
                iquplevel.setVisibility(View.INVISIBLE);
            }
        }.start();



    }
    public void pluscoinlayout8(){




        final RelativeLayout iquplevel = (RelativeLayout) findViewById(R.id.warningbox3);


        new CountDownTimer(SLIDEANIMDUR, 100) {
            public void onTick(long milsec) {


            }

            public void onFinish() {

                iquplevel.setVisibility(View.INVISIBLE);
            }
        }.start();



    }


    public void pluscoinlayout7(){




        final RelativeLayout iquplevel = (RelativeLayout) findViewById(R.id.warningbox2);
        final Button questionunlock = (Button) findViewById(R.id.questionunlock);
        final Button questionunlock2 = (Button) findViewById(R.id.questionunlock2);
        final Button questionplus5game = (Button) findViewById(R.id.questionplus5);
        final Button questionplus5game2 = (Button) findViewById(R.id.questionplus52);
        final Button questionnodd = (Button) findViewById(R.id.questionnoadd);
        final Button questionnodd2 = (Button) findViewById(R.id.questionnoadd2);

        final Button questionnmult2 = (Button) findViewById(R.id.questionmult2);
        final Button questionnmult22 = (Button) findViewById(R.id.questionmult22);

        new CountDownTimer(SLIDEANIMDUR, 100) {
            public void onTick(long milsec) {


            }

            public void onFinish() {

                questionplus5game.setVisibility(View.VISIBLE);
                questionplus5game2.setVisibility(View.INVISIBLE);

                questionnodd.setVisibility(View.VISIBLE);
                questionnodd2.setVisibility(View.INVISIBLE);

                questionunlock2.setVisibility(View.INVISIBLE);
                questionunlock.setVisibility(View.VISIBLE);
                iquplevel.setVisibility(View.INVISIBLE);

                questionnmult2.setVisibility(View.VISIBLE);
                        questionnmult22.setVisibility(View.INVISIBLE);

                questionplus5game.setEnabled(true);
                        questionnodd.setEnabled(true);
                questionunlock.setEnabled(true);
                        questionnmult2 .setEnabled(true);
            }
        }.start();



    }



    public void pluscoinlayout6(){




        final RelativeLayout iquplevel = (RelativeLayout) findViewById(R.id.pluscoinlayout3);


        new CountDownTimer(SLIDEANIMDUR, 100) {
            public void onTick(long milsec) {


            }

            public void onFinish() {

                iquplevel.setVisibility(View.INVISIBLE);
            }
        }.start();



    }


    public void pluscoinlayout5(){




        final RelativeLayout iquplevel = (RelativeLayout) findViewById(R.id.plusonelifelayout);


        new CountDownTimer(SLIDEANIMDUR, 100) {
            public void onTick(long milsec) {


            }

            public void onFinish() {
                enablegamebtns();
                iquplevel.setVisibility(View.INVISIBLE);
            }
        }.start();



    }

    public void pluscoinlayout2(){




        final RelativeLayout iquplevel = (RelativeLayout) findViewById(R.id.pluscoinlayout2);


        new CountDownTimer(SLIDEANIMDUR, 100) {
            public void onTick(long milsec) {


            }

            public void onFinish() {

                iquplevel.setVisibility(View.INVISIBLE);
            }
        }.start();



    }



    public void coinwinlayout(){




        final RelativeLayout iquplevel = (RelativeLayout) findViewById(R.id.iquplevel);


        new CountDownTimer(SLIDEANIMDUR, 100) {
            public void onTick(long milsec) {


            }

            public void onFinish() {

               iquplevel.setVisibility(View.INVISIBLE);
            }
        }.start();



    }



    public void updateSpanish()

    {


        SharedPreferences pref;
        pref = getSharedPreferences("info", MODE_PRIVATE);
        final SharedPreferences.Editor editor = pref.edit();
        editor.putInt("gamelang", SPANISH);

        editor.commit();


        gamelang=SPANISH;
        Button b1 = (Button) findViewById(R.id.button14);
        Button b2 = (Button) findViewById(R.id.button15);
        Button b3 = (Button) findViewById(R.id.button18);
        Button b4 = (Button) findViewById(R.id.button17);
        Button b5 = (Button) findViewById(R.id.button16);
        TextView edittext3 = (TextView) findViewById(R.id.editText3);
        TextView edittext4 = (TextView) findViewById(R.id.editText4);
        TextView edittext6 = (TextView) findViewById(R.id.editText6);
        TextView edittext7 = (TextView) findViewById(R.id.editText7);
        TextView edittext8 = (TextView) findViewById(R.id.editText8);

        TextView edittext12 = (TextView) findViewById(R.id.editText12);
        TextView edittext13= (TextView) findViewById(R.id.editText13);
        TextView edittext14 = (TextView) findViewById(R.id.editText14);

        Button signin = (Button) findViewById(R.id.sign_in_button);
        Button button29 = (Button) findViewById(R.id.button29);
        TextView t7= (TextView) findViewById(R.id.textView7);
        Button b19 = (Button) findViewById(R.id.button19);
        TextView sharetext = (TextView) findViewById(R.id.sharetext);
        Button b7 = (Button) findViewById(R.id.button7);
        Button b8 = (Button) findViewById(R.id.button8);


        TextView mealttextview = (TextView ) findViewById(R.id.mealtextview);
        TextView regionalview = (TextView ) findViewById(R.id.regionalview);
        TextView textView20 = (TextView ) findViewById(R.id.textView20);
        TextView textView60 = (TextView ) findViewById(R.id.textView60);
        TextView desertview = (TextView ) findViewById(R.id.desertview);
        TextView textView18 = (TextView ) findViewById(R.id.textView18);
        TextView fruittextview = (TextView ) findViewById(R.id.fruittextview);
        TextView optiontextview = (TextView ) findViewById(R.id.optiontextview);
        TextView drinkview = (TextView ) findViewById(R.id.drinkview);



        final TextView watermelonheader = (TextView) findViewById(R.id.watermelontext2);
        final TextView tomatoheader = (TextView) findViewById(R.id.tomatotext2);
        final TextView cappucionoheader = (TextView) findViewById(R.id.onionringsltext2);

        final TextView pumpkinheader = (TextView) findViewById(R.id.pumpkintext2);
        final TextView peesheader = (TextView) findViewById(R.id.peestext2);
        final TextView kiwiheader = (TextView) findViewById(R.id.kiwitext2);
        final TextView hotdogheader = (TextView) findViewById(R.id.hotdogtext2);
        final TextView cornheader = (TextView) findViewById(R.id.corntext2);

        final TextView chilisheader = (TextView) findViewById(R.id.chilistext2);
        final TextView broccoliheader = (TextView) findViewById(R.id.broccolitext2);
        final TextView bananaheader = (TextView) findViewById(R.id.bananatext2);
        final TextView regionalheader1 = (TextView) findViewById(R.id.regional1text2);
        final TextView regionalheader2 = (TextView) findViewById(R.id.regional2text2);
        final TextView regionalheader3 = (TextView) findViewById(R.id.regional3text2);
        final TextView regionalheader4 = (TextView) findViewById(R.id.regional4text2);
        final TextView regionalheader5 = (TextView) findViewById(R.id.regional5text2);
        final TextView regionalheader6 = (TextView) findViewById(R.id.regional6text2);
        final TextView siskebapheader = (TextView) findViewById(R.id.siskebaptext2);
        final TextView drinkheader1 = (TextView) findViewById(R.id.drinks1text2);
        final TextView drinkheader2 = (TextView) findViewById(R.id.drinks2text2);
        final TextView drinkheader3 = (TextView) findViewById(R.id.drinks3text2);
        final TextView drinkheader4 = (TextView) findViewById(R.id.drinks4text2);
        final TextView drinkheader5 = (TextView) findViewById(R.id.drinks5text2);
        final TextView drinkheader6 = (TextView) findViewById(R.id.drinks6text2);
        final TextView desertheader1 = (TextView) findViewById(R.id.desert1text2);
        final TextView desertheader2 = (TextView) findViewById(R.id.desert2text2);
        final TextView desertheader3 = (TextView) findViewById(R.id.desert3text2);
        final TextView desertheader4 = (TextView) findViewById(R.id.desert4text2);
        final TextView desertheader5 = (TextView) findViewById(R.id.desert5text2);
        final TextView desertheader6 = (TextView) findViewById(R.id.desert6text2);


        final TextView pizzaheader = (TextView) findViewById(R.id.pizzatext);
        final TextView hamburgerheader = (TextView) findViewById(R.id.hamburgertext2);
        final TextView frenchfriesheader = (TextView) findViewById(R.id.frenchfriestext2);
        final TextView chickenheader = (TextView) findViewById(R.id.chickenlegtext2);
        final TextView fishheader = (TextView) findViewById(R.id.fishtext2);
        final TextView tboneheader = (TextView) findViewById(R.id.tbonetext2);
        final TextView meatarmheader = (TextView) findViewById(R.id.meatarmtext2);
        final TextView porkheader = (TextView) findViewById(R.id.porktext2);

        final TextView greensoapheader = (TextView) findViewById(R.id.greensoaptext2);
        final TextView cellsoapheader = (TextView) findViewById(R.id.cellsoaptext2);
        final TextView seaspongeheader = (TextView) findViewById(R.id.seaspongetext2);
        final TextView greendarkhedar = (TextView) findViewById(R.id.greendarksoaptext2);
        final TextView soap1header = (TextView) findViewById(R.id.soap1text2);
        final TextView soap2header = (TextView) findViewById(R.id.soap2text2);

        final TextView sleeppheader = (TextView) findViewById(R.id.sleepotiontext2);
        final TextView hungerpheader = (TextView) findViewById(R.id.hungerpotiontext2);
        final TextView hygieneheader = (TextView) findViewById(R.id.hygienepotiontext2);
        final TextView lovepheader = (TextView) findViewById(R.id.lovepotiontext2);
        final TextView gamepheader = (TextView) findViewById(R.id.gamepotiontext2);
        final TextView allinpheader = (TextView) findViewById(R.id.allinpotiontext2);

        final TextView cokeheader = (TextView) findViewById(R.id.coketext2);
        final TextView juiceheader = (TextView) findViewById(R.id.juicetext2);
        final TextView carrotheader = (TextView) findViewById(R.id.carrottext2);
        final TextView saladheader = (TextView) findViewById(R.id.saladtext2);

        final TextView applehader = (TextView) findViewById(R.id.appletext2);
        final TextView orangeheader = (TextView) findViewById(R.id.orangetext2);
        final TextView noodleheader = (TextView) findViewById(R.id.noodletext2);
        final TextView brownieheader = (TextView) findViewById(R.id.brownietext2);
        final TextView cheesecakeheader = (TextView) findViewById(R.id.cheesecaktext2);


        final TextView frenchtoastheader = (TextView) findViewById(R.id.frenchtoasttext2);
        final TextView cheeseheader = (TextView) findViewById(R.id.cheesetext2);
        final TextView soupheader = (TextView) findViewById(R.id.souptext2);


        Button newgamebutton = (Button) findViewById(R.id.button23);
        Button buttoncontinue = (Button) findViewById(R.id.buttoncontinue);
        Button faqbutton = (Button) findViewById(R.id.faqbutton);
        Button option = (Button) findViewById(R.id.button33);
        Button sharelink = (Button) findViewById(R.id.sharelinkbutton);
        Button signin1 = (Button) findViewById(R.id.buttongooglesign);
        Button signin2 = (Button) findViewById(R.id.buttongoogleleader);

        Button buycoin = (Button) findViewById(R.id.Buycoinbutton);



        TextView textview9 = (TextView) findViewById(R.id.textView9);
        TextView textView10 = (TextView) findViewById(R.id.textView10);
        TextView textView33 = (TextView) findViewById(R.id.textView33);
        TextView textView53 = (TextView) findViewById(R.id.textView53);
        TextView textView11 = (TextView) findViewById(R.id.textView11);
        TextView textView28 = (TextView) findViewById(R.id.textView28);
        TextView textView31 = (TextView) findViewById(R.id.textView31);
        TextView textView35 = (TextView) findViewById(R.id.textView35);
        TextView textView56 = (TextView) findViewById(R.id.textView56);
        TextView textView14 = (TextView) findViewById(R.id.textView14);



        TextView textview46 = (TextView) findViewById(R.id.textView46);
        TextView textview48 = (TextView) findViewById(R.id.textView48);
        TextView textview49 = (TextView) findViewById(R.id.textView49);
        Button potionsbutton1 = (Button) findViewById(R.id.potionsbutton2);
        Button imageView35 = (Button) findViewById(R.id.imageView35);
        TextView textview155 = (TextView) findViewById(R.id.textView155);
        Button button32 = (Button) findViewById(R.id.button32);
        TextView textview15 = (TextView) findViewById(R.id.textView15);
        TextView textViewconrats = (TextView) findViewById(R.id.textViewconrats);
        Button button322 = (Button) findViewById(R.id.button322);
        TextView textview55 = (TextView) findViewById(R.id.textView55);
        TextView textViewconrats2 = (TextView) findViewById(R.id.textViewconrats2);
        Button button3222 = (Button) findViewById(R.id.button3222);
        TextView textview552 = (TextView) findViewById(R.id.textView552);
        TextView textview761 = (TextView) findViewById(R.id.textView761);
        Button button361 = (Button) findViewById(R.id.button361);
        TextView textview871 = (TextView) findViewById(R.id.textView871);
        Button button371 = (Button) findViewById(R.id.button371);

        TextView textview76 = (TextView) findViewById(R.id.textView76);
        Button button36 = (Button) findViewById(R.id.button36);
        TextView textview87 = (TextView) findViewById(R.id.textView87);
        Button button37 = (Button) findViewById(R.id.button37);


        TextView vivoname = (TextView) findViewById(R.id.textView104);
        TextView birthdate = (TextView) findViewById(R.id.textView105);



        Button buttoncontact = (Button) findViewById(R.id.contactbutton);


        Button okbutton = (Button) findViewById(R.id.button32221);
        TextView congra = (TextView) findViewById(R.id.textViewconrats21);


        TextView textView762 = (TextView) findViewById(R.id.textView762);

        Button button362 = (Button) findViewById(R.id.button362);



        TextView headert = (TextView) findViewById(R.id.textView763);
        Button buttonno2 = (Button) findViewById(R.id.button363);
        Button buttonyes2 = (Button) findViewById(R.id.button373);

        TextView headert2 = (TextView) findViewById(R.id.textView101);
        final Button cancelcoinwarning =(Button) findViewById(R.id.imageView34);
        cancelcoinwarning.setText("BUENO");
        headert2.setText("ADVERTENCIA");
        drinkheader4.setTextSize(MENUTEXTFONTSIZE-1);
        drinkheader6.setTextSize(MENUTEXTFONTSIZE-1);
        cappucionoheader.setTextSize(MENUTEXTFONTSIZE-1);
        headert.setText("ADVERTENCIA");
        buttonno2.setText("NO");
        buttonyes2.setText("SÍ");



        textView762.setText("INFORMACIÓN");
        button362.setText("BUENO");


        sharefreindstext = "Compartir Vivo con los amigos";
        okbutton.setText("BUENO");
        congra.setText("COMPRA");



        buttoncontact.setText("CONTACTO");
        vivoname.setText("Vivo Nombre");
        birthdate.setText("Fecha de Nacimiento");



        TextView textViewconrats3 = (TextView) findViewById(R.id.textViewconrats3);
        Button button3221 = (Button) findViewById(R.id.button3221);
        TextView textview551 = (TextView) findViewById(R.id.textView551);

        textViewconrats3.setText("PREMIO DE JUEGO");
        button3221.setText("RECOGER");
        textview551.setText("Usted ha ganado");




        TextView eyebandtext = (TextView) findViewById(R.id.eyebandetext);
        eyebandtext.setText("BANDAS DE OJO");
        eyebandtext.setTextSize(15);
        textview46.setText("¡No tienes más corazones para jugar! Por favor espera");
        textview48.setText("O ver un video para jugar.");
        textview49.setText("GET POCIONES");
        potionsbutton1.setText("POCIONES SHOP");
        imageView35.setText("VER VIDEO");
        textview155.setText("DESARROLLO CEREBRA");
        button32.setText("RECOGER");
        textViewconrats.setText("BONO DE LEALTAD");
        button322.setText("RECOGER");
        textview55.setText("Usted ha ganado");
        textview15.setText("Usted ha ganado");
        textViewconrats2.setText("Premio del Bono");
        button3222.setText("RECOGER");
        textview552.setText("Usted ha ganado");
        textview761.setText("ADVERTENCIA");
        button361.setText("BUENO");
        textview871.setText("Tu energia es menor que %20. Alimante y ama a tu Vivo por favor.");

        textview76.setText("ADVERTENCIA");
        button36.setText("SÍ");
        textview87.setText("Estás creando un nuevo carácter. Toda la información de tu juego estará protegida.");
        button37.setText("NO");




        textview9.setText("Notificación");
        textView10.setText("Sonido");
        textView11.setText("OPCIONES");
        textView14.setText("CRÉDITOS");
        textView33.setText("Vibración");
        textView53.setText("Idioma");
        textView28.setText("Coordinador Projec");
        textView31.setText("Project Creator");
        textView35.setText("Cheif es Develeop");
        textView56.setText("Director de marketing");
        textView14.setText("CRÉDITOS");




        buycoin.setText("COMPRAR MONEDA");
        newgamebutton.setText("NUEVO CARÁCTER");
        buttoncontinue.setText("CONTINUAR");
        faqbutton.setText("CRÉDITOS");
        option.setText("OPCIONES");
        sharelink.setText("COMPARTIR CON AMIGOS");
        signin1.setText("LEADERBOARD");
        signin2.setText("LEADERBOARD");



        pizzaheader.setText("PIZZA");
        hamburgerheader.setText("BURGER");
        frenchfriesheader.setText("PAPAS FRITAS");
        fishheader.setText("PESCADO");
        chickenheader.setText("POLLO");
        tboneheader.setText("T-BONE");
        meatarmheader.setText("SÁNDWICH");
        porkheader.setText("PAVO");
        hotdogheader.setText("HOTDOG");

        carrotheader.setText("ZANAHORIA");
        saladheader.setText("HONGO");
        tomatoheader.setText("TOMATE");
        pumpkinheader.setText("CALABAZA");
        peesheader.setText("FRIJOLES");
        cornheader.setText("MAIZ");
        chilisheader.setText("CHILIS");
        broccoliheader.setText("BRÓCOLI");
        desertheader6.setText("PAPRIKA");

        applehader.setText("MANZANA");
        orangeheader.setText("PERA");
        frenchtoastheader.setText("UVA");
        cheeseheader.setText("FRESA");
        soupheader.setText("CEREZA");
        watermelonheader.setText("SANDÍA");
        kiwiheader.setText("KIWI");
        bananaheader.setText("PLÁTANO");
        regionalheader6.setText("PIÑA");

        noodleheader.setText("TACO");
        regionalheader3.setText("PAELLA");
        siskebapheader.setText("SHISH KEBAB");
        regionalheader1.setText("CABEZA");
        regionalheader2.setText("DONER KEBAB");
        regionalheader4.setText("SUSHI");


        brownieheader.setText("GALLETA");
        cheesecakeheader.setText("MAGDALENA");
        desertheader3.setText("HELADO");
        desertheader1.setText("DONUT");
        desertheader2.setText("CHOCOLATE");
        desertheader4.setText("CACAO ICE");
        desertheader5.setText("CREPE");

        drinkheader1.setText("AGUA");
        drinkheader2.setText("LECHE");
        drinkheader3.setText("TÉ");
        juiceheader.setText("LIMONADA");
        drinkheader5.setText("CAFÉ");
        cokeheader.setText("ESPRESSO");
        drinkheader6.setText("ZUMO DE NARANJA");
        cappucionoheader.setText("ZUMO DE CEREZA");
        drinkheader4.setText("ZUMO MEZCLA");

        greensoapheader.setText("VERDE");
        cellsoapheader.setText("ROJO");
        greendarkhedar.setText("AMARILLO");
        seaspongeheader.setText("ROSADO");
        soap1header.setText("OLIVA");
        soap2header.setText("AZUL");


        hygieneheader.setText("HIGIENE");
        lovepheader.setText("AMOR");
        hungerpheader.setText("HAMBRE");
        sleeppheader.setText("DORMIR");
        gamepheader.setText("JUEGO");
        allinpheader.setText("TODOS");


        mealttextview.setText("COMIDAS");
        regionalview.setText("REGIONAL");
        textView20.setText("LIMPIEZA");
        textView60.setText("POCIONES");
        desertview.setText("DULCES");
        textView18.setText("VERDURAS");
        fruittextview.setText("FRUTAS");
        optiontextview.setText("OPCIONES");
        drinkview.setText("BEBIDAS");



        b1.setText("COCINA");
        b2.setText("LIMPIEZA");
        b3.setText("WC");
        b4.setText("JUEGOS");
        b5.setText("DORMITORIO");

        edittext3.setText("HAMBRE");
        edittext4.setText("HIGIENE");
        edittext6.setText("VEJIGA");
        edittext7.setText("DORMIR");
        edittext8.setText("AMOR");




        SharedPreferences shared = getSharedPreferences("info", MODE_PRIVATE);
        String Vivoidtext = shared.getString("vivoid", "");
        String name = shared.getString("charactername", "");
        String lastname = shared.getString("lastname", "");
        String Birthdate = shared.getString("birthdate", "");



        edittext12.setText(CharacterName);
        edittext13.setText(GoogleId);
        edittext14.setText(Birthdate);





        signin.setText("LEADERBOARD");
        button29.setText("LEADERBOARD");

        t7.setText("VIVO PASS");
        b19.setText("BUENO");
        sharetext.setText("Te gustaría compartir ?");
        b7.setText("Espalda");
        b8.setText("Compartir");

        shareyourvivo = "Compartir " + CharacterName;


    }


    public void updateRussian()

    {


        SharedPreferences pref;
        pref = getSharedPreferences("info", MODE_PRIVATE);
        final SharedPreferences.Editor editor = pref.edit();

        gamelang=RUSSIAN;
        editor.putInt("gamelang", RUSSIAN);

        editor.commit();

        Button buttoncontact = (Button) findViewById(R.id.contactbutton);
        Button b1 = (Button) findViewById(R.id.button14);
        Button b2 = (Button) findViewById(R.id.button15);
        Button b3 = (Button) findViewById(R.id.button18);
        Button b4 = (Button) findViewById(R.id.button17);
        Button b5 = (Button) findViewById(R.id.button16);
        TextView edittext3 = (TextView) findViewById(R.id.editText3);
        TextView edittext4 = (TextView) findViewById(R.id.editText4);
        TextView edittext6 = (TextView) findViewById(R.id.editText6);
        TextView edittext7 = (TextView) findViewById(R.id.editText7);
        TextView edittext8 = (TextView) findViewById(R.id.editText8);

        TextView mealttextview = (TextView ) findViewById(R.id.mealtextview);
        TextView regionalview = (TextView ) findViewById(R.id.regionalview);
        TextView textView20 = (TextView ) findViewById(R.id.textView20);
        TextView textView60 = (TextView ) findViewById(R.id.textView60);
        TextView desertview = (TextView ) findViewById(R.id.desertview);
        TextView textView18 = (TextView ) findViewById(R.id.textView18);
        TextView fruittextview = (TextView ) findViewById(R.id.fruittextview);
        TextView optiontextview = (TextView ) findViewById(R.id.optiontextview);
        TextView drinkview = (TextView ) findViewById(R.id.drinkview);


        TextView edittext12 = (TextView) findViewById(R.id.editText12);
        TextView edittext13= (TextView) findViewById(R.id.editText13);
        TextView edittext14 = (TextView) findViewById(R.id.editText14);

        Button signin = (Button) findViewById(R.id.sign_in_button);
        Button button29 = (Button) findViewById(R.id.button29);
        TextView t7= (TextView) findViewById(R.id.textView7);
        Button b19 = (Button) findViewById(R.id.button19);
        TextView sharetext = (TextView) findViewById(R.id.sharetext);
        Button b7 = (Button) findViewById(R.id.button7);
        Button b8 = (Button) findViewById(R.id.button8);




        final TextView watermelonheader = (TextView) findViewById(R.id.watermelontext2);
        final TextView tomatoheader = (TextView) findViewById(R.id.tomatotext2);
        final TextView cappucionoheader = (TextView) findViewById(R.id.onionringsltext2);

        final TextView pumpkinheader = (TextView) findViewById(R.id.pumpkintext2);
        final TextView peesheader = (TextView) findViewById(R.id.peestext2);
        final TextView kiwiheader = (TextView) findViewById(R.id.kiwitext2);
        final TextView hotdogheader = (TextView) findViewById(R.id.hotdogtext2);
        final TextView cornheader = (TextView) findViewById(R.id.corntext2);

        final TextView chilisheader = (TextView) findViewById(R.id.chilistext2);
        final TextView broccoliheader = (TextView) findViewById(R.id.broccolitext2);
        final TextView bananaheader = (TextView) findViewById(R.id.bananatext2);
        final TextView regionalheader1 = (TextView) findViewById(R.id.regional1text2);
        final TextView regionalheader2 = (TextView) findViewById(R.id.regional2text2);
        final TextView regionalheader3 = (TextView) findViewById(R.id.regional3text2);
        final TextView regionalheader4 = (TextView) findViewById(R.id.regional4text2);
        final TextView regionalheader5 = (TextView) findViewById(R.id.regional5text2);
        final TextView regionalheader6 = (TextView) findViewById(R.id.regional6text2);
        final TextView siskebapheader = (TextView) findViewById(R.id.siskebaptext2);
        final TextView drinkheader1 = (TextView) findViewById(R.id.drinks1text2);
        final TextView drinkheader2 = (TextView) findViewById(R.id.drinks2text2);
        final TextView drinkheader3 = (TextView) findViewById(R.id.drinks3text2);
        final TextView drinkheader4 = (TextView) findViewById(R.id.drinks4text2);
        final TextView drinkheader5 = (TextView) findViewById(R.id.drinks5text2);
        final TextView drinkheader6 = (TextView) findViewById(R.id.drinks6text2);
        final TextView desertheader1 = (TextView) findViewById(R.id.desert1text2);
        final TextView desertheader2 = (TextView) findViewById(R.id.desert2text2);
        final TextView desertheader3 = (TextView) findViewById(R.id.desert3text2);
        final TextView desertheader4 = (TextView) findViewById(R.id.desert4text2);
        final TextView desertheader5 = (TextView) findViewById(R.id.desert5text2);
        final TextView desertheader6 = (TextView) findViewById(R.id.desert6text2);


        final TextView pizzaheader = (TextView) findViewById(R.id.pizzatext);
        final TextView hamburgerheader = (TextView) findViewById(R.id.hamburgertext2);
        final TextView frenchfriesheader = (TextView) findViewById(R.id.frenchfriestext2);
        final TextView chickenheader = (TextView) findViewById(R.id.chickenlegtext2);
        final TextView fishheader = (TextView) findViewById(R.id.fishtext2);
        final TextView tboneheader = (TextView) findViewById(R.id.tbonetext2);
        final TextView meatarmheader = (TextView) findViewById(R.id.meatarmtext2);
        final TextView porkheader = (TextView) findViewById(R.id.porktext2);

        final TextView greensoapheader = (TextView) findViewById(R.id.greensoaptext2);
        final TextView cellsoapheader = (TextView) findViewById(R.id.cellsoaptext2);
        final TextView seaspongeheader = (TextView) findViewById(R.id.seaspongetext2);
        final TextView greendarkhedar = (TextView) findViewById(R.id.greendarksoaptext2);
        final TextView soap1header = (TextView) findViewById(R.id.soap1text2);
        final TextView soap2header = (TextView) findViewById(R.id.soap2text2);

        final TextView sleeppheader = (TextView) findViewById(R.id.sleepotiontext2);
        final TextView hungerpheader = (TextView) findViewById(R.id.hungerpotiontext2);
        final TextView hygieneheader = (TextView) findViewById(R.id.hygienepotiontext2);
        final TextView lovepheader = (TextView) findViewById(R.id.lovepotiontext2);
        final TextView gamepheader = (TextView) findViewById(R.id.gamepotiontext2);
        final TextView allinpheader = (TextView) findViewById(R.id.allinpotiontext2);

        final TextView cokeheader = (TextView) findViewById(R.id.coketext2);
        final TextView juiceheader = (TextView) findViewById(R.id.juicetext2);
        final TextView carrotheader = (TextView) findViewById(R.id.carrottext2);
        final TextView saladheader = (TextView) findViewById(R.id.saladtext2);

        final TextView applehader = (TextView) findViewById(R.id.appletext2);
        final TextView orangeheader = (TextView) findViewById(R.id.orangetext2);
        final TextView noodleheader = (TextView) findViewById(R.id.noodletext2);
        final TextView brownieheader = (TextView) findViewById(R.id.brownietext2);
        final TextView cheesecakeheader = (TextView) findViewById(R.id.cheesecaktext2);


        final TextView frenchtoastheader = (TextView) findViewById(R.id.frenchtoasttext2);
        final TextView cheeseheader = (TextView) findViewById(R.id.cheesetext2);
        final TextView soupheader = (TextView) findViewById(R.id.souptext2);


        Button newgamebutton = (Button) findViewById(R.id.button23);
        Button buttoncontinue = (Button) findViewById(R.id.buttoncontinue);
        Button faqbutton = (Button) findViewById(R.id.faqbutton);
        Button option = (Button) findViewById(R.id.button33);
        Button sharelink = (Button) findViewById(R.id.sharelinkbutton);
        Button signin1 = (Button) findViewById(R.id.buttongooglesign);
        Button signin2 = (Button) findViewById(R.id.buttongoogleleader);

        Button buycoin = (Button) findViewById(R.id.Buycoinbutton);



        TextView textview9 = (TextView) findViewById(R.id.textView9);
        TextView textView10 = (TextView) findViewById(R.id.textView10);
        TextView textView33 = (TextView) findViewById(R.id.textView33);
        TextView textView53 = (TextView) findViewById(R.id.textView53);
        TextView textView11 = (TextView) findViewById(R.id.textView11);
        TextView textView28 = (TextView) findViewById(R.id.textView28);
        TextView textView31 = (TextView) findViewById(R.id.textView31);
        TextView textView35 = (TextView) findViewById(R.id.textView35);
        TextView textView56 = (TextView) findViewById(R.id.textView56);
        TextView textView14 = (TextView) findViewById(R.id.textView14);



        TextView textview46 = (TextView) findViewById(R.id.textView46);
        TextView textview48 = (TextView) findViewById(R.id.textView48);
        TextView textview49 = (TextView) findViewById(R.id.textView49);
        Button potionsbutton1 = (Button) findViewById(R.id.potionsbutton2);
        Button imageView35 = (Button) findViewById(R.id.imageView35);
        TextView textview155 = (TextView) findViewById(R.id.textView155);
        Button button32 = (Button) findViewById(R.id.button32);
        TextView textview15 = (TextView) findViewById(R.id.textView15);
        TextView textViewconrats = (TextView) findViewById(R.id.textViewconrats);
        Button button322 = (Button) findViewById(R.id.button322);
        TextView textview55 = (TextView) findViewById(R.id.textView55);
        TextView textViewconrats2 = (TextView) findViewById(R.id.textViewconrats2);
        Button button3222 = (Button) findViewById(R.id.button3222);
        TextView textview552 = (TextView) findViewById(R.id.textView552);
        TextView textview761 = (TextView) findViewById(R.id.textView761);
        Button button361 = (Button) findViewById(R.id.button361);
        TextView textview871 = (TextView) findViewById(R.id.textView871);
        Button button371 = (Button) findViewById(R.id.button371);

        TextView textview76 = (TextView) findViewById(R.id.textView76);
        Button button36 = (Button) findViewById(R.id.button36);
        TextView textview87 = (TextView) findViewById(R.id.textView87);
        Button button37 = (Button) findViewById(R.id.button37);

        TextView eyebandtext = (TextView) findViewById(R.id.eyebandetext);



        TextView textViewconrats3 = (TextView) findViewById(R.id.textViewconrats3);
        Button button3221 = (Button) findViewById(R.id.button3221);
        TextView textview551 = (TextView) findViewById(R.id.textView551);

        final Button cancelcoinwarning =(Button) findViewById(R.id.imageView34);
        cancelcoinwarning.setText("ХОРОШО");


        textViewconrats3.setText("ИГРОВОЙ БОНУС");
        button3221.setText("СОБРАТЬ");
        textview551.setText("Вы заслужили");

        Button okbutton = (Button) findViewById(R.id.button32221);
        TextView congra = (TextView) findViewById(R.id.textViewconrats21);



        TextView textView762 = (TextView) findViewById(R.id.textView762);

        Button button362 = (Button) findViewById(R.id.button362);

        TextView headert = (TextView) findViewById(R.id.textView763);
        Button buttonno2 = (Button) findViewById(R.id.button363);
        Button buttonyes2 = (Button) findViewById(R.id.button373);
        TextView headert2 = (TextView) findViewById(R.id.textView101);

        headert2.setText("ПРЕДУПРЕЖДЕНИЕ");
        drinkheader4.setTextSize(MENUTEXTFONTSIZE-3);
        drinkheader6.setTextSize(MENUTEXTFONTSIZE-3);
        cappucionoheader.setTextSize(MENUTEXTFONTSIZE-3);
        headert.setText("ПРЕДУПРЕЖДЕНИЕ");
        buttonno2.setText("НЕТ");
        buttonyes2.setText("ДА");


        sharefreindstext = "Поделиться с друзьями Vivo";
        textView762.setText("ИНФОРМАЦИЯ");
        button362.setText("ХОРОШО");


        okbutton.setText("ХОРОШО");
        congra.setText("ПОКУПКА");

        eyebandtext.setTextSize(15);
        eyebandtext.setText("КРЫШКИ СНА");

        TextView vivoname = (TextView) findViewById(R.id.textView104);
        TextView birthdate = (TextView) findViewById(R.id.textView105);
        buttoncontact.setText("контакт");
        vivoname.setText("Vivo имя");
        birthdate.setText("Дата рождения");

        textview46.setText("У вас нет больше сердец для игр! Пожалуйста, подождите");
        textview48.setText("или смотреть видео, чтобы играть в игру.");
        textview49.setText("получить зелий");
        potionsbutton1.setText("купить зелья");
        imageView35.setText("смотреть видео");
        textview155.setText("МОЗГОВОЕ РАЗВИТИЕ");
        button32.setText("СОБРАТЬ");
        textViewconrats.setText("ЛОЯЛЬНОСТЬ БОНУС");
        button322.setText("СОБРАТЬ");
        textview55.setText("Вы заслужили");
        textview15.setText("Вы заслужили");
        textViewconrats2.setText("БОНУС ПОДАРОК");
        button3222.setText("СОБРАТЬ");
        textview552.setText("Вы заслужили");
        textview761.setText("ПРЕДУПРЕЖДЕНИЕ");
        button361.setText("ХОРОШО");
        textview871.setText("Ваша общая энергия ниже 20%. Пожалуйста, кормить и любить свой Vivo.");

        textview76.setText("ПРЕДУПРЕЖДЕНИЕ");
        button36.setText("ДА");
        textview87.setText("Вы создаете новый характер. Вся ваша информация игра будет защищена.");
        button37.setText("НЕТ");





        textview9.setText("уведомление");
        textView10.setText("звук");
        textView33.setText("вибрация");
        textView53.setText("язык");
        textView11.setText("ВАРИАНТ");
        textView28.setText("Координатор проекта");
        textView31.setText("разработчик проекта");
        textView35.setText("Главный разработчик");
        textView56.setText("Директор по маркетингу");
        textView14.setText("КРЕДИТЫ");




        buycoin.setText("КУПИТЬ МОНЕТК");
        newgamebutton.setText("НОВЫЙ ПЕРСОНАЖ");
        buttoncontinue.setText("ПРОДОЛЖАТЬ");
        faqbutton.setText("КРЕДИТЫ");
        option.setText("ОПЦИИ");
        sharelink.setText("ПОДЕЛИТЬСЯ С ДРУЗЬЯМИ");
        signin1.setText("лидер Список");
        signin2.setText("лидер Список");



        pizzaheader.setText("ПИЦЦА");
        hamburgerheader.setText("БУРГЕР");
        frenchfriesheader.setText("ФРИ");
        fishheader.setText("РЫБА");
        chickenheader.setText("КУРИЦА");
        tboneheader.setText("МЯСО");
        meatarmheader.setText("САНДВИЧ");
        porkheader.setText("ИНДЕЙКА");
        hotdogheader.setText("ХОТДОГ");

        carrotheader.setText("МОРКОВЬ");
        saladheader.setText("ГРИБ");
        tomatoheader.setText("ПОМИДОР");
        pumpkinheader.setText("ТЫКВА");
        peesheader.setText("БОБЫ");
        cornheader.setText("КУКУРУЗА");
        chilisheader.setText("ПЕРЕЦ");
        broccoliheader.setText("БРОККОЛИ");
        desertheader6.setText("ПАПРИКА");

        applehader.setText("ЯБЛОКО");
        orangeheader.setText("ГРУША");
        frenchtoastheader.setText("ВИНОГРАД");
        cheeseheader.setText("ЯГОДА");
        soupheader.setText("ВИШНЯ");
        watermelonheader.setText("АРБУЗ");
        kiwiheader.setText("КИВИ");
        bananaheader.setText("БАНАН");
        regionalheader6.setText("АНАНАС");

        noodleheader.setText("ТАКО");
        regionalheader3.setText("ПАЭЛЬЯ");
        siskebapheader.setText("ШАШЛЫК ШИШ");
        regionalheader1.setText("ЛАПШУ");
        regionalheader2.setText("ДОНЕР КЕБАБ");
        regionalheader4.setText("СУШИ");


        brownieheader.setText("ПЕЧЕНЬЕ");
        cheesecakeheader.setText("ПИРОЖНЯ");
        desertheader3.setText("МОРОЖЕНОЕ");
        desertheader1.setText("ПОНЧИК");
        desertheader2.setText("ШОКОЛАД");
        desertheader4.setText("КАКАО ЛЕД");
        desertheader5.setText("БЛИН");

        drinkheader1.setText("ВОДЫ");
        drinkheader2.setText("МОЛОКО");
        drinkheader3.setText("ЧАЙ");
        juiceheader.setText("ЛИМОНАД");
        drinkheader5.setText("КОФЕ");
        cokeheader.setText("ЭСПРЕССО");
        drinkheader6.setText("АПЕЛЬСИНОВЫЙ СОК");
        cappucionoheader.setText("ВИШНЕВЫЙ СОК");
        drinkheader4.setText("СМЕШАННЫЙ СОК");

        greensoapheader.setText("ЗЕЛЕНЫЙ");
        cellsoapheader.setText("красный");
        greendarkhedar.setText("желтый");
        seaspongeheader.setText("розовый");
        soap1header.setText("ОЛИВКОВОЕ");
        soap2header.setText("СИНИЙ");


        hygieneheader.setText("ГИГИЕНА");
        lovepheader.setText("ЛЮБЛЮ");
        hungerpheader.setText("ГОЛОД");
        sleeppheader.setText("СПАТЬ");
        gamepheader.setText("ИГРА");
        allinpheader.setText("ВСЕ");




        mealttextview.setText("ЕДА");
        regionalview.setText("МЕСТНОЕ");
        textView20.setText("ГИГИЕНА");
        textView60.setText("ЗЕЛИЙ");
        desertview.setText("СЛАДОСТИ");
        textView18.setText("ОВОЩИ");
        fruittextview.setText("ФРУКТЫ");
        optiontextview.setText("ОПЦИИ");
        drinkview.setText("НАПИТКИ");


        b1.setText("КУХНЯ");
        b2.setText("ГИГИЕНА");
        b3.setText("ТУАЛЕТ");
        b4.setText("ИГРЫ");
        b5.setText("СПАЛЬНЯ");


        edittext3.setText("ГОЛОД");
        edittext4.setText("ГИГИЕНА");
        edittext6.setText("ТУАЛЕТ");
        edittext7.setText("СОН");
        edittext8.setText("ЛЮБЛЮ");



        SharedPreferences shared = getSharedPreferences("info", MODE_PRIVATE);
        String Vivoidtext = shared.getString("vivoid", "");
        String name = shared.getString("charactername", "");
        String lastname = shared.getString("lastname", "");
        String Birthdate = shared.getString("birthdate", "");

        edittext12.setText(CharacterName);
        edittext13.setText(GoogleId);
        edittext14.setText(Birthdate);



        signin.setText("лидер Список");
        button29.setText("лидер Список");

        t7.setText("VIVO PASS");
        b19.setText("ХОРОШО");
        sharetext.setText("Вы хотите поделиться ?");
        b7.setText("назад");
        b8.setText("Поделиться");

        shareyourvivo = "Поделиться " + CharacterName;

    }

    public void updateChinese()

    {


        SharedPreferences pref;
        pref = getSharedPreferences("info", MODE_PRIVATE);
        final SharedPreferences.Editor editor = pref.edit();

        gamelang=CHINESE;
        editor.putInt("gamelang", CHINESE);

        editor.commit();

        Button buttoncontact = (Button) findViewById(R.id.contactbutton);
        Button b1 = (Button) findViewById(R.id.button14);
        Button b2 = (Button) findViewById(R.id.button15);
        Button b3 = (Button) findViewById(R.id.button18);
        Button b4 = (Button) findViewById(R.id.button17);
        Button b5 = (Button) findViewById(R.id.button16);
        TextView edittext3 = (TextView) findViewById(R.id.editText3);
        TextView edittext4 = (TextView) findViewById(R.id.editText4);
        TextView edittext6 = (TextView) findViewById(R.id.editText6);
        TextView edittext7 = (TextView) findViewById(R.id.editText7);
        TextView edittext8 = (TextView) findViewById(R.id.editText8);

        TextView mealttextview = (TextView ) findViewById(R.id.mealtextview);
        TextView regionalview = (TextView ) findViewById(R.id.regionalview);
        TextView textView20 = (TextView ) findViewById(R.id.textView20);
        TextView textView60 = (TextView ) findViewById(R.id.textView60);
        TextView desertview = (TextView ) findViewById(R.id.desertview);
        TextView textView18 = (TextView ) findViewById(R.id.textView18);
        TextView fruittextview = (TextView ) findViewById(R.id.fruittextview);
        TextView optiontextview = (TextView ) findViewById(R.id.optiontextview);
        TextView drinkview = (TextView ) findViewById(R.id.drinkview);


        TextView edittext12 = (TextView) findViewById(R.id.editText12);
        TextView edittext13= (TextView) findViewById(R.id.editText13);
        TextView edittext14 = (TextView) findViewById(R.id.editText14);

        Button signin = (Button) findViewById(R.id.sign_in_button);
        Button button29 = (Button) findViewById(R.id.button29);
        TextView t7= (TextView) findViewById(R.id.textView7);
        Button b19 = (Button) findViewById(R.id.button19);
        TextView sharetext = (TextView) findViewById(R.id.sharetext);
        Button b7 = (Button) findViewById(R.id.button7);
        Button b8 = (Button) findViewById(R.id.button8);




        final TextView watermelonheader = (TextView) findViewById(R.id.watermelontext2);
        final TextView tomatoheader = (TextView) findViewById(R.id.tomatotext2);
        final TextView cappucionoheader = (TextView) findViewById(R.id.onionringsltext2);

        final TextView pumpkinheader = (TextView) findViewById(R.id.pumpkintext2);
        final TextView peesheader = (TextView) findViewById(R.id.peestext2);
        final TextView kiwiheader = (TextView) findViewById(R.id.kiwitext2);
        final TextView hotdogheader = (TextView) findViewById(R.id.hotdogtext2);
        final TextView cornheader = (TextView) findViewById(R.id.corntext2);

        final TextView chilisheader = (TextView) findViewById(R.id.chilistext2);
        final TextView broccoliheader = (TextView) findViewById(R.id.broccolitext2);
        final TextView bananaheader = (TextView) findViewById(R.id.bananatext2);
        final TextView regionalheader1 = (TextView) findViewById(R.id.regional1text2);
        final TextView regionalheader2 = (TextView) findViewById(R.id.regional2text2);
        final TextView regionalheader3 = (TextView) findViewById(R.id.regional3text2);
        final TextView regionalheader4 = (TextView) findViewById(R.id.regional4text2);
        final TextView regionalheader5 = (TextView) findViewById(R.id.regional5text2);
        final TextView regionalheader6 = (TextView) findViewById(R.id.regional6text2);
        final TextView siskebapheader = (TextView) findViewById(R.id.siskebaptext2);
        final TextView drinkheader1 = (TextView) findViewById(R.id.drinks1text2);
        final TextView drinkheader2 = (TextView) findViewById(R.id.drinks2text2);
        final TextView drinkheader3 = (TextView) findViewById(R.id.drinks3text2);
        final TextView drinkheader4 = (TextView) findViewById(R.id.drinks4text2);
        final TextView drinkheader5 = (TextView) findViewById(R.id.drinks5text2);
        final TextView drinkheader6 = (TextView) findViewById(R.id.drinks6text2);
        final TextView desertheader1 = (TextView) findViewById(R.id.desert1text2);
        final TextView desertheader2 = (TextView) findViewById(R.id.desert2text2);
        final TextView desertheader3 = (TextView) findViewById(R.id.desert3text2);
        final TextView desertheader4 = (TextView) findViewById(R.id.desert4text2);
        final TextView desertheader5 = (TextView) findViewById(R.id.desert5text2);
        final TextView desertheader6 = (TextView) findViewById(R.id.desert6text2);


        final TextView pizzaheader = (TextView) findViewById(R.id.pizzatext);
        final TextView hamburgerheader = (TextView) findViewById(R.id.hamburgertext2);
        final TextView frenchfriesheader = (TextView) findViewById(R.id.frenchfriestext2);
        final TextView chickenheader = (TextView) findViewById(R.id.chickenlegtext2);
        final TextView fishheader = (TextView) findViewById(R.id.fishtext2);
        final TextView tboneheader = (TextView) findViewById(R.id.tbonetext2);
        final TextView meatarmheader = (TextView) findViewById(R.id.meatarmtext2);
        final TextView porkheader = (TextView) findViewById(R.id.porktext2);

        final TextView greensoapheader = (TextView) findViewById(R.id.greensoaptext2);
        final TextView cellsoapheader = (TextView) findViewById(R.id.cellsoaptext2);
        final TextView seaspongeheader = (TextView) findViewById(R.id.seaspongetext2);
        final TextView greendarkhedar = (TextView) findViewById(R.id.greendarksoaptext2);
        final TextView soap1header = (TextView) findViewById(R.id.soap1text2);
        final TextView soap2header = (TextView) findViewById(R.id.soap2text2);

        final TextView sleeppheader = (TextView) findViewById(R.id.sleepotiontext2);
        final TextView hungerpheader = (TextView) findViewById(R.id.hungerpotiontext2);
        final TextView hygieneheader = (TextView) findViewById(R.id.hygienepotiontext2);
        final TextView lovepheader = (TextView) findViewById(R.id.lovepotiontext2);
        final TextView gamepheader = (TextView) findViewById(R.id.gamepotiontext2);
        final TextView allinpheader = (TextView) findViewById(R.id.allinpotiontext2);

        final TextView cokeheader = (TextView) findViewById(R.id.coketext2);
        final TextView juiceheader = (TextView) findViewById(R.id.juicetext2);
        final TextView carrotheader = (TextView) findViewById(R.id.carrottext2);
        final TextView saladheader = (TextView) findViewById(R.id.saladtext2);

        final TextView applehader = (TextView) findViewById(R.id.appletext2);
        final TextView orangeheader = (TextView) findViewById(R.id.orangetext2);
        final TextView noodleheader = (TextView) findViewById(R.id.noodletext2);
        final TextView brownieheader = (TextView) findViewById(R.id.brownietext2);
        final TextView cheesecakeheader = (TextView) findViewById(R.id.cheesecaktext2);


        final TextView frenchtoastheader = (TextView) findViewById(R.id.frenchtoasttext2);
        final TextView cheeseheader = (TextView) findViewById(R.id.cheesetext2);
        final TextView soupheader = (TextView) findViewById(R.id.souptext2);


        Button newgamebutton = (Button) findViewById(R.id.button23);
        Button buttoncontinue = (Button) findViewById(R.id.buttoncontinue);
        Button faqbutton = (Button) findViewById(R.id.faqbutton);
        Button option = (Button) findViewById(R.id.button33);
        Button sharelink = (Button) findViewById(R.id.sharelinkbutton);
        Button signin1 = (Button) findViewById(R.id.buttongooglesign);
        Button signin2 = (Button) findViewById(R.id.buttongoogleleader);

        Button buycoin = (Button) findViewById(R.id.Buycoinbutton);



        TextView textview9 = (TextView) findViewById(R.id.textView9);
        TextView textView10 = (TextView) findViewById(R.id.textView10);
        TextView textView33 = (TextView) findViewById(R.id.textView33);
        TextView textView53 = (TextView) findViewById(R.id.textView53);
        TextView textView11 = (TextView) findViewById(R.id.textView11);
        TextView textView28 = (TextView) findViewById(R.id.textView28);
        TextView textView31 = (TextView) findViewById(R.id.textView31);
        TextView textView35 = (TextView) findViewById(R.id.textView35);
        TextView textView56 = (TextView) findViewById(R.id.textView56);
        TextView textView14 = (TextView) findViewById(R.id.textView14);



        TextView textview46 = (TextView) findViewById(R.id.textView46);
        TextView textview48 = (TextView) findViewById(R.id.textView48);
        TextView textview49 = (TextView) findViewById(R.id.textView49);
        Button potionsbutton1 = (Button) findViewById(R.id.potionsbutton2);
        Button imageView35 = (Button) findViewById(R.id.imageView35);
        TextView textview155 = (TextView) findViewById(R.id.textView155);
        Button button32 = (Button) findViewById(R.id.button32);
        TextView textview15 = (TextView) findViewById(R.id.textView15);
        TextView textViewconrats = (TextView) findViewById(R.id.textViewconrats);
        Button button322 = (Button) findViewById(R.id.button322);
        TextView textview55 = (TextView) findViewById(R.id.textView55);
        TextView textViewconrats2 = (TextView) findViewById(R.id.textViewconrats2);
        Button button3222 = (Button) findViewById(R.id.button3222);
        TextView textview552 = (TextView) findViewById(R.id.textView552);
        TextView textview761 = (TextView) findViewById(R.id.textView761);
        Button button361 = (Button) findViewById(R.id.button361);
        TextView textview871 = (TextView) findViewById(R.id.textView871);
        Button button371 = (Button) findViewById(R.id.button371);

        TextView textview76 = (TextView) findViewById(R.id.textView76);
        Button button36 = (Button) findViewById(R.id.button36);
        TextView textview87 = (TextView) findViewById(R.id.textView87);
        Button button37 = (Button) findViewById(R.id.button37);

        TextView vivoname = (TextView) findViewById(R.id.textView104);
        TextView birthdate = (TextView) findViewById(R.id.textView105);
        TextView eyebandtext = (TextView) findViewById(R.id.eyebandetext);

        TextView textViewconrats3 = (TextView) findViewById(R.id.textViewconrats3);
        Button button3221 = (Button) findViewById(R.id.button3221);
        TextView textview551 = (TextView) findViewById(R.id.textView551);


        TextView textView762 = (TextView) findViewById(R.id.textView762);
        TextView textView87 = (TextView) findViewById(R.id.textView87);
        Button button362 = (Button) findViewById(R.id.button362);


        TextView headert = (TextView) findViewById(R.id.textView763);
        Button buttonno2 = (Button) findViewById(R.id.button363);
        Button buttonyes2 = (Button) findViewById(R.id.button373);
        Button okbutton = (Button) findViewById(R.id.button32221);
        TextView congra = (TextView) findViewById(R.id.textViewconrats21);
        TextView headert2 = (TextView) findViewById(R.id.textView101);
        final Button cancelcoinwarning =(Button) findViewById(R.id.imageView34);
        cancelcoinwarning.setText("好的");
        headert2.setText("警告");
        headert.setText("警告");
        buttonno2.setText("没有");
        buttonyes2.setText("是");

        eyebandtext.setTextSize(15);
        textView762.setText("信息");
        button362.setText("好的 ");

        sharefreindstext = "与朋友分享Vivo";

        okbutton.setText("好的");
        congra.setText("采购 ");

        textViewconrats3.setText("游戏奖金");
        button3221.setText("搜集");
        textview551.setText("你赢了");


        buttoncontact.setText("联系");


        vivoname.setText("Vivo名称");
        birthdate.setText("生日");
        eyebandtext.setText("睡眠乐队");

        textview46.setText("你没有更多的心打游戏！请稍候");
        textview48.setText("或观看视频播放游戏");
        textview49.setText("获取点");
        potionsbutton1.setText("购买选项");
        imageView35.setText("看视频");
        textview155.setText("脑部发育");
        button32.setText("搜集");
        textViewconrats.setText("奖励奖金");
        button322.setText("搜集");
        textview55.setText("你赢了");
        textview15.setText("你赢了");
        textViewconrats2.setText("奖金奖");
        button3222.setText("搜集");
        textview552.setText("你赢了");
        textview761.setText("警告");
        button361.setText("好的");
        textview871.setText("你的整体能量低于％20。 请喂养和爱你的Vivo.");

        textview76.setText("警告");
        button36.setText("是");
        textview87.setText("您正在创建一个新字符。所有的游戏信息将受到保护");
        button37.setText("没有");
        textview9.setText("通知");


        textView10.setText("声音");
        textView33.setText("振动");
        textView53.setText("语言");
        textView11.setText("选项");
        textView28.setText("Project Coordinator");
        textView31.setText("Project Designer");
        textView35.setText("Chief Developer");
        textView56.setText("Chief Marketing Officer");
        textView14.setText("CREDITS");


        drinkheader4.setTextSize(MENUTEXTFONTSIZE);
        drinkheader6.setTextSize(MENUTEXTFONTSIZE);
        cappucionoheader.setTextSize(MENUTEXTFONTSIZE);
        buycoin.setText("购买硬币");
        newgamebutton.setText("新字符");
        buttoncontinue.setText("继续");
        faqbutton.setText("信用");
        option.setText("选项");
        sharelink.setText("和朋友分享");
        signin1.setText("排行榜");
        signin2.setText("排行榜");



        pizzaheader.setText("比萨");
        hamburgerheader.setText("汉堡包");
        frenchfriesheader.setText("薯条");
        fishheader.setText("鱼");
        chickenheader.setText("鸡");
        tboneheader.setText("肉");
        meatarmheader.setText("三明治");
        porkheader.setText("火鸡");
        hotdogheader.setText("热狗");

        carrotheader.setText("胡萝卜 ");
        saladheader.setText("蘑菇");
        tomatoheader.setText("番茄");
        pumpkinheader.setText("南瓜");
        peesheader.setText("豆类");
        cornheader.setText("玉米");
        chilisheader.setText("辣椒");
        broccoliheader.setText("西兰花");
        desertheader6.setText("辣椒");

        applehader.setText("苹果");
        orangeheader.setText("梨");
        frenchtoastheader.setText("葡萄");
        cheeseheader.setText("浆果");
        soupheader.setText("樱桃");
        watermelonheader.setText("西瓜");
        kiwiheader.setText("奇异果");
        bananaheader.setText("香蕉");
        regionalheader6.setText("凤梨");

        noodleheader.setText("炸玉米饼 ");
        regionalheader3.setText("西班牙海鲜饭");
        siskebapheader.setText("烤羊肉串");
        regionalheader1.setText("面条");
        regionalheader2.setText("烤肉串");
        regionalheader4.setText("寿司");


        brownieheader.setText("曲奇饼");
        cheesecakeheader.setText("蛋糕");
        desertheader3.setText("冰淇淋");
        desertheader1.setText("甜甜圈");
        desertheader2.setText("巧克力");
        desertheader4.setText("可可冰");
        desertheader5.setText("饼子");

        drinkheader1.setText("水");
        drinkheader2.setText("牛奶");
        drinkheader3.setText("茶");
        juiceheader.setText("柠檬汽水");
        drinkheader5.setText("咖啡 ");
        cokeheader.setText("浓咖啡");
        drinkheader6.setText("橙汁");
        cappucionoheader.setText("樱桃汁");
        drinkheader4.setText("混合汁");

        greensoapheader.setText("绿色");
        cellsoapheader.setText("红");
        greendarkhedar.setText("黄色");
        seaspongeheader.setText("粉");
        soap1header.setText("橄榄");
        soap2header.setText("蓝色");


        hygieneheader.setText("卫生");
        lovepheader.setText("爱");
        hungerpheader.setText("饥饿");
        sleeppheader.setText("睡觉");
        gamepheader.setText("游戏");
        allinpheader.setText("所有");


        mealttextview.setText("膳食");
        regionalview.setText("区域性");
        textView20.setText("卫生");
        textView60.setText("药水");
        desertview.setText("甜食");
        textView18.setText("蔬菜");
        fruittextview.setText("水果 ");
        optiontextview.setText("选项");
        drinkview.setText("饮料");


        b1.setText("厨房");
        b2.setText("卫生");
        b3.setText("厕所");
        b4.setText("游戏");
        b5.setText("卧室");


        edittext3.setText("饥饿");
        edittext4.setText("卫生");
        edittext6.setText("膀胱");
        edittext7.setText("睡觉");
        edittext8.setText("爱");



        SharedPreferences shared = getSharedPreferences("info", MODE_PRIVATE);
        String Vivoidtext = shared.getString("vivoid", "");
        String name = shared.getString("charactername", "");
        String lastname = shared.getString("lastname", "");
        String Birthdate = shared.getString("birthdate", "");

        edittext12.setText(CharacterName);
        edittext13.setText(GoogleId);
        edittext14.setText(Birthdate);



        signin.setText("排行榜");
        button29.setText("排行榜");

        t7.setText("VIVO PASS");
        b19.setText("好的");
        sharetext.setText("您要分享吗？");
        b7.setText("背部");
        b8.setText("分享");

        shareyourvivo = "分享 " + CharacterName;

    }


    public void updateJapanese()

    {


        SharedPreferences pref;
        pref = getSharedPreferences("info", MODE_PRIVATE);
        final SharedPreferences.Editor editor = pref.edit();

        gamelang=JAPANESE;
        editor.putInt("gamelang", JAPANESE);

        editor.commit();

        Button buttoncontact = (Button) findViewById(R.id.contactbutton);
        Button b1 = (Button) findViewById(R.id.button14);
        Button b2 = (Button) findViewById(R.id.button15);
        Button b3 = (Button) findViewById(R.id.button18);
        Button b4 = (Button) findViewById(R.id.button17);
        Button b5 = (Button) findViewById(R.id.button16);
        TextView edittext3 = (TextView) findViewById(R.id.editText3);
        TextView edittext4 = (TextView) findViewById(R.id.editText4);
        TextView edittext6 = (TextView) findViewById(R.id.editText6);
        TextView edittext7 = (TextView) findViewById(R.id.editText7);
        TextView edittext8 = (TextView) findViewById(R.id.editText8);

        TextView mealttextview = (TextView ) findViewById(R.id.mealtextview);
        TextView regionalview = (TextView ) findViewById(R.id.regionalview);
        TextView textView20 = (TextView ) findViewById(R.id.textView20);
        TextView textView60 = (TextView ) findViewById(R.id.textView60);
        TextView desertview = (TextView ) findViewById(R.id.desertview);
        TextView textView18 = (TextView ) findViewById(R.id.textView18);
        TextView fruittextview = (TextView ) findViewById(R.id.fruittextview);
        TextView optiontextview = (TextView ) findViewById(R.id.optiontextview);
        TextView drinkview = (TextView ) findViewById(R.id.drinkview);


        TextView edittext12 = (TextView) findViewById(R.id.editText12);
        TextView edittext13= (TextView) findViewById(R.id.editText13);
        TextView edittext14 = (TextView) findViewById(R.id.editText14);

        Button signin = (Button) findViewById(R.id.sign_in_button);
        Button button29 = (Button) findViewById(R.id.button29);
        TextView t7= (TextView) findViewById(R.id.textView7);
        Button b19 = (Button) findViewById(R.id.button19);
        TextView sharetext = (TextView) findViewById(R.id.sharetext);
        Button b7 = (Button) findViewById(R.id.button7);
        Button b8 = (Button) findViewById(R.id.button8);




        final TextView watermelonheader = (TextView) findViewById(R.id.watermelontext2);
        final TextView tomatoheader = (TextView) findViewById(R.id.tomatotext2);
        final TextView cappucionoheader = (TextView) findViewById(R.id.onionringsltext2);

        final TextView pumpkinheader = (TextView) findViewById(R.id.pumpkintext2);
        final TextView peesheader = (TextView) findViewById(R.id.peestext2);
        final TextView kiwiheader = (TextView) findViewById(R.id.kiwitext2);
        final TextView hotdogheader = (TextView) findViewById(R.id.hotdogtext2);
        final TextView cornheader = (TextView) findViewById(R.id.corntext2);

        final TextView chilisheader = (TextView) findViewById(R.id.chilistext2);
        final TextView broccoliheader = (TextView) findViewById(R.id.broccolitext2);
        final TextView bananaheader = (TextView) findViewById(R.id.bananatext2);
        final TextView regionalheader1 = (TextView) findViewById(R.id.regional1text2);
        final TextView regionalheader2 = (TextView) findViewById(R.id.regional2text2);
        final TextView regionalheader3 = (TextView) findViewById(R.id.regional3text2);
        final TextView regionalheader4 = (TextView) findViewById(R.id.regional4text2);
        final TextView regionalheader5 = (TextView) findViewById(R.id.regional5text2);
        final TextView regionalheader6 = (TextView) findViewById(R.id.regional6text2);
        final TextView siskebapheader = (TextView) findViewById(R.id.siskebaptext2);
        final TextView drinkheader1 = (TextView) findViewById(R.id.drinks1text2);
        final TextView drinkheader2 = (TextView) findViewById(R.id.drinks2text2);
        final TextView drinkheader3 = (TextView) findViewById(R.id.drinks3text2);
        final TextView drinkheader4 = (TextView) findViewById(R.id.drinks4text2);
        final TextView drinkheader5 = (TextView) findViewById(R.id.drinks5text2);
        final TextView drinkheader6 = (TextView) findViewById(R.id.drinks6text2);
        final TextView desertheader1 = (TextView) findViewById(R.id.desert1text2);
        final TextView desertheader2 = (TextView) findViewById(R.id.desert2text2);
        final TextView desertheader3 = (TextView) findViewById(R.id.desert3text2);
        final TextView desertheader4 = (TextView) findViewById(R.id.desert4text2);
        final TextView desertheader5 = (TextView) findViewById(R.id.desert5text2);
        final TextView desertheader6 = (TextView) findViewById(R.id.desert6text2);


        final TextView pizzaheader = (TextView) findViewById(R.id.pizzatext);
        final TextView hamburgerheader = (TextView) findViewById(R.id.hamburgertext2);
        final TextView frenchfriesheader = (TextView) findViewById(R.id.frenchfriestext2);
        final TextView chickenheader = (TextView) findViewById(R.id.chickenlegtext2);
        final TextView fishheader = (TextView) findViewById(R.id.fishtext2);
        final TextView tboneheader = (TextView) findViewById(R.id.tbonetext2);
        final TextView meatarmheader = (TextView) findViewById(R.id.meatarmtext2);
        final TextView porkheader = (TextView) findViewById(R.id.porktext2);

        final TextView greensoapheader = (TextView) findViewById(R.id.greensoaptext2);
        final TextView cellsoapheader = (TextView) findViewById(R.id.cellsoaptext2);
        final TextView seaspongeheader = (TextView) findViewById(R.id.seaspongetext2);
        final TextView greendarkhedar = (TextView) findViewById(R.id.greendarksoaptext2);
        final TextView soap1header = (TextView) findViewById(R.id.soap1text2);
        final TextView soap2header = (TextView) findViewById(R.id.soap2text2);

        final TextView sleeppheader = (TextView) findViewById(R.id.sleepotiontext2);
        final TextView hungerpheader = (TextView) findViewById(R.id.hungerpotiontext2);
        final TextView hygieneheader = (TextView) findViewById(R.id.hygienepotiontext2);
        final TextView lovepheader = (TextView) findViewById(R.id.lovepotiontext2);
        final TextView gamepheader = (TextView) findViewById(R.id.gamepotiontext2);
        final TextView allinpheader = (TextView) findViewById(R.id.allinpotiontext2);

        final TextView cokeheader = (TextView) findViewById(R.id.coketext2);
        final TextView juiceheader = (TextView) findViewById(R.id.juicetext2);
        final TextView carrotheader = (TextView) findViewById(R.id.carrottext2);
        final TextView saladheader = (TextView) findViewById(R.id.saladtext2);

        final TextView applehader = (TextView) findViewById(R.id.appletext2);
        final TextView orangeheader = (TextView) findViewById(R.id.orangetext2);
        final TextView noodleheader = (TextView) findViewById(R.id.noodletext2);
        final TextView brownieheader = (TextView) findViewById(R.id.brownietext2);
        final TextView cheesecakeheader = (TextView) findViewById(R.id.cheesecaktext2);


        final TextView frenchtoastheader = (TextView) findViewById(R.id.frenchtoasttext2);
        final TextView cheeseheader = (TextView) findViewById(R.id.cheesetext2);
        final TextView soupheader = (TextView) findViewById(R.id.souptext2);


        Button newgamebutton = (Button) findViewById(R.id.button23);
        Button buttoncontinue = (Button) findViewById(R.id.buttoncontinue);
        Button faqbutton = (Button) findViewById(R.id.faqbutton);
        Button option = (Button) findViewById(R.id.button33);
        Button sharelink = (Button) findViewById(R.id.sharelinkbutton);
        Button signin1 = (Button) findViewById(R.id.buttongooglesign);
        Button signin2 = (Button) findViewById(R.id.buttongoogleleader);

        Button buycoin = (Button) findViewById(R.id.Buycoinbutton);



        TextView textview9 = (TextView) findViewById(R.id.textView9);
        TextView textView10 = (TextView) findViewById(R.id.textView10);
        TextView textView33 = (TextView) findViewById(R.id.textView33);
        TextView textView53 = (TextView) findViewById(R.id.textView53);
        TextView textView11 = (TextView) findViewById(R.id.textView11);
        TextView textView28 = (TextView) findViewById(R.id.textView28);
        TextView textView31 = (TextView) findViewById(R.id.textView31);
        TextView textView35 = (TextView) findViewById(R.id.textView35);
        TextView textView56 = (TextView) findViewById(R.id.textView56);
        TextView textView14 = (TextView) findViewById(R.id.textView14);



        TextView textview46 = (TextView) findViewById(R.id.textView46);
        TextView textview48 = (TextView) findViewById(R.id.textView48);
        TextView textview49 = (TextView) findViewById(R.id.textView49);
        Button potionsbutton1 = (Button) findViewById(R.id.potionsbutton2);
        Button imageView35 = (Button) findViewById(R.id.imageView35);
        TextView textview155 = (TextView) findViewById(R.id.textView155);
        Button button32 = (Button) findViewById(R.id.button32);
        TextView textview15 = (TextView) findViewById(R.id.textView15);
        TextView textViewconrats = (TextView) findViewById(R.id.textViewconrats);
        Button button322 = (Button) findViewById(R.id.button322);
        TextView textview55 = (TextView) findViewById(R.id.textView55);
        TextView textViewconrats2 = (TextView) findViewById(R.id.textViewconrats2);
        Button button3222 = (Button) findViewById(R.id.button3222);
        TextView textview552 = (TextView) findViewById(R.id.textView552);
        TextView textview761 = (TextView) findViewById(R.id.textView761);
        Button button361 = (Button) findViewById(R.id.button361);
        TextView textview871 = (TextView) findViewById(R.id.textView871);
        Button button371 = (Button) findViewById(R.id.button371);

        TextView textview76 = (TextView) findViewById(R.id.textView76);
        Button button36 = (Button) findViewById(R.id.button36);
        TextView textview87 = (TextView) findViewById(R.id.textView87);
        Button button37 = (Button) findViewById(R.id.button37);

        TextView vivoname = (TextView) findViewById(R.id.textView104);
        TextView birthdate = (TextView) findViewById(R.id.textView105);
        TextView eyebandtext = (TextView) findViewById(R.id.eyebandetext);


        TextView textViewconrats3 = (TextView) findViewById(R.id.textViewconrats3);
        Button button3221 = (Button) findViewById(R.id.button3221);
        TextView textview551 = (TextView) findViewById(R.id.textView551);


        Button okbutton = (Button) findViewById(R.id.button32221);
        TextView congra = (TextView) findViewById(R.id.textViewconrats21);


        TextView textView762 = (TextView) findViewById(R.id.textView762);

        Button button362 = (Button) findViewById(R.id.button362);



        TextView headert = (TextView) findViewById(R.id.textView763);
        Button buttonno2 = (Button) findViewById(R.id.button363);
        Button buttonyes2 = (Button) findViewById(R.id.button373);


        TextView headert2 = (TextView) findViewById(R.id.textView101);
        drinkheader4.setTextSize(MENUTEXTFONTSIZE);
        drinkheader6.setTextSize(MENUTEXTFONTSIZE);
        cappucionoheader.setTextSize(MENUTEXTFONTSIZE);
        headert2.setText("警告");

        headert.setText("警告");
        buttonno2.setText("いいえ");
        buttonyes2.setText("はい");

        final Button cancelcoinwarning =(Button) findViewById(R.id.imageView34);
        cancelcoinwarning.setText("はい");


        textView762.setText("情報");
        button362.setText("オーケー");


        okbutton.setText("はい");
        congra.setText("購入");

        sharefreindstext = "友達とVivoを共有する";



        textViewconrats3.setText("ゲーム賞");
        button3221.setText("集める");
        textview551.setText("あなたが獲得しています");

        eyebandtext.setText("眼のバンド");

        vivoname.setText("生体内の名前");
        birthdate.setText("誕生日");

        buttoncontact.setText("接触");
        textview46.setText("あなたはゲームをするための心がもうありません！ お待ちください");
        textview48.setText("ゲームをするためのビデオを見ることができます。");
        textview49.setText("ポーションを取得");
        potionsbutton1.setText("ポーションを買います");
        imageView35.setText("ビデオを見る");
        textview155.setText("脳の発達");
        button32.setText("集める");
        textViewconrats.setText("ロイヤリティボーナス");
        button322.setText("集める");
        textview55.setText("あなたが獲得しています");
        textview15.setText("あなたが獲得しています");
        textViewconrats2.setText("ボーナス賞");
        button3222.setText("集める");
        textview552.setText("あなたが獲得しています");
        textview761.setText("警告");
        button361.setText("はい");
        textview871.setText("全体のエネルギーが％20未満です。 あなたのVivoを食べ、愛してください。");

        textview76.setText("警告");
        button36.setText("はい");
        textview87.setText("あなたは新しい文字を作成しています。あなたのすべてのゲーム情報は保護されます");
        button37.setText("いいえ");


        eyebandtext.setTextSize(15);


        textview9.setText("お知らせ");
        textView10.setText("音");
        textView33.setText("振動");
        textView53.setText("言語");
        textView11.setText("オプション");
        textView28.setText("プロジェクトコーディネーター");
        textView31.setText("プロジェクトデザイナー");
        textView35.setText("チーフデベロッパー");
        textView56.setText("チーフマーケティングオフィサー");
        textView14.setText("クレジット");




        buycoin.setText("コインを購入");
        newgamebutton.setText("新しいキャラクター");
        buttoncontinue.setText("持続する");
        faqbutton.setText("クレジット");
        option.setText("オプション");
        sharelink.setText("友人たちと分ける");
        signin1.setText("リーダーボード");
        signin2.setText("リーダーボード");



        pizzaheader.setText("ピザ");
        hamburgerheader.setText("バーガー");
        frenchfriesheader.setText("フライドポテト");
        fishheader.setText("魚");
        chickenheader.setText("チキン");
        tboneheader.setText("お肉");
        meatarmheader.setText("サンドイッチ");
        porkheader.setText("七面鳥");
        hotdogheader.setText("ホットドッグ");

        carrotheader.setText("ニンジン");
        saladheader.setText("キノコ");
        tomatoheader.setText("トマト");
        pumpkinheader.setText("パンプキン");
        peesheader.setText("豆");
        cornheader.setText("トウモロコシ");
        chilisheader.setText("コショウ");
        broccoliheader.setText("ブロッコリー");
        desertheader6.setText("パプリカ");

        applehader.setText("林檎");
        orangeheader.setText("梨\n");
        frenchtoastheader.setText("グレープ");
        cheeseheader.setText("ベリー");
        soupheader.setText("チェリー");
        watermelonheader.setText("スイカ");
        kiwiheader.setText("キウイ");
        bananaheader.setText("バナナ");
        regionalheader6.setText("アナナス属");

        noodleheader.setText("タコス");
        regionalheader3.setText("パエリヤ");
        siskebapheader.setText("シシカバブ");
        regionalheader1.setText("麺");
        regionalheader2.setText("ロータリー");
        regionalheader4.setText("寿司");


        brownieheader.setText("クッキー");
        cheesecakeheader.setText("カップケーキ");
        desertheader3.setText("アイスクリーム");
        desertheader1.setText("ドーナツ");
        desertheader2.setText("チョコレート");
        desertheader4.setText("カカオ");
        desertheader5.setText("パンケーキ");

        drinkheader1.setText("水");
        drinkheader2.setText("ミルク");
        drinkheader3.setText("お茶");
        juiceheader.setText("レモネード");
        drinkheader5.setText("コーヒー");
        cokeheader.setText("エスプレッソ");
        drinkheader6.setText("オレンジジュース");
        cappucionoheader.setText("チェリージュース");
        drinkheader4.setText("ジュース");

        greensoapheader.setText("緑");
        cellsoapheader.setText("赤");
        greendarkhedar.setText("黄");
        seaspongeheader.setText("ピンク");
        soap1header.setText("オリーブ");
        soap2header.setText("青");


        hygieneheader.setText("衛生");
        lovepheader.setText("愛");
        hungerpheader.setText("飢え");
        sleeppheader.setText("睡眠");
        gamepheader.setText("ゲーム");
        allinpheader.setText("すべて");




        mealttextview.setText("食事");
        regionalview.setText("地域");
        textView20.setText("クリーニング");
        textView60.setText("薬");
        desertview.setText("お菓子");
        textView18.setText("野菜");
        fruittextview.setText("果物");
        optiontextview.setText("オプション");
        drinkview.setText("ドリンク");


        b1.setText("キッチン");
        b2.setText("衛生");
        b3.setText("トイレ");
        b4.setText("ゲーム");
        b5.setText("ベッドルーム");


        edittext3.setText("飢え");
        edittext4.setText("衛生");
        edittext6.setText("トイレ");
        edittext7.setText("睡眠");
        edittext8.setText("愛");



        SharedPreferences shared = getSharedPreferences("info", MODE_PRIVATE);
        String Vivoidtext = shared.getString("vivoid", "");
        String name = shared.getString("charactername", "");
        String lastname = shared.getString("lastname", "");
        String Birthdate = shared.getString("birthdate", "");

        edittext12.setText(CharacterName);
        edittext13.setText(GoogleId);
        edittext14.setText(Birthdate);



        signin.setText("リーダーボード");
        button29.setText("リーダーボード");

        t7.setText("VIVO PASS");
        b19.setText("はい");
        sharetext.setText("あなたが共有したいと思いますか？");
        b7.setText("バック");
        b8.setText("シェア");

        shareyourvivo = "シェア " + CharacterName;

    }


    public void updatePorteguese()

    {


        SharedPreferences pref;
        pref = getSharedPreferences("info", MODE_PRIVATE);
        final SharedPreferences.Editor editor = pref.edit();

        gamelang=PORTUGUESE;
        editor.putInt("gamelang", PORTUGUESE);

        editor.commit();

        Button buttoncontact = (Button) findViewById(R.id.contactbutton);
        Button b1 = (Button) findViewById(R.id.button14);
        Button b2 = (Button) findViewById(R.id.button15);
        Button b3 = (Button) findViewById(R.id.button18);
        Button b4 = (Button) findViewById(R.id.button17);
        Button b5 = (Button) findViewById(R.id.button16);
        TextView edittext3 = (TextView) findViewById(R.id.editText3);
        TextView edittext4 = (TextView) findViewById(R.id.editText4);
        TextView edittext6 = (TextView) findViewById(R.id.editText6);
        TextView edittext7 = (TextView) findViewById(R.id.editText7);
        TextView edittext8 = (TextView) findViewById(R.id.editText8);

        TextView mealttextview = (TextView ) findViewById(R.id.mealtextview);
        TextView regionalview = (TextView ) findViewById(R.id.regionalview);
        TextView textView20 = (TextView ) findViewById(R.id.textView20);
        TextView textView60 = (TextView ) findViewById(R.id.textView60);
        TextView desertview = (TextView ) findViewById(R.id.desertview);
        TextView textView18 = (TextView ) findViewById(R.id.textView18);
        TextView fruittextview = (TextView ) findViewById(R.id.fruittextview);
        TextView optiontextview = (TextView ) findViewById(R.id.optiontextview);
        TextView drinkview = (TextView ) findViewById(R.id.drinkview);


        TextView edittext12 = (TextView) findViewById(R.id.editText12);
        TextView edittext13= (TextView) findViewById(R.id.editText13);
        TextView edittext14 = (TextView) findViewById(R.id.editText14);

        Button signin = (Button) findViewById(R.id.sign_in_button);
        Button button29 = (Button) findViewById(R.id.button29);
        TextView t7= (TextView) findViewById(R.id.textView7);
        Button b19 = (Button) findViewById(R.id.button19);
        TextView sharetext = (TextView) findViewById(R.id.sharetext);
        Button b7 = (Button) findViewById(R.id.button7);
        Button b8 = (Button) findViewById(R.id.button8);




        final TextView watermelonheader = (TextView) findViewById(R.id.watermelontext2);
        final TextView tomatoheader = (TextView) findViewById(R.id.tomatotext2);
        final TextView cappucionoheader = (TextView) findViewById(R.id.onionringsltext2);

        final TextView pumpkinheader = (TextView) findViewById(R.id.pumpkintext2);
        final TextView peesheader = (TextView) findViewById(R.id.peestext2);
        final TextView kiwiheader = (TextView) findViewById(R.id.kiwitext2);
        final TextView hotdogheader = (TextView) findViewById(R.id.hotdogtext2);
        final TextView cornheader = (TextView) findViewById(R.id.corntext2);

        final TextView chilisheader = (TextView) findViewById(R.id.chilistext2);
        final TextView broccoliheader = (TextView) findViewById(R.id.broccolitext2);
        final TextView bananaheader = (TextView) findViewById(R.id.bananatext2);
        final TextView regionalheader1 = (TextView) findViewById(R.id.regional1text2);
        final TextView regionalheader2 = (TextView) findViewById(R.id.regional2text2);
        final TextView regionalheader3 = (TextView) findViewById(R.id.regional3text2);
        final TextView regionalheader4 = (TextView) findViewById(R.id.regional4text2);
        final TextView regionalheader5 = (TextView) findViewById(R.id.regional5text2);
        final TextView regionalheader6 = (TextView) findViewById(R.id.regional6text2);
        final TextView siskebapheader = (TextView) findViewById(R.id.siskebaptext2);
        final TextView drinkheader1 = (TextView) findViewById(R.id.drinks1text2);
        final TextView drinkheader2 = (TextView) findViewById(R.id.drinks2text2);
        final TextView drinkheader3 = (TextView) findViewById(R.id.drinks3text2);
        final TextView drinkheader4 = (TextView) findViewById(R.id.drinks4text2);
        final TextView drinkheader5 = (TextView) findViewById(R.id.drinks5text2);
        final TextView drinkheader6 = (TextView) findViewById(R.id.drinks6text2);
        final TextView desertheader1 = (TextView) findViewById(R.id.desert1text2);
        final TextView desertheader2 = (TextView) findViewById(R.id.desert2text2);
        final TextView desertheader3 = (TextView) findViewById(R.id.desert3text2);
        final TextView desertheader4 = (TextView) findViewById(R.id.desert4text2);
        final TextView desertheader5 = (TextView) findViewById(R.id.desert5text2);
        final TextView desertheader6 = (TextView) findViewById(R.id.desert6text2);


        final TextView pizzaheader = (TextView) findViewById(R.id.pizzatext);
        final TextView hamburgerheader = (TextView) findViewById(R.id.hamburgertext2);
        final TextView frenchfriesheader = (TextView) findViewById(R.id.frenchfriestext2);
        final TextView chickenheader = (TextView) findViewById(R.id.chickenlegtext2);
        final TextView fishheader = (TextView) findViewById(R.id.fishtext2);
        final TextView tboneheader = (TextView) findViewById(R.id.tbonetext2);
        final TextView meatarmheader = (TextView) findViewById(R.id.meatarmtext2);
        final TextView porkheader = (TextView) findViewById(R.id.porktext2);

        final TextView greensoapheader = (TextView) findViewById(R.id.greensoaptext2);
        final TextView cellsoapheader = (TextView) findViewById(R.id.cellsoaptext2);
        final TextView seaspongeheader = (TextView) findViewById(R.id.seaspongetext2);
        final TextView greendarkhedar = (TextView) findViewById(R.id.greendarksoaptext2);
        final TextView soap1header = (TextView) findViewById(R.id.soap1text2);
        final TextView soap2header = (TextView) findViewById(R.id.soap2text2);

        final TextView sleeppheader = (TextView) findViewById(R.id.sleepotiontext2);
        final TextView hungerpheader = (TextView) findViewById(R.id.hungerpotiontext2);
        final TextView hygieneheader = (TextView) findViewById(R.id.hygienepotiontext2);
        final TextView lovepheader = (TextView) findViewById(R.id.lovepotiontext2);
        final TextView gamepheader = (TextView) findViewById(R.id.gamepotiontext2);
        final TextView allinpheader = (TextView) findViewById(R.id.allinpotiontext2);

        final TextView cokeheader = (TextView) findViewById(R.id.coketext2);
        final TextView juiceheader = (TextView) findViewById(R.id.juicetext2);
        final TextView carrotheader = (TextView) findViewById(R.id.carrottext2);
        final TextView saladheader = (TextView) findViewById(R.id.saladtext2);

        final TextView applehader = (TextView) findViewById(R.id.appletext2);
        final TextView orangeheader = (TextView) findViewById(R.id.orangetext2);
        final TextView noodleheader = (TextView) findViewById(R.id.noodletext2);
        final TextView brownieheader = (TextView) findViewById(R.id.brownietext2);
        final TextView cheesecakeheader = (TextView) findViewById(R.id.cheesecaktext2);


        final TextView frenchtoastheader = (TextView) findViewById(R.id.frenchtoasttext2);
        final TextView cheeseheader = (TextView) findViewById(R.id.cheesetext2);
        final TextView soupheader = (TextView) findViewById(R.id.souptext2);


        Button newgamebutton = (Button) findViewById(R.id.button23);
        Button buttoncontinue = (Button) findViewById(R.id.buttoncontinue);
        Button faqbutton = (Button) findViewById(R.id.faqbutton);
        Button option = (Button) findViewById(R.id.button33);
        Button sharelink = (Button) findViewById(R.id.sharelinkbutton);
        Button signin1 = (Button) findViewById(R.id.buttongooglesign);
        Button signin2 = (Button) findViewById(R.id.buttongoogleleader);

        Button buycoin = (Button) findViewById(R.id.Buycoinbutton);



        TextView textview9 = (TextView) findViewById(R.id.textView9);
        TextView textView10 = (TextView) findViewById(R.id.textView10);
        TextView textView33 = (TextView) findViewById(R.id.textView33);
        TextView textView53 = (TextView) findViewById(R.id.textView53);
        TextView textView11 = (TextView) findViewById(R.id.textView11);
        TextView textView28 = (TextView) findViewById(R.id.textView28);
        TextView textView31 = (TextView) findViewById(R.id.textView31);
        TextView textView35 = (TextView) findViewById(R.id.textView35);
        TextView textView56 = (TextView) findViewById(R.id.textView56);
        TextView textView14 = (TextView) findViewById(R.id.textView14);



        TextView textview46 = (TextView) findViewById(R.id.textView46);
        TextView textview48 = (TextView) findViewById(R.id.textView48);
        TextView textview49 = (TextView) findViewById(R.id.textView49);
        Button potionsbutton1 = (Button) findViewById(R.id.potionsbutton2);
        Button imageView35 = (Button) findViewById(R.id.imageView35);
        TextView textview155 = (TextView) findViewById(R.id.textView155);
        Button button32 = (Button) findViewById(R.id.button32);
        TextView textview15 = (TextView) findViewById(R.id.textView15);
        TextView textViewconrats = (TextView) findViewById(R.id.textViewconrats);
        Button button322 = (Button) findViewById(R.id.button322);
        TextView textview55 = (TextView) findViewById(R.id.textView55);
        TextView textViewconrats2 = (TextView) findViewById(R.id.textViewconrats2);
        Button button3222 = (Button) findViewById(R.id.button3222);
        TextView textview552 = (TextView) findViewById(R.id.textView552);
        TextView textview761 = (TextView) findViewById(R.id.textView761);
        Button button361 = (Button) findViewById(R.id.button361);
        TextView textview871 = (TextView) findViewById(R.id.textView871);
        Button button371 = (Button) findViewById(R.id.button371);

        TextView textview76 = (TextView) findViewById(R.id.textView76);
        Button button36 = (Button) findViewById(R.id.button36);
        TextView textview87 = (TextView) findViewById(R.id.textView87);
        Button button37 = (Button) findViewById(R.id.button37);

        TextView vivoname = (TextView) findViewById(R.id.textView104);
        TextView birthdate = (TextView) findViewById(R.id.textView105);
        TextView eyebandtext = (TextView) findViewById(R.id.eyebandetext);

        TextView textViewconrats3 = (TextView) findViewById(R.id.textViewconrats3);
        Button button3221 = (Button) findViewById(R.id.button3221);
        TextView textview551 = (TextView) findViewById(R.id.textView551);



        Button okbutton = (Button) findViewById(R.id.button32221);
        TextView congra = (TextView) findViewById(R.id.textViewconrats21);
        TextView textView762 = (TextView) findViewById(R.id.textView762);
        TextView textView87 = (TextView) findViewById(R.id.textView87);
        Button button362 = (Button) findViewById(R.id.button362);



        TextView headert = (TextView) findViewById(R.id.textView763);
        Button buttonno2 = (Button) findViewById(R.id.button363);
        Button buttonyes2 = (Button) findViewById(R.id.button373);

        TextView headert2 = (TextView) findViewById(R.id.textView101);
        drinkheader4.setTextSize(MENUTEXTFONTSIZE-1);
        drinkheader6.setTextSize(MENUTEXTFONTSIZE-1);
        cappucionoheader.setTextSize(MENUTEXTFONTSIZE-1);

        final Button cancelcoinwarning =(Button) findViewById(R.id.imageView34);
        cancelcoinwarning.setText("BOM");

        headert2.setText("ATENÇÃO");

        headert.setText("ATENÇÃO");
        buttonno2.setText("NÃO");
        buttonyes2.setText("SIM");


        textView762.setText("INFORMAÇÃO");

        button362.setText("BOM");
        okbutton.setText("BOM");
        congra.setText("COMPRA");

        sharefreindstext = "Partilhar Vivo com os amigos";

        textViewconrats3.setText("Jogo de Bónus");
        button3221.setText("RECOLHER");
        textview551.setText("Você ganhou");
        eyebandtext.setTextSize(15);

        eyebandtext.setText("BANDAS DE OLHO");
        vivoname.setText("Vivo Nome");
        birthdate.setText("Data de Nascimento");

        buttoncontact.setText("CONTATO");
        textview46.setText("Você não tem mais corações para jogar! Por favor, espere");
        textview48.setText("Ou assistir a um vídeo para jogar.");
        textview49.setText("OBTER POÇÕES");
        potionsbutton1.setText("COMPRAR POÇÕES");
        imageView35.setText("ASSISTA VÍDEO");
        textview155.setText("o Desenvolvimento do Cérebro");
        button32.setText("RECOLHER");
        textViewconrats.setText("bÔNUS POR FIDELIDADE");
        button322.setText("RECOLHER");
        textview55.setText("Você ganhou");
        textview15.setText("Você ganhou");
        textViewconrats2.setText("Prémio de Bónus");
        button3222.setText("RECOLHER");
        textview552.setText("Você ganhou");
        textview761.setText("ATENÇÃO");
        button361.setText("BOM");
        textview871.setText("Sua energia global abaixo de% 20. Por favor, alimente e ame o seu Vivo.");

        textview76.setText("ATENÇÃO");
        button36.setText("SIM");
        textview87.setText("Você está criando um novo caractère. Todas as informações do seu jogo serão protegidas.");
        button37.setText("Não");





        textview9.setText("Notificação");
        textView10.setText("Som");
        textView33.setText("Vibração");
        textView53.setText("Língua");
        textView11.setText("OPÇÕES");
        textView28.setText("Coordenador de projeto");
        textView31.setText("Designer de projeto");
        textView35.setText("Cheif Cesenvolvedor");
        textView56.setText("Diretor de marketing");
        textView14.setText("CRÉDITOS");




        buycoin.setText("COMPRAR MOEDA");
        newgamebutton.setText("NOVO CARÁTER");
        buttoncontinue.setText("CONTINUAR");
        faqbutton.setText("CRÉDITOS");
        option.setText("OPÇÕES");
        sharelink.setText("COMPARTILHE COM AMIGOS");
        signin1.setText("LEADERBOARD");
        signin2.setText("LEADERBOARD");



        pizzaheader.setText("PIZZA");
        hamburgerheader.setText("BURGER");
        frenchfriesheader.setText("FRITAS");
        fishheader.setText("PEIXE");
        chickenheader.setText("GALINHA");
        tboneheader.setText("T_BONE");
        meatarmheader.setText("SANDUÍCHE");
        porkheader.setText("PERU");
        hotdogheader.setText("HOTDOG");

        carrotheader.setText("CENOURA");
        saladheader.setText("COGUMELO");
        tomatoheader.setText("TOMATE");
        pumpkinheader.setText("ABÓBORA");
        peesheader.setText("FEIJÕES");
        cornheader.setText("MILHO");
        chilisheader.setText("CHILIS");
        broccoliheader.setText("BRÓCOLIS");
        desertheader6.setText("PÁPRICA");

        applehader.setText("MAÇÃ");
        orangeheader.setText("PERA");
        frenchtoastheader.setText("UVA");
        cheeseheader.setText("BAGA");
        soupheader.setText("CEREJA");
        watermelonheader.setText("MELANCIA");
        kiwiheader.setText("KIWI");
        bananaheader.setText("BANANA");
        regionalheader6.setText("ANANÁS");

        noodleheader.setText("TACO");
        regionalheader3.setText("PAELLA");
        siskebapheader.setText("SHISH KEBAB");
        regionalheader1.setText("NOODLE");
        regionalheader2.setText("DONER KEBAB");
        regionalheader4.setText("SUSHI");


        brownieheader.setText("BISCOITO");
        cheesecakeheader.setText("BOLINHO");
        desertheader3.setText("SORVETE");
        desertheader1.setText("ROSQUINHA");
        desertheader2.setText("CHOCOLATE");
        desertheader4.setText("CACAU ICE");
        desertheader5.setText("PANQUECA");

        drinkheader1.setText("ÁGUA");
        drinkheader2.setText("LEITE");
        drinkheader3.setText("CHÁ");
        juiceheader.setText("LIMONADA");
        drinkheader5.setText("CAFÉ");
        cokeheader.setText("EXPRESSO");
        drinkheader6.setText("SUCO DE LARANJA");
        cappucionoheader.setText("SUCO DE CEREJA");
        drinkheader4.setText("SUCO DE FRUTAS");

        greensoapheader.setText("VERDE");
        cellsoapheader.setText("VERMELHO");
        greendarkhedar.setText("AMARELO");
        seaspongeheader.setText("ROSA");
        soap1header.setText("OLIVA");
        soap2header.setText("AZUL");


        hygieneheader.setText("HIGIENE");
        lovepheader.setText("AMOR");
        hungerpheader.setText("FOME");
        sleeppheader.setText("DORMIR");
        gamepheader.setText("JOGO");
        allinpheader.setText("TODOS");




        mealttextview.setText("REFEIÇÕES");
        regionalview.setText("REGIONAL");
        textView20.setText("HIGIENE");
        textView60.setText("POÇÕES");
        desertview.setText("DOCES");
        textView18.setText("LEGUMES");
        fruittextview.setText("FRUTAS");
        optiontextview.setText("OPÇÕES");
        drinkview.setText("BEBIDAS");


        b1.setText("COZINHA");
        b2.setText("HIGIENE");
        b3.setText("BANHEIRO");
        b4.setText("JOGOS");
        b5.setText("QUARTO");


        edittext3.setText("FOME");
        edittext4.setText("HIGIENE");
        edittext6.setText("BEXIGA");
        edittext7.setText("DORMIR");
        edittext8.setText("AMOR");



        SharedPreferences shared = getSharedPreferences("info", MODE_PRIVATE);
        String Vivoidtext = shared.getString("vivoid", "");
        String name = shared.getString("charactername", "");
        String lastname = shared.getString("lastname", "");
        String Birthdate = shared.getString("birthdate", "");

        edittext12.setText(CharacterName);
        edittext13.setText(GoogleId);
        edittext14.setText(Birthdate);



        signin.setText("LEADERBOARD");
        button29.setText("LEADERBOARD");

        t7.setText("VIVO PASS");
        b19.setText("BOM");
        sharetext.setText("Você gostaria de compartilhar?");
        b7.setText("Costas");
        b8.setText("Compartilhar");

        shareyourvivo = "Compartilhar " + CharacterName;

    }







    public void coinflip () {


    final ImageView coinimage = (ImageView) findViewById(R.id.testImagecoin);


   final AnimatorSet set = (AnimatorSet) AnimatorInflater.loadAnimator(this, R.animator.flip2);
    final AnimatorSet set2 = (AnimatorSet) AnimatorInflater.loadAnimator(this, R.animator.flip2);
    final AnimatorSet set3 = (AnimatorSet) AnimatorInflater.loadAnimator(this, R.animator.flip2);
    set.setTarget(coinimage);

    set2.setTarget(coinimage);

    set3.setTarget(coinimage);

    set3.addListener(new Animator.AnimatorListener() {
        @Override
        public void onAnimationStart(Animator animation) {

        }

        @Override
        public void onAnimationEnd(Animator animation) {
            set3.start();
        }

        @Override
        public void onAnimationCancel(Animator animation) {

        }

        @Override
        public void onAnimationRepeat(Animator animation) {

        }
    });
    set2.addListener(new Animator.AnimatorListener() {
        @Override
        public void onAnimationStart(Animator animation) {

        }

        @Override
        public void onAnimationEnd(Animator animation) {
            set3.start();
        }

        @Override
        public void onAnimationCancel(Animator animation) {

        }

        @Override
        public void onAnimationRepeat(Animator animation) {

        }
    });




    set.addListener(new Animator.AnimatorListener() {
        @Override
        public void onAnimationStart(Animator animation) {

        }

        @Override
        public void onAnimationEnd(Animator animation) {
            set2.start();
        }

        @Override
        public void onAnimationCancel(Animator animation) {

        }

        @Override
        public void onAnimationRepeat(Animator animation) {

        }
    });

    set.start();




}

    public void eyescircleanimation () {

        final FrameLayout f = (FrameLayout) findViewById(R.id.frame);
        final ImageView movement = (ImageView) findViewById(R.id.lefteyeimg);
        final FrameLayout righteye = (FrameLayout) findViewById(R.id.righteye);
        final ImageView righteyeimage = (ImageView) findViewById(R.id.righteyeimg);

        // f.setVisibility(View.VISIBLE);
        //  righteye.setVisibility(View.VISIBLE);


        final MediaPlayer kiss = MediaPlayer.create(getApplicationContext(), R.raw.kiss);




       // if(!mutestate[0])
      //      soundPool3.play(soundID3, volume, volume, 1, 0, 1f);



        AnimationSet animations = new AnimationSet(true);
        final AnimationSet animations2 = new AnimationSet(true);

        ArcTranslationAnimation anim = new ArcTranslationAnimation(0, 0 , 0, -15);
        anim.setDuration(150);
        //anim.setFillAfter(true);
        animations.addAnimation(anim);


        final ArcTranslationAnimation anim2 = new ArcTranslationAnimation(0, -15 , 0, 15);
        anim2.setStartOffset(150);
        anim2.setDuration(150);
        //anim2.setFillAfter(true);
        animations.addAnimation(anim2);

        final ArcTranslationAnimation anim3 = new ArcTranslationAnimation(0, 15 , 0, 15);
        anim3.setStartOffset(300);
        anim3.setDuration(150);
        // anim3.setFillAfter(true);
        animations.addAnimation(anim3);


        final ArcTranslationAnimation anim4 = new ArcTranslationAnimation(0, 15 , 0, -15);
        anim4.setStartOffset(450);
        anim4.setDuration(150);
        //anim4.setFillAfter(true);
        animations.addAnimation(anim4);

        ArcTranslationAnimation anim5 = new ArcTranslationAnimation(0, -15 , 0, -15);
        anim5.setStartOffset(600);
        anim5.setDuration(150);
        //anim.setFillAfter(true);
        animations.addAnimation(anim5);


        final ArcTranslationAnimation anim6 = new ArcTranslationAnimation(0, -15 , 0, 15);
        anim6.setStartOffset(750);
        anim6.setDuration(150);
        //anim2.setFillAfter(true);
        animations.addAnimation(anim6);

        final ArcTranslationAnimation anim7 = new ArcTranslationAnimation(0, 15 , 0, 15);
        anim7.setStartOffset(900);
        anim7.setDuration(150);
        // anim3.setFillAfter(true);
        animations.addAnimation(anim7);


        final ArcTranslationAnimation anim8 = new ArcTranslationAnimation(0, 15 , 0, -15);
        anim8.setStartOffset(1050);
        anim8.setDuration(150);
        //anim8.setFillAfter(true);
        animations.addAnimation(anim8);


        ArcTranslationAnimation anim9 = new ArcTranslationAnimation(0, -15 , 0, -15);
        anim9.setStartOffset(1200);
        anim9.setDuration(150);
        //anim.setFillAfter(true);
        animations.addAnimation(anim9);


        final ArcTranslationAnimation anim10 = new ArcTranslationAnimation(0, -15 , 0, 15);
        anim10.setStartOffset(1350);
        anim10.setDuration(150);
        //anim2.setFillAfter(true);
        animations.addAnimation(anim10);

        final ArcTranslationAnimation anim11 = new ArcTranslationAnimation(0, 15 , 0, 15);
        anim11.setStartOffset(1500);
        anim11.setDuration(150);
        // anim3.setFillAfter(true);
        animations.addAnimation(anim11);


        final ArcTranslationAnimation anim12 = new ArcTranslationAnimation(0, 15 , 0, -15);
        anim12.setStartOffset(1650);
        anim12.setDuration(150);
        anim12.setFillAfter(true);
        animations.addAnimation(anim12);






        movement.startAnimation(animations);
        righteyeimage.startAnimation(animations);









    }





    public void eyesrejectanimation (){

        final FrameLayout f = (FrameLayout) findViewById(R.id.frame);
        final ImageView movement = (ImageView) findViewById(R.id.lefteyeimg);
        final FrameLayout righteye = (FrameLayout) findViewById(R.id.righteye);
        final ImageView righteyeimage = (ImageView) findViewById(R.id.righteyeimg);

       // f.setVisibility(View.VISIBLE);
      //  righteye.setVisibility(View.VISIBLE);


        AnimationSet animations = new AnimationSet(true);
        final AnimationSet animations2 = new AnimationSet(true);

        ArcTranslationAnimation anim = new ArcTranslationAnimation(0, -15 , 0, 15);
        anim.setDuration(300);
        //anim.setFillAfter(true);
        animations.addAnimation(anim);


        final ArcTranslationAnimation anim2 = new ArcTranslationAnimation(0, 30 , 0, 0);
        anim2.setStartOffset(300);
        anim2.setDuration(300);
        //anim2.setFillAfter(true);
        animations.addAnimation(anim2);

        final ArcTranslationAnimation anim3 = new ArcTranslationAnimation(0, -30 , 0, 0);
        anim3.setStartOffset(600);
        anim3.setDuration(300);
        // anim3.setFillAfter(true);
        animations.addAnimation(anim3);


        final ArcTranslationAnimation anim4 = new ArcTranslationAnimation(0, 30 , 0, 0);
        anim4.setStartOffset(900);
        anim4.setDuration(300);
        //anim4.setFillAfter(true);
        animations.addAnimation(anim4);

        ArcTranslationAnimation anim5 = new ArcTranslationAnimation(0, -30 , 0, 0);
        anim5.setStartOffset(1200);
        anim5.setDuration(300);
        //anim.setFillAfter(true);
        animations.addAnimation(anim5);


        final ArcTranslationAnimation anim6 = new ArcTranslationAnimation(0, 30 , 0, 0);
        anim6.setStartOffset(1500);
        anim6.setDuration(300);
        //anim2.setFillAfter(true);
        animations.addAnimation(anim6);

        final ArcTranslationAnimation anim7 = new ArcTranslationAnimation(0, -30 , 0, 0);
        anim7.setStartOffset(1800);
        anim7.setDuration(300);
        // anim3.setFillAfter(true);
        animations.addAnimation(anim7);


        final ArcTranslationAnimation anim8 = new ArcTranslationAnimation(0, 30 , 0, 0);
        anim8.setStartOffset(2100);
        anim8.setDuration(300);
        //anim8.setFillAfter(true);
        animations.addAnimation(anim8);


        ArcTranslationAnimation anim9 = new ArcTranslationAnimation(0, -30 , 0, 0);
        anim9.setStartOffset(2400);
        anim9.setDuration(300);
        anim.setFillAfter(true);
        animations.addAnimation(anim9);


        movement.startAnimation(animations);
        righteyeimage.startAnimation(animations);







    }




    public void lock()
    {



        final RelativeLayout eyebandrel1 = (RelativeLayout) findViewById(R.id.eyebandrel1);
        final RelativeLayout eyebandrel3 = (RelativeLayout) findViewById(R.id.eyebandrel3);
        final RelativeLayout eyebandrel4 = (RelativeLayout) findViewById(R.id.eyebandrel4);
        final RelativeLayout eyebandrel5 = (RelativeLayout) findViewById(R.id.eyebandrel5);
        final RelativeLayout eyebandrel6 = (RelativeLayout) findViewById(R.id.eyebandrel6);



        final Button eyebandbutton  = (Button) findViewById(R.id.eyebandbutton);
        final RelativeLayout eyebandrelative = (RelativeLayout) findViewById(R.id.eyebandrelative);

        final Button eyebandbutton1  = (Button) findViewById(R.id.eyebandbutton1);
        final Button eyebandcheck1  = (Button) findViewById(R.id.eyebandcheck1);
        final Button eyebandbutton2  = (Button) findViewById(R.id.eyebandbutton2);
        final Button eyebandcheck2  = (Button) findViewById(R.id.eyebandcheck2);
        final Button eyebandbutton3  = (Button) findViewById(R.id.eyebandbutton3);
        final Button eyebandcheck3  = (Button) findViewById(R.id.eyebandcheck3);
        final Button eyebandbutton4  = (Button) findViewById(R.id.eyebandbutton4);
        final Button eyebandcheck4  = (Button) findViewById(R.id.eyebandcheck4);

        final Button eyebandbutton5  = (Button) findViewById(R.id.eyebandbutton5);
        final Button eyebandcheck5  = (Button) findViewById(R.id.eyebandcheck5);
        final Button eyebandbutton6  = (Button) findViewById(R.id.eyebandbutton6);
        final Button eyebandcheck6  = (Button) findViewById(R.id.eyebandcheck6);


        final Button eyebandiq1 = (Button) findViewById(R.id.eyebandiq1);
        final TextView eyebandtext1 = (TextView) findViewById(R.id.eyebandtextiq1);

        final Button eyebandiq3 = (Button) findViewById(R.id.eyebandiq3);
        final TextView eyebandtext3 = (TextView) findViewById(R.id.eyebandtextiq3);
        final Button eyebandiq4 = (Button) findViewById(R.id.eyebandiq4);
        final TextView eyebandtext4 = (TextView) findViewById(R.id.eyebandtextiq4);
        final Button eyebandiq5 = (Button) findViewById(R.id.eyebandiq5);
        final TextView eyebandtext5 = (TextView) findViewById(R.id.eyebandtextiq5);
        final Button eyebandiq6 = (Button) findViewById(R.id.eyebandiq6);
        final TextView eyebandtext6 = (TextView) findViewById(R.id.eyebandtextiq6);




        RelativeLayout siskebaprelative1 = (RelativeLayout) findViewById(R.id.siskebaprelative1);
        RelativeLayout siskebaprelative2 = (RelativeLayout) findViewById(R.id.siskebaprelative2);

        RelativeLayout cellsoaprelative1 = (RelativeLayout) findViewById(R.id.cellsoaprelative1);
        RelativeLayout cellsoaprelative2 = (RelativeLayout) findViewById(R.id.cellsoaprelative2);
        RelativeLayout greendarksoaprelative1 = (RelativeLayout) findViewById(R.id.greendarksoaprelative1);
        RelativeLayout greendarksoaprelative2 = (RelativeLayout) findViewById(R.id.greendarksoaprelative2);
        RelativeLayout seaspongerelative1 = (RelativeLayout) findViewById(R.id.seaspongerelative1);
        RelativeLayout seaspongerelative2 = (RelativeLayout) findViewById(R.id.seaspongerelative2);
        RelativeLayout soap1relative1 = (RelativeLayout) findViewById(R.id.soap1relative1);
        RelativeLayout soap1relative2 = (RelativeLayout) findViewById(R.id.soap1relative2);
        RelativeLayout soap2relative1 = (RelativeLayout) findViewById(R.id.soap2relative1);
        RelativeLayout soap2relative2 = (RelativeLayout) findViewById(R.id.soap2relative2);





        RelativeLayout regional1relative2 = (RelativeLayout) findViewById(R.id.regionalrelative2);
        RelativeLayout regional1relative1 = (RelativeLayout) findViewById(R.id.regionalrelative1);
        RelativeLayout regional2relative2 = (RelativeLayout) findViewById(R.id.regional2relative2);
        RelativeLayout regional2relative1 = (RelativeLayout) findViewById(R.id.regiona2relative1);
        RelativeLayout regional4relative2 = (RelativeLayout) findViewById(R.id.regional4relative2);
        RelativeLayout regional4relative1 = (RelativeLayout) findViewById(R.id.regiona4relative1);

        RelativeLayout desert1relative1 = (RelativeLayout) findViewById(R.id.desert1relative1);
        RelativeLayout desert1relative2 = (RelativeLayout) findViewById(R.id.desert1relative2);
        RelativeLayout desert2relative1 = (RelativeLayout) findViewById(R.id.desert2relative1);
        RelativeLayout desert2relative2 = (RelativeLayout) findViewById(R.id.desert2relative2);
        RelativeLayout desert4relative1 = (RelativeLayout) findViewById(R.id.desert4relative1);
        RelativeLayout desert4relative2 = (RelativeLayout) findViewById(R.id.desert4relative2);

        RelativeLayout desert5relative1 = (RelativeLayout) findViewById(R.id.desert5relative1);
        RelativeLayout desert5relative2 = (RelativeLayout) findViewById(R.id.desert5relative2);


        RelativeLayout hoddogrelative2 = (RelativeLayout) findViewById(R.id.hotdogrelative2);
        RelativeLayout hoddogrelative1 = (RelativeLayout) findViewById(R.id.hotdogrelative1);
        RelativeLayout pizzarelative1 = (RelativeLayout) findViewById(R.id.pizzarelative1);
        RelativeLayout pizzarelative2 = (RelativeLayout) findViewById(R.id.pizzarelative2);
        RelativeLayout hamburgerrelative1 = (RelativeLayout) findViewById(R.id.hamburgerrelative1);
        RelativeLayout hamburgerrelative2 = (RelativeLayout) findViewById(R.id.hamburgerrelative2);

        RelativeLayout cornrelative1 = (RelativeLayout) findViewById(R.id.cornrelative1);
        RelativeLayout cornrelative2 = (RelativeLayout) findViewById(R.id.cornrelative2);

        RelativeLayout desert6relative1 = (RelativeLayout) findViewById(R.id.desert6relative1);
        RelativeLayout desert6relative2 = (RelativeLayout) findViewById(R.id.desert6relative2);


        RelativeLayout medisaladrelative1 = (RelativeLayout) findViewById(R.id.medisaladrelative1);
        RelativeLayout medisaladrelative2 = (RelativeLayout) findViewById(R.id.medisaladrelative2);

        RelativeLayout chilisrelative1 = (RelativeLayout) findViewById(R.id.chilisrelative1);
        RelativeLayout chilisrelative2 = (RelativeLayout) findViewById(R.id.chilisrelative2);

        RelativeLayout broccolirelative1 = (RelativeLayout) findViewById(R.id.broccolirelative1);
        RelativeLayout broccolirelative2 = (RelativeLayout) findViewById(R.id.broccolirelative2);

        RelativeLayout pumpkinrelative1 = (RelativeLayout) findViewById(R.id.pumpkinrelative1);
        RelativeLayout pumpkinrelative2 = (RelativeLayout) findViewById(R.id.pumpkinrelative2);


        RelativeLayout porkrelative1 = (RelativeLayout) findViewById(R.id.porkrelative1);
        RelativeLayout porkrelative2 = (RelativeLayout) findViewById(R.id.porkrelative2);

        RelativeLayout fishrelative1 = (RelativeLayout) findViewById(R.id.fishrelative1);
        RelativeLayout fishrelative2 = (RelativeLayout) findViewById(R.id.fishrelative2);

        RelativeLayout tbonerelative1 = (RelativeLayout) findViewById(R.id.tbonerelative1);
        RelativeLayout tbonerelative2 = (RelativeLayout) findViewById(R.id.tbonerelative2);


        RelativeLayout frenchtoastrelative1 = (RelativeLayout) findViewById(R.id.frenchtoastrelative1);
        RelativeLayout frenchtoastrelative2 = (RelativeLayout) findViewById(R.id.frenchtoastrelative2);
        RelativeLayout souprelative1 = (RelativeLayout) findViewById(R.id.souprelative1);
        RelativeLayout souprelative2 = (RelativeLayout) findViewById(R.id.souprelative2);
        RelativeLayout watermelonrelative1 = (RelativeLayout) findViewById(R.id.watermelonrelative1);
        RelativeLayout watermelonrelative2 = (RelativeLayout) findViewById(R.id.watermelonrelative2);
        RelativeLayout kiwirelative1 = (RelativeLayout) findViewById(R.id.kiwirelative1);
        RelativeLayout kiwirelative2 = (RelativeLayout) findViewById(R.id.kiwirelative2);
        RelativeLayout bananarelative1 = (RelativeLayout) findViewById(R.id.bananarelative1);
        RelativeLayout bananarelative2 = (RelativeLayout) findViewById(R.id.bananarelative2);
        RelativeLayout regional6relative1 = (RelativeLayout) findViewById(R.id.regional6relative1);
        RelativeLayout regional6relative2 = (RelativeLayout) findViewById(R.id.regional6relative2);

        RelativeLayout juicerelative1 = (RelativeLayout) findViewById(R.id.juicerelative1);
        RelativeLayout juicerelative2 = (RelativeLayout) findViewById(R.id.juicerelative2);

        RelativeLayout drinks5relative1 = (RelativeLayout) findViewById(R.id.drinks5relative1);
        RelativeLayout drinks5relative2 = (RelativeLayout) findViewById(R.id.drinks5relative2);
        RelativeLayout cokerelative1 = (RelativeLayout) findViewById(R.id.cokerelative1);
        RelativeLayout cokerelative2 = (RelativeLayout) findViewById(R.id.cokerelative2);
        RelativeLayout drinks6relative1 = (RelativeLayout) findViewById(R.id.drinks6relative1);
        RelativeLayout drinks6relative2 = (RelativeLayout) findViewById(R.id.drinks6relative2);
        RelativeLayout onionringsrelative1 = (RelativeLayout) findViewById(R.id.onionringsrelative1);
        RelativeLayout onionringsrelative2 = (RelativeLayout) findViewById(R.id.onionringsrelative2);
        RelativeLayout drinks4relative1 = (RelativeLayout) findViewById(R.id.drinks4relative1);
        RelativeLayout drinks4relative2 = (RelativeLayout) findViewById(R.id.drinks4relative2);


        Button siskebapbuybutton = (Button) findViewById(R.id.siskebapbuybutton);

        Button regional1buybutton = (Button) findViewById(R.id.regional1buybutton);
        Button regional2buybutton = (Button) findViewById(R.id.regional2buybutton);
        Button regional4buybutton = (Button) findViewById(R.id.regional4buybutton);
        Button desert5buybutton = (Button) findViewById(R.id.desert5buybutton);
        Button desert1buybutton = (Button) findViewById(R.id.desert1buybutton);
        Button desert2buybutton = (Button) findViewById(R.id.desert2buybutton);
        Button desert4buybutton = (Button) findViewById(R.id.desert4buybutton);


        Button cellsoapbuybtn = (Button) findViewById(R.id.cellsoapbuybtn);
        Button greendarksoapbuybtn = (Button) findViewById(R.id.greendarksoapbuybtn);
        Button seaspongebuybtn = (Button) findViewById(R.id.seaspongebuybtn);
        Button soap1buybtn = (Button) findViewById(R.id.soap1buybtn);
        Button soap2buybtn = (Button) findViewById(R.id.soap2buybtn);

        Button frenchtoastbuybutton = (Button) findViewById(R.id.frenchtoastbuybutton);
        Button soupbuybutton = (Button) findViewById(R.id.soupbuybutton);
        Button watermelonbuybutton = (Button) findViewById(R.id.watermelonbuybutton);
        Button kiwibuybutton = (Button) findViewById(R.id.kiwibuybutton);
        Button bananabuybutton = (Button) findViewById(R.id.bananabuybutton);
        Button regional6buybutton = (Button) findViewById(R.id.regional6buybutton);
        Button juicebuybutton = (Button) findViewById(R.id.juicebuybutton);
        Button drinks5buybutton = (Button) findViewById(R.id.drinks5buybutton);
        Button cokebuybutton = (Button) findViewById(R.id.cokebuybutton);
        Button drinks6buybutton = (Button) findViewById(R.id.drinks6buybutton);
        Button onionringsbuybutton = (Button) findViewById(R.id.onionringsbuybutton);
        Button drinks4buybutton = (Button) findViewById(R.id.drinks4buybutton);



        Button tbonebuybutton = (Button) findViewById(R.id.meatbuybutton);
        Button fishbuybutton = (Button) findViewById(R.id.fishbuy);

        Button cornbuybutton = (Button) findViewById(R.id.cornbuybutton);
        Button desert6buybutton = (Button) findViewById(R.id.desert6buybutton);
        Button medisaladbuybutton = (Button) findViewById(R.id.medisaladbuybutton);
        Button chilisbuybutton = (Button) findViewById(R.id.chilisbuybutton);
        Button broccolibuybutton = (Button) findViewById(R.id.broccolibuybutton);
        Button pumpkinbuybutton = (Button) findViewById(R.id.pumpkinbuybutton);

        Button pizzabuybutton = (Button) findViewById(R.id.pizzabuybutton);
        Button porkbuybutton = (Button) findViewById(R.id.porkbuybutton);
        Button hoddogbuybutton = (Button) findViewById(R.id.hotdogbuybutton);
        Button hamburgerbuybutton = (Button) findViewById(R.id.hamburbuybutton);

        if(iq>=1 || unlockiqflag){
            hoddogrelative1.setVisibility(View.VISIBLE);
            hoddogrelative2.setVisibility(View.INVISIBLE);
            hoddogbuybutton.setVisibility(View.VISIBLE);



            juicerelative1.setVisibility(View.VISIBLE);
            juicerelative2.setVisibility(View.INVISIBLE);
            juicebuybutton.setVisibility(View.VISIBLE);
        }
        else{
            hoddogrelative1.setVisibility(View.VISIBLE);
            hoddogrelative2.setVisibility(View.VISIBLE);
            hoddogbuybutton.setVisibility(View.INVISIBLE);



            juicerelative1.setVisibility(View.VISIBLE);
            juicerelative2.setVisibility(View.VISIBLE);
            juicebuybutton.setVisibility(View.INVISIBLE);
        }



        if(iq>=2|| unlockiqflag){
            cornrelative1.setVisibility(View.VISIBLE);
            cornrelative2.setVisibility(View.INVISIBLE);
            cornbuybutton.setVisibility(View.VISIBLE);

            //eyebandbutton1.setEnabled(true);
            eyebandiq1.setVisibility(View.INVISIBLE);
            eyebandcheck1.setVisibility(View.VISIBLE);
            eyebandtext1.setVisibility(View.INVISIBLE);

            if(!eyeband1bought) {
                eyebandcheck1.setBackgroundResource(R.mipmap.buybtn);
                eyebandbutton1.setEnabled(false);
                eyebandcheck1.setEnabled(true);
                eyebandrel1.setVisibility(View.VISIBLE);

            }
            else {
               if(sleepbandpick!=1) eyebandcheck1.setBackgroundResource(R.mipmap.unchecked);
                else {
                   eyebandcheck1.setBackgroundResource(R.mipmap.checked);
                   if (eyeband3bought)eyebandcheck3.setBackgroundResource(R.mipmap.unchecked);
                   else eyebandcheck3.setBackgroundResource(R.mipmap.buybtn);

                   eyebandcheck2.setBackgroundResource(R.mipmap.unchecked);

                   if (eyeband3bought)eyebandcheck3.setBackgroundResource(R.mipmap.unchecked);
                   else eyebandcheck3.setBackgroundResource(R.mipmap.buybtn);
                   if (eyeband4bought)eyebandcheck4.setBackgroundResource(R.mipmap.unchecked);
                   else eyebandcheck4.setBackgroundResource(R.mipmap.buybtn);
                   if (eyeband5bought)eyebandcheck5.setBackgroundResource(R.mipmap.unchecked);
                   else eyebandcheck5.setBackgroundResource(R.mipmap.buybtn);
                   if (eyeband6bought)eyebandcheck6.setBackgroundResource(R.mipmap.unchecked);
                   else eyebandcheck6.setBackgroundResource(R.mipmap.buybtn);
               }
                eyebandrel1.setVisibility(View.INVISIBLE);
                eyebandbutton1.setEnabled(true);
                eyebandcheck1.setEnabled(false);
            }
        }
        else{


            eyebandbutton1.setEnabled(false);
            eyebandcheck1.setEnabled(false);
            eyebandiq1.setVisibility(View.VISIBLE);
            eyebandcheck1.setVisibility(View.INVISIBLE);
            eyebandtext1.setVisibility(View.VISIBLE);


            cornrelative1.setVisibility(View.VISIBLE);
            cornrelative2.setVisibility(View.VISIBLE);
            cornbuybutton.setVisibility(View.INVISIBLE);
        }

        if(iq>=3|| unlockiqflag){

            frenchtoastrelative1.setVisibility(View.VISIBLE);
            frenchtoastrelative2.setVisibility(View.INVISIBLE);
            frenchtoastbuybutton.setVisibility(View.VISIBLE);
        }
        else{

            frenchtoastrelative1.setVisibility(View.VISIBLE);
            frenchtoastrelative2.setVisibility(View.VISIBLE);
            frenchtoastbuybutton.setVisibility(View.INVISIBLE);
        }




        if(iq>=5|| unlockiqflag){
            pizzarelative1.setVisibility(View.VISIBLE);
            pizzarelative2.setVisibility(View.INVISIBLE);
            pizzabuybutton.setVisibility(View.VISIBLE);
            desert6relative1.setVisibility(View.VISIBLE);
            desert6relative2.setVisibility(View.INVISIBLE);
            desert6buybutton.setVisibility(View.VISIBLE);

            desert1buybutton.setVisibility(View.VISIBLE);;
            desert1relative1.setVisibility(View.VISIBLE);
            desert1relative2.setVisibility(View.INVISIBLE);

            cellsoaprelative2.setVisibility(View.INVISIBLE);
            cellsoapbuybtn.setVisibility(View.VISIBLE);



            eyebandiq3.setVisibility(View.INVISIBLE);
            eyebandcheck3.setVisibility(View.VISIBLE);
            eyebandtext3.setVisibility(View.INVISIBLE);
            if(!eyeband3bought) {
                eyebandcheck3.setBackgroundResource(R.mipmap.buybtn);
                eyebandbutton3.setEnabled(false);
                eyebandcheck3.setEnabled(true);
                eyebandrel3.setVisibility(View.VISIBLE);
            }
            else {
                if(sleepbandpick!=3) eyebandcheck3.setBackgroundResource(R.mipmap.unchecked);
                else {
                    eyebandcheck3.setBackgroundResource(R.mipmap.checked);


                    eyebandcheck2.setBackgroundResource(R.mipmap.unchecked);

                    if (eyeband1bought)eyebandcheck1.setBackgroundResource(R.mipmap.unchecked);
                    else eyebandcheck1.setBackgroundResource(R.mipmap.buybtn);
                    if (eyeband4bought)eyebandcheck4.setBackgroundResource(R.mipmap.unchecked);
                    else eyebandcheck4.setBackgroundResource(R.mipmap.buybtn);
                    if (eyeband5bought)eyebandcheck5.setBackgroundResource(R.mipmap.unchecked);
                    else eyebandcheck5.setBackgroundResource(R.mipmap.buybtn);
                    if (eyeband6bought)eyebandcheck6.setBackgroundResource(R.mipmap.unchecked);
                    else eyebandcheck6.setBackgroundResource(R.mipmap.buybtn);
                }
                eyebandbutton3.setEnabled(true);
                eyebandcheck3.setEnabled(false);
                eyebandrel3.setVisibility(View.INVISIBLE);
            }


        }
        else{
            eyebandcheck3.setEnabled(false);
            eyebandbutton3.setEnabled(false);
            eyebandiq3.setVisibility(View.VISIBLE);
            eyebandcheck3.setVisibility(View.INVISIBLE);
            eyebandtext3.setVisibility(View.VISIBLE);


            pizzarelative1.setVisibility(View.VISIBLE);
            pizzarelative2.setVisibility(View.VISIBLE);
            pizzabuybutton.setVisibility(View.INVISIBLE);
            desert6relative1.setVisibility(View.VISIBLE);
            desert6relative2.setVisibility(View.VISIBLE);
            desert6buybutton.setVisibility(View.INVISIBLE);


            desert1buybutton.setVisibility(View.INVISIBLE);;
            desert1relative1.setVisibility(View.VISIBLE);
            desert1relative2.setVisibility(View.VISIBLE);
            cellsoaprelative2.setVisibility(View.VISIBLE);
            cellsoapbuybtn.setVisibility(View.INVISIBLE);

        }

        if(iq>=6|| unlockiqflag){
            siskebaprelative1.setVisibility(View.VISIBLE);
            siskebaprelative2.setVisibility(View.INVISIBLE);
            siskebapbuybutton.setVisibility(View.VISIBLE);

        }
        else{
            siskebaprelative1.setVisibility(View.VISIBLE);
            siskebaprelative2.setVisibility(View.VISIBLE);
            siskebapbuybutton.setVisibility(View.INVISIBLE);
        }

        if(iq>=8|| unlockiqflag){
            souprelative1.setVisibility(View.VISIBLE);
            souprelative2.setVisibility(View.INVISIBLE);
            soupbuybutton.setVisibility(View.VISIBLE);

        }
        else{
            souprelative1.setVisibility(View.VISIBLE);
            souprelative2.setVisibility(View.VISIBLE);
            soupbuybutton.setVisibility(View.INVISIBLE);
        }

        if(iq>=10|| unlockiqflag){
            drinks5relative1.setVisibility(View.VISIBLE);
            drinks5relative2.setVisibility(View.INVISIBLE);
            drinks5buybutton.setVisibility(View.VISIBLE);

            greendarksoaprelative2.setVisibility(View.INVISIBLE);
            greendarksoapbuybtn.setVisibility(View.VISIBLE);

            eyebandbutton4.setEnabled(true);
            eyebandiq4.setVisibility(View.INVISIBLE);
            eyebandcheck4.setVisibility(View.VISIBLE);
            eyebandtext4.setVisibility(View.INVISIBLE);

            if(!eyeband4bought) {
                eyebandcheck4.setBackgroundResource(R.mipmap.buybtn);
                eyebandbutton4.setEnabled(false);
                eyebandcheck4.setEnabled(true);
                eyebandrel4.setVisibility(View.VISIBLE);
            }
            else {
                if(sleepbandpick!=4) eyebandcheck4.setBackgroundResource(R.mipmap.unchecked);
                else {
                    eyebandcheck4.setBackgroundResource(R.mipmap.checked);


                    eyebandcheck2.setBackgroundResource(R.mipmap.unchecked);

                    if (eyeband1bought)eyebandcheck1.setBackgroundResource(R.mipmap.unchecked);
                    else eyebandcheck1.setBackgroundResource(R.mipmap.buybtn);
                    if (eyeband3bought)eyebandcheck3.setBackgroundResource(R.mipmap.unchecked);
                    else eyebandcheck3.setBackgroundResource(R.mipmap.buybtn);
                    if (eyeband5bought)eyebandcheck5.setBackgroundResource(R.mipmap.unchecked);
                    else eyebandcheck5.setBackgroundResource(R.mipmap.buybtn);
                    if (eyeband6bought)eyebandcheck6.setBackgroundResource(R.mipmap.unchecked);
                    else eyebandcheck6.setBackgroundResource(R.mipmap.buybtn);
                }
                eyebandbutton4.setEnabled(true);
                eyebandcheck4.setEnabled(false);
                eyebandrel4.setVisibility(View.INVISIBLE);
            }
        }
        else{
            drinks5relative1.setVisibility(View.VISIBLE);
            drinks5relative2.setVisibility(View.VISIBLE);
            drinks5buybutton.setVisibility(View.INVISIBLE);


            greendarksoaprelative2.setVisibility(View.VISIBLE);
            greendarksoapbuybtn.setVisibility(View.INVISIBLE);
            eyebandcheck4.setEnabled(false);
            eyebandbutton4.setEnabled(false);
            eyebandiq4.setVisibility(View.VISIBLE);
            eyebandcheck4.setVisibility(View.INVISIBLE);
            eyebandtext4.setVisibility(View.VISIBLE);

        }

        if(iq>=12|| unlockiqflag){

            medisaladrelative1.setVisibility(View.VISIBLE);
            medisaladrelative2.setVisibility(View.INVISIBLE);
            medisaladbuybutton.setVisibility(View.VISIBLE);




            regional1relative1.setVisibility(View.VISIBLE);
            regional1relative2.setVisibility(View.INVISIBLE);
            regional1buybutton.setVisibility(View.VISIBLE);


            cokerelative1.setVisibility(View.VISIBLE);
            cokerelative2.setVisibility(View.INVISIBLE);
            cokebuybutton.setVisibility(View.VISIBLE);

        }
        else{
            medisaladrelative1.setVisibility(View.VISIBLE);
            medisaladrelative2.setVisibility(View.VISIBLE);
            medisaladbuybutton.setVisibility(View.INVISIBLE);


            regional1relative1.setVisibility(View.VISIBLE);
            regional1relative2.setVisibility(View.VISIBLE);
            regional1buybutton.setVisibility(View.INVISIBLE);



            cokerelative1.setVisibility(View.VISIBLE);
            cokerelative2.setVisibility(View.VISIBLE);
            cokebuybutton.setVisibility(View.INVISIBLE);
        }



        if(iq>=13|| unlockiqflag){
            watermelonrelative1.setVisibility(View.VISIBLE);
            watermelonrelative2.setVisibility(View.INVISIBLE);
            watermelonbuybutton.setVisibility(View.VISIBLE);
        }
        else{
            watermelonrelative1.setVisibility(View.VISIBLE);
            watermelonrelative2.setVisibility(View.VISIBLE);
            watermelonbuybutton.setVisibility(View.INVISIBLE);
        }


        if(iq>=14|| unlockiqflag){

            hamburgerrelative1.setVisibility(View.VISIBLE);
            hamburgerrelative2.setVisibility(View.INVISIBLE);
            hamburgerbuybutton.setVisibility(View.VISIBLE);


            eyebandbutton5.setEnabled(true);
            eyebandiq5.setVisibility(View.INVISIBLE);
            eyebandcheck5.setVisibility(View.VISIBLE);
            eyebandtext5.setVisibility(View.INVISIBLE);

            if(!eyeband5bought) {
                eyebandcheck5.setBackgroundResource(R.mipmap.buybtn);
                eyebandbutton5.setEnabled(false);
                eyebandcheck5.setEnabled(true);
                eyebandrel5.setVisibility(View.VISIBLE);
            }
            else {
                if(sleepbandpick!=5) eyebandcheck5.setBackgroundResource(R.mipmap.unchecked);
                else {
                    eyebandcheck5.setBackgroundResource(R.mipmap.checked);


                    eyebandcheck2.setBackgroundResource(R.mipmap.unchecked);

                    if (eyeband1bought)eyebandcheck1.setBackgroundResource(R.mipmap.unchecked);
                    else eyebandcheck1.setBackgroundResource(R.mipmap.buybtn);
                    if (eyeband3bought)eyebandcheck3.setBackgroundResource(R.mipmap.unchecked);
                    else eyebandcheck3.setBackgroundResource(R.mipmap.buybtn);
                    if (eyeband4bought)eyebandcheck4.setBackgroundResource(R.mipmap.unchecked);
                    else eyebandcheck4.setBackgroundResource(R.mipmap.buybtn);
                    if (eyeband6bought)eyebandcheck6.setBackgroundResource(R.mipmap.unchecked);
                    else eyebandcheck6.setBackgroundResource(R.mipmap.buybtn);
                }
                eyebandbutton5.setEnabled(true);
                eyebandcheck5.setEnabled(false);
                eyebandrel5.setVisibility(View.INVISIBLE);
            }
        }
        else{
            hamburgerrelative1.setVisibility(View.VISIBLE);
            hamburgerrelative2.setVisibility(View.VISIBLE);
            hamburgerbuybutton.setVisibility(View.INVISIBLE);
            eyebandcheck5.setEnabled(false);
            eyebandbutton5.setEnabled(false);
            eyebandiq5.setVisibility(View.VISIBLE);
            eyebandcheck5.setVisibility(View.INVISIBLE);
            eyebandtext5.setVisibility(View.VISIBLE);
        }


        if(iq>=16|| unlockiqflag){
            desert2relative1.setVisibility(View.VISIBLE);
            desert2relative2.setVisibility(View.INVISIBLE);
            desert2buybutton.setVisibility(View.VISIBLE);
            seaspongerelative1.setVisibility(View.VISIBLE);
            seaspongerelative2.setVisibility(View.INVISIBLE);
            seaspongebuybtn.setVisibility(View.VISIBLE);

        }
        else{
            desert2relative1.setVisibility(View.VISIBLE);
            desert2relative2.setVisibility(View.VISIBLE);
            desert2buybutton.setVisibility(View.INVISIBLE);
            seaspongerelative1.setVisibility(View.VISIBLE);
            seaspongerelative2.setVisibility(View.VISIBLE);
            seaspongebuybtn.setVisibility(View.INVISIBLE);


        }




        if(iq>=18|| unlockiqflag){
            porkrelative1.setVisibility(View.VISIBLE);
            porkrelative2.setVisibility(View.INVISIBLE);
            porkbuybutton.setVisibility(View.VISIBLE);
            chilisrelative1.setVisibility(View.VISIBLE);
            chilisrelative2.setVisibility(View.INVISIBLE);
            chilisbuybutton.setVisibility(View.VISIBLE);

            kiwirelative1.setVisibility(View.VISIBLE);
            kiwirelative2.setVisibility(View.INVISIBLE);
            kiwibuybutton.setVisibility(View.VISIBLE);
            regional2relative1.setVisibility(View.VISIBLE);
            regional2relative2.setVisibility(View.INVISIBLE);
            regional2buybutton.setVisibility(View.VISIBLE);
            desert4relative1.setVisibility(View.VISIBLE);
            desert4relative2.setVisibility(View.INVISIBLE);
            desert4buybutton.setVisibility(View.VISIBLE);

            drinks6relative1.setVisibility(View.VISIBLE);
            drinks6relative2.setVisibility(View.INVISIBLE);
            drinks6buybutton.setVisibility(View.VISIBLE);
        }
        else{
            porkrelative1.setVisibility(View.VISIBLE);
            porkrelative2.setVisibility(View.VISIBLE);
            porkbuybutton.setVisibility(View.INVISIBLE);
            chilisrelative1.setVisibility(View.VISIBLE);
            chilisrelative2.setVisibility(View.VISIBLE);
            chilisbuybutton.setVisibility(View.INVISIBLE);
            kiwirelative1.setVisibility(View.VISIBLE);
            kiwirelative2.setVisibility(View.VISIBLE);
            kiwibuybutton.setVisibility(View.INVISIBLE);
            regional2relative1.setVisibility(View.VISIBLE);
            regional2relative2.setVisibility(View.VISIBLE);
            regional2buybutton.setVisibility(View.INVISIBLE);

            desert4relative1.setVisibility(View.VISIBLE);
            desert4relative2.setVisibility(View.VISIBLE);
            desert4buybutton.setVisibility(View.INVISIBLE);

            drinks6relative1.setVisibility(View.VISIBLE);
            drinks6relative2.setVisibility(View.VISIBLE);
            drinks6buybutton.setVisibility(View.INVISIBLE);
        }



        if(iq>= 25|| unlockiqflag)

        {

            soap1relative2.setVisibility(View.INVISIBLE);
            soap1buybtn.setVisibility(View.VISIBLE);

            eyebandbutton6.setEnabled(true);
            eyebandiq6.setVisibility(View.INVISIBLE);
            eyebandcheck6.setVisibility(View.VISIBLE);
            eyebandtext6.setVisibility(View.INVISIBLE);
            if(!eyeband6bought) {
                eyebandcheck6.setBackgroundResource(R.mipmap.buybtn);
                eyebandbutton6.setEnabled(false);
                eyebandcheck6.setEnabled(true);
                eyebandrel6.setVisibility(View.VISIBLE);
            }
            else {
                if(sleepbandpick!=6) eyebandcheck6.setBackgroundResource(R.mipmap.unchecked);
                else {
                    eyebandcheck6.setBackgroundResource(R.mipmap.checked);


                    eyebandcheck2.setBackgroundResource(R.mipmap.unchecked);

                    if (eyeband1bought)eyebandcheck1.setBackgroundResource(R.mipmap.unchecked);
                    else eyebandcheck1.setBackgroundResource(R.mipmap.buybtn);
                    if (eyeband3bought)eyebandcheck3.setBackgroundResource(R.mipmap.unchecked);
                    else eyebandcheck3.setBackgroundResource(R.mipmap.buybtn);
                    if (eyeband5bought)eyebandcheck5.setBackgroundResource(R.mipmap.unchecked);
                    else eyebandcheck5.setBackgroundResource(R.mipmap.buybtn);
                    if (eyeband4bought)eyebandcheck4.setBackgroundResource(R.mipmap.unchecked);
                    else eyebandcheck4.setBackgroundResource(R.mipmap.buybtn);
                }
                eyebandbutton6.setEnabled(true);
                eyebandcheck6.setEnabled(false);
                eyebandrel6.setVisibility(View.INVISIBLE);
            }
        }

        else{
            soap1relative2.setVisibility(View.VISIBLE);
            soap1buybtn.setVisibility(View.INVISIBLE);

            eyebandbutton6.setEnabled(false);
            eyebandcheck6.setEnabled(false);
            eyebandiq6.setVisibility(View.VISIBLE);
            eyebandcheck6.setVisibility(View.INVISIBLE);


            eyebandtext6.setVisibility(View.VISIBLE);

    }




        if(iq>=27|| unlockiqflag){
            fishrelative1.setVisibility(View.VISIBLE);
            fishrelative2.setVisibility(View.INVISIBLE);
            fishbuybutton.setVisibility(View.VISIBLE);

            broccolirelative1.setVisibility(View.VISIBLE);
            broccolirelative2.setVisibility(View.INVISIBLE);
            broccolibuybutton.setVisibility(View.VISIBLE);
            bananarelative1.setVisibility(View.VISIBLE);
            bananarelative2.setVisibility(View.INVISIBLE);
            bananabuybutton.setVisibility(View.VISIBLE);

            regional4relative1.setVisibility(View.VISIBLE);
            regional4relative2.setVisibility(View.INVISIBLE);
            regional4buybutton.setVisibility(View.VISIBLE);

            desert5relative1.setVisibility(View.VISIBLE);
            desert5relative2.setVisibility(View.INVISIBLE);
            desert5buybutton.setVisibility(View.VISIBLE);

            onionringsrelative1.setVisibility(View.VISIBLE);
            onionringsrelative2.setVisibility(View.INVISIBLE);
            onionringsbuybutton.setVisibility(View.VISIBLE);
        }
        else{
            fishrelative1.setVisibility(View.VISIBLE);
            fishrelative2.setVisibility(View.VISIBLE);
            fishbuybutton.setVisibility(View.INVISIBLE);
            broccolirelative1.setVisibility(View.VISIBLE);
            broccolirelative2.setVisibility(View.VISIBLE);
            broccolibuybutton.setVisibility(View.INVISIBLE);

            bananarelative1.setVisibility(View.VISIBLE);
            bananarelative2.setVisibility(View.VISIBLE);
            bananabuybutton.setVisibility(View.INVISIBLE);

            regional4relative1.setVisibility(View.VISIBLE);
            regional4relative2.setVisibility(View.VISIBLE);
            regional4buybutton.setVisibility(View.INVISIBLE);

            desert5relative1.setVisibility(View.VISIBLE);
            desert5relative2.setVisibility(View.VISIBLE);
            desert5buybutton.setVisibility(View.INVISIBLE);

            onionringsrelative1.setVisibility(View.VISIBLE);
            onionringsrelative2.setVisibility(View.VISIBLE);
            onionringsbuybutton.setVisibility(View.INVISIBLE);
        }

        if(iq>=40|| unlockiqflag){
            regional6relative1.setVisibility(View.VISIBLE);
            regional6relative2.setVisibility(View.INVISIBLE);
            drinks4relative1.setVisibility(View.VISIBLE);
            drinks4relative2.setVisibility(View.INVISIBLE);

            tbonerelative1.setVisibility(View.VISIBLE);
            tbonerelative2.setVisibility(View.INVISIBLE);

            pumpkinrelative1.setVisibility(View.VISIBLE);
            pumpkinrelative2.setVisibility(View.INVISIBLE);

            tbonebuybutton.setVisibility(View.VISIBLE);
            regional6buybutton.setVisibility(View.VISIBLE);
            drinks4buybutton.setVisibility(View.VISIBLE);
            pumpkinbuybutton.setVisibility(View.VISIBLE);
            soap2relative2.setVisibility(View.INVISIBLE);
            soap2buybtn.setVisibility(View.VISIBLE);

        }
        else{

            regional6relative1.setVisibility(View.VISIBLE);
            regional6relative2.setVisibility(View.VISIBLE);
            drinks4relative1.setVisibility(View.VISIBLE);
            drinks4relative2.setVisibility(View.VISIBLE);

            tbonerelative1.setVisibility(View.VISIBLE);
            tbonerelative2.setVisibility(View.VISIBLE);

            pumpkinrelative1.setVisibility(View.VISIBLE);
            pumpkinrelative2.setVisibility(View.VISIBLE);

            tbonebuybutton.setVisibility(View.INVISIBLE);
            regional6buybutton.setVisibility(View.INVISIBLE);
            drinks4buybutton.setVisibility(View.INVISIBLE);
            pumpkinbuybutton.setVisibility(View.INVISIBLE);

            soap2relative2.setVisibility(View.VISIBLE);
            soap2buybtn.setVisibility(View.INVISIBLE);

        }

    }


    public void onSensorChanged(SensorEvent event){




        final ImageView main = (ImageView) findViewById(R.id.imageView);
        Sensor sensor = event.sensor;
        final float density = Resources.getSystem().getDisplayMetrics().density;
        int frameY2= (int) (density*450);
        int frameY1=0;
        int rx= getWindowManager().getDefaultDisplay().getWidth();
        final FrameLayout f = (FrameLayout) findViewById(R.id.frame);
        final FrameLayout fr = (FrameLayout) findViewById(R.id.white);
        final float density1 = Resources.getSystem().getDisplayMetrics().density;
        ImageView img = (ImageView) findViewById(R.id.lefteyewhite);
        final ImageView righteyebackimg = (ImageView) findViewById(R.id.righteyewhite);
        float conversiony = frameheight * density1;
        final FrameLayout righteyeback = (FrameLayout) findViewById(R.id.righteyeback);
        ViewGroup.MarginLayoutParams marginParams1 = new ViewGroup.MarginLayoutParams(fr.getLayoutParams());
        marginParams1.setMargins(pupilleftxstore2, pupilleftystore2, 0, 0);
        FrameLayout.LayoutParams layoutParams1 = new FrameLayout.LayoutParams(marginParams1);
        layoutParams1.width = pupilleftx1store2 - pupilleftxstore2;
        layoutParams1.height = pupillefty1store2 - pupilleftystore2;
        fr.setLayoutParams(layoutParams1);
        fr.setVisibility(View.VISIBLE);
        final ImageView movement = (ImageView) findViewById(R.id.lefteyeimg);
        final FrameLayout righteye = (FrameLayout) findViewById(R.id.righteye);
        final ImageView righteyeimage = (ImageView) findViewById(R.id.righteyeimg);

        final TextView debug = (TextView) findViewById(R.id.textView131);
         final TextView debug2 = (TextView) findViewById(R.id.textView132);

        TextView debug3 = (TextView) findViewById(R.id.textView133);
        TextView debug4 = (TextView) findViewById(R.id.textView134);

        FrameLayout mainframe = (FrameLayout) findViewById(R.id.yigit);

        ViewGroup.MarginLayoutParams marginParams2 = new ViewGroup.MarginLayoutParams(f.getLayoutParams());
        marginParams2.setMargins(pupilleftxstore2 - pupilerror, pupilleftystore2 - pupilerror, 0, 0);
        FrameLayout.LayoutParams layoutParams2 = new FrameLayout.LayoutParams(marginParams2);
        layoutParams2.height = pupillefty1store2 - pupilleftystore2 + pupilerror * 2;
        layoutParams2.width = pupilleftx1store2 - pupilleftxstore2 + pupilerror * 2;
        f.setLayoutParams(layoutParams2);
        movement.setImageBitmap(getclip(pupilleftsensor));
        f.setVisibility(View.VISIBLE);
        ViewGroup.MarginLayoutParams marginParamsright2 = new ViewGroup.MarginLayoutParams(righteye.getLayoutParams());
        marginParamsright2.setMargins(pupilrightxstore2 - pupilerror, pupilrightystore2 - pupilerror, 0, 0);
        FrameLayout.LayoutParams layoutParamsright2 = new FrameLayout.LayoutParams(marginParamsright2);
        layoutParamsright2.height = pupilrighty1store2 - pupilrightystore2 + pupilerror * 2;
        layoutParamsright2.width = pupilrightx1store2 - pupilrightxstore2 + pupilerror * 2;
        righteye.setLayoutParams(layoutParamsright2);
        righteyeimage.setImageBitmap(getclip(pupilrightsensor));
        righteye.setVisibility(View.VISIBLE);
        GradientDrawable drawable11 = (GradientDrawable) img.getBackground();

        drawable11.setColor(resizedBitmapsensor.getPixel(pupilleftxstore2 - (rx - resizedBitmapsensor.getWidth()) / 2  - (int) (1.5*density), (int) (pupilleftystore2 - (conversiony - resizedBitmapsensor.getHeight()) / 2) + (int) (9*density)));//original
        //drawable11.setColor(Color.argb(255,224,224,224));

        // img.setBackgroundColor(resizedBitmap.getPixel(pupilleftx - (rx - resizedBitmap.getWidth()) / 2 + pupilleftx1 - pupilleftx + 5, pupillefty + 15));


        ViewGroup.MarginLayoutParams marginParamsright1 = new ViewGroup.MarginLayoutParams(righteyeback.getLayoutParams());
        marginParamsright1.setMargins(pupilrightxstore2, pupilrightystore2, 0, 0);
        FrameLayout.LayoutParams layoutParamsright1 = new FrameLayout.LayoutParams(marginParamsright1);
        layoutParamsright1.width = pupilrightx1store2 - pupilrightxstore2;
        layoutParamsright1.height = pupilrighty1store2 - pupilrightystore2;
        righteyeback.setLayoutParams(layoutParamsright1);
        righteyeback.setVisibility(View.VISIBLE);

        GradientDrawable drawable111 = (GradientDrawable) righteyebackimg.getBackground();
        drawable111.setColor(resizedBitmapsensor.getPixel(pupilrightxstore2 - (rx - resizedBitmapsensor.getWidth()) / 2 - (int) (1.5*density), (int) (pupilrightystore2 - (conversiony - resizedBitmapsensor.getHeight()) / 2) + (int) (9*density))); //original
        //drawable111.setColor(Color.argb(255,224,224,224));


        float [] values = event.values;
        synchronized (this) {
            Log.d(tag, "onSensorChanged: " + sensor + ", x: " +
                    values[0] + ", y: " + values[1] + ", z: " + values[2]);
            if (sensor.getType() == Sensor.TYPE_ACCELEROMETER ) {


                xa=(int)values[0];// this part of code is only test to see int x and y on Activity
                ya=(int)values[1];

                if(ball.getX()-xa*1>rx-(int)ball.getWidth() ) ball.setX(rx-(int)ball.getWidth());
                else if((ball.getX()-xa*1<0 )) ball.setX(0);
                else {ball.setX(ball.getX()-xa*1);}



                if(ball.getY()+ya*1>frameY2-(int)ball.getHeight() ) ball.setY(frameY2-(int)ball.getHeight());
                else if((ball.getY()+ya*1<frameY1 )) ball.setY(frameY1);
                else {ball.setY(ball.getY()+ya*1);}

        final float density2 = Resources.getSystem().getDisplayMetrics().density;
        final float distancex = 5;
        final float distancey = 3;
        final float setY = 0;
        final float setX = 0;

        final double mxx = ((double) pupilleftxstore2 - (double) pupilrightx1store2) / 2 + pupilrightx1store2;

        final float middlex = (float) mxx;
//eyetears


        final float setrightY = 0;
        final float setrightX = 0;


        final float myvalueyfinal = pupilleftystore2 - 2 + (115 * density2);
        final float myvalueyfinal2 = pupilleftystore2;//for menu eye movement
        //final float myvaluexfinal = pupilleftx-2;
        final float myvaluexfinal = middlex - 2;


        final float myvalueyfinalright = pupilrightystore2 - 2 + (115 * density2);
        final float myvalueyfinalright2 = pupilrightystore2;//for menu eye movement
        //final float myvaluexfinalright = pupilrightx-2;
        final float myvaluexfinalright = middlex - 2;



        float opposite1 = ball.getY() - setY - myvalueyfinal2;
        float adjacent1 = ball.getX() - setX - myvaluexfinal;

        float oppositeright1 = ball.getY() - setrightY - myvalueyfinalright2;
        float adjacentright1 = ball.getX() - setrightX - myvaluexfinalright;


        double degree1 = Math.atan(opposite1 / adjacent1);
        Float dX1 = (float) (distancex * density2 * Math.cos(degree1));
        Float dY1 = (float) (distancey * density2 * Math.sin(degree1));

        double degreeright1 = Math.atan(oppositeright1 / adjacentright1);
        Float dX1right = (float) (distancex * density2 * Math.cos(degreeright1));
        Float dY1right = (float) (distancey * density2 * Math.sin(degreeright1));


        opposite1 = ball.getY()- setY - myvalueyfinal2;
        adjacent1 = ball.getX() - setX - myvaluexfinal;

        oppositeright1 = ball.getY() - setrightY - myvalueyfinalright2;
        adjacentright1 = ball.getX() - setrightX - myvaluexfinalright;


        degree1 = Math.atan(opposite1 / adjacent1);
        dX1 = (float) (distancex * density2 * Math.cos(degree1));
        dY1 = (float) (distancey * density2 * Math.sin(degree1));

        degreeright1 = Math.atan(oppositeright1 / adjacentright1);
        dX1right = (float) (distancex * density2 * Math.cos(degreeright1));
        dY1right = (float) (distancey * density2 * Math.sin(degreeright1));


        if (adjacent1 < 0) {
            dX1 = dX1 * -1;
            dY1 = dY1 * -1;
        }
        if (adjacentright1 < 0) {
            dX1right = dX1right * -1;
            dY1right = dY1right * -1;
        }
        // else if (adjacent1 < 0 && opposite1<0){dX1=dX1*-1;}


              /*  debug.setText(Float.toString(dX1));
                debug2.setText(Float.toString(dY1));

                debug3.setText(Float.toString(setX));
                debug4.setText(Float.toString(setY));*/




        movement.animate()
                .x(setX + dX1)
                .y(setY + dY1)
                .setDuration(0)
                .start();

        righteyeimage.animate()
                .x(setrightX + dX1right)
                .y(setrightY + dY1right)
                .setDuration(0)
                .start();


              main.setEnabled(false);
                // ball.setY(ball.getY()+ya*1);

                if(!sensorflag) {
                    sensore.unregisterListener(this);

                    movement.animate()
                            .x(setX)
                            .y(setY)
                            .setDuration(0)
                            .start();

                    righteyeimage.animate()
                            .x(setrightX)
                            .y(setrightY)
                            .setDuration(0)
                            .start();
                    main.setEnabled(true);

                }

                else{
                    Sensor Accel = sensore.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);
                    sensore.registerListener((SensorEventListener) this, Accel, SENSORTYPE);


                }


                ball.invalidate();



                // ball.scrollTo(xa, ya);
                //x.setText("x"+ SensorManager.DATA_X);
                //y.setText("y"+ SensorManager.DATA_Y);
                //z.setText("z"+ SensorManager.DATA_Z);
            }
        }
    }
    private void SaveImagejane(Bitmap finalBitmap) {

        String root = Environment.getExternalStorageDirectory().toString();
        File myDir = new File("/storage/emulated/0/Vivo/");
        String fname = ".pic2.jpg";
        File file = new File (myDir, fname);
        if (file.exists ()) file.delete ();
        try {
            FileOutputStream out = new FileOutputStream(file);
            finalBitmap.compress(Bitmap.CompressFormat.JPEG, 90, out);
            out.flush();
            out.close();

        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    private boolean dropEventNotHandled(DragEvent dragEvent) {
        return !dragEvent.getResult();
    }

    private void galleryAddPic() {
        Intent mediaScanIntent = new Intent(Intent.ACTION_MEDIA_SCANNER_SCAN_FILE);
        String root = Environment.getExternalStorageDirectory().toString();
        File myDir = new File(root +"/Vivo/");


        //myDir.mkdirs();
        //Random generator = new Random();
        //int n = 10000;
        //n = generator.nextInt(n);


        SimpleDateFormat s = new SimpleDateFormat("ddMMyyyyhhmmss");
        String timeStamp = s.format(new Date());
        String fname = "sharedimage-" + timeStamp + ".jpeg";

        File f = new File(myDir, fname);
        Uri contentUri = Uri.fromFile(f);
        mediaScanIntent.setData(contentUri);
        this.sendBroadcast(mediaScanIntent);
    }



    public void loadarray(int[] array)
    {

        SharedPreferences shared = getSharedPreferences("info", MODE_PRIVATE);
        storearraycount2 = shared.getInt("storearraycount", storearraycount);

        for (int i = 0; i < storearraycount2 ; i++)
        {

            marketarraystore2[i] = shared.getInt("storearray" + Integer.toString(i), 0);

        }
        printstorearray();

    }


    public void savearray ( int[] array)

    {

        SharedPreferences pref;
        pref = getSharedPreferences("info", MODE_PRIVATE);
//Using putXXX - with XXX is type data you want to write like: putString, putInt...   from      Editor object
        final SharedPreferences.Editor editor = pref.edit();

        editor.putInt("storearraycount", storearraycount);
        for (int i = 0; i < storearraycount ; i++)
        {

            editor.putInt("storearray" + Integer.toString(i), marketarraystore[i]);

        }

        editor.commit();
        printstorearray();
    }



    public int getindexarray(int index)
    {
        int returnvar = 0;
        for (int i = 0; i< storearraycount; i++)
        {
            if (marketarraystore[i] == index) {
                returnvar = i;

            }
        }

        return returnvar;
    }
 /*   @Override
    public boolean dispatchTouchEvent(MotionEvent ev){
        return true;//consume
    }
*/
    void addtolayout()
    {
        loadarray(marketarraystore);

        ;

        for (int i = 0; i< storearraycount2; i++)

        {
            addfood(marketarraystore2[i]);

        }
    }

    void resetarray()
    {

        for (int i = 0; i< 200; i++)

        {
            marketarraystore[i] = 0;

        }
        savearray(marketarraystore);
    }




    void printstorearray()
    {

        TextView debug4 = (TextView) findViewById(R.id.textView134);
        String x = "";
        for (int i = 0; i< storearraycount2; i++)

        {
            x = x + Integer.toString(marketarraystore2[i]);

        }

       // debug4.setText(x);
    }

void addfunction()
{  //InMobiBanner bannerAd22 = (InMobiBanner) findViewById(R.id.banner);

    final RelativeLayout adContainer = (RelativeLayout) findViewById(R.id.containerview);

    if (adflag)
    {

      // mAdView.setVisibility(View.INVISIBLE);


        adContainer.setVisibility(View.INVISIBLE);
    }
    else {

       // mAdView.setVisibility(View.VISIBLE);
        adContainer.setVisibility(View.VISIBLE);
    }

}

    void showalert(int x)
    {




        RelativeLayout layout = (RelativeLayout) findViewById(R.id.pluscoinlayout3) ;
        TextView congrats21 = (TextView) findViewById(R.id.textView5521);
        final FrameLayout disableallchild = (FrameLayout) findViewById(R.id.draglayout);

        layout.setVisibility(View.VISIBLE);

        final Animation shake = AnimationUtils.loadAnimation(this, R.anim.lefttoright);
        coinbackpressflag = false;
        disableallchild.setVisibility(View.VISIBLE);
        shake.setDuration(SLIDEANIMDUR);
        layout.setAnimation(shake);
        final MediaPlayer clickaudio2 = MediaPlayer.create(getApplicationContext(), R.raw.popupsound);
        if(!mutestate[0]) {
            clickaudio2.start();
            clickaudio2.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                public void onCompletion(MediaPlayer mp) {
                    clickaudio2.release();

                }

                ;
            });
        }

        else if (x == MULTCOIN2)
        {

            if (gamelang == ENGLISH)  congrats21.setText("Coin earned from the games has doubled.");
            else if (gamelang == TURKISH)  congrats21.setText("Oyunlardan kazanılan paranız iki katına çıktı.");
            else if (gamelang == FRENCH)  congrats21.setText("Coin gagné à partir des jeux a doublé");
            else if (gamelang == SPANISH) congrats21.setText("La moneda ganada de los juegos se ha duplicado");
            else if (gamelang == RUSSIAN) congrats21.setText("Монета заработал от игр удвоилось");
            else if (gamelang == CHINESE) congrats21.setText("从游戏赚取的硬币翻了一番");
            else if (gamelang == JAPANESE) congrats21.setText("ゲームから得たコインは2倍になりました");
            else if (gamelang == PORTUGUESE) congrats21.setText("A moeda ganha dos jogos dobrou");
            else   congrats21.setText("Coin earned from the games has doubled.");

        }


        if (x == NOADD)
        {

            if (gamelang == ENGLISH)  congrats21.setText("All in-app ads are now disabled.");
            else if (gamelang == TURKISH)  congrats21.setText("Tüm uygulama içi reklamlar artık devre dışı kaldı.");
            else if (gamelang == FRENCH)  congrats21.setText("Toutes les annonces in-app sont maintenant désactivées");
            else if (gamelang == SPANISH) congrats21.setText("Todos los anuncios en la aplicación ahora no lo están");
            else if (gamelang == RUSSIAN) congrats21.setText("Все объявления в приложении отключены");
            else if (gamelang == CHINESE) congrats21.setText("所有应用程式内广告现已停用");
            else if (gamelang == JAPANESE) congrats21.setText("すべてのアプリ内広告は、現在無効になっています");
            else if (gamelang == PORTUGUESE) congrats21.setText("Todos os anúncios in-app agora são desativados");
            else   congrats21.setText("All in-app ads are now disabled.");



        }

        else if (x == PLUS5GAME)
        {

            if (gamelang == ENGLISH)  congrats21.setText("For all games maximum right to play is 5.");
            else if (gamelang == TURKISH)  congrats21.setText("Tüm oyunlar için oynama hakkı maksimum  5'tir.");
            else if (gamelang == FRENCH)  congrats21.setText("Pour tous les jeux droit au maximum à jouer est 5");
            else if (gamelang == SPANISH) congrats21.setText("En todos los partidos máxima derecho a jugar es 5");
            else if (gamelang == RUSSIAN) congrats21.setText("Для всех игр максимум право играть 5");
            else if (gamelang == CHINESE) congrats21.setText("对于所有的游戏最大的游戏权利是5");
            else if (gamelang == JAPANESE) congrats21.setText("すべてのゲームのためにプレーする最大の権利は5です");
            else if (gamelang == PORTUGUESE) congrats21.setText("Para todos os jogos direito máximo para jogar é 5");
            else   congrats21.setText("For all games maximum right to play is 5.");

        }

        else if (x == UNLOCKIQ)
        {

            if (gamelang == ENGLISH)  congrats21.setText("All market products are now unlocked.");
            else if (gamelang == TURKISH)  congrats21.setText("Tüm Pazar ürünlerinin kilidi açılmıştır.");
            else if (gamelang == FRENCH)  congrats21.setText("Tous les éléments seront déverrouillés.");
            else if (gamelang == SPANISH) congrats21.setText("Todos los productos del mercado están ahora desbloqueados.");
            else if (gamelang == RUSSIAN) congrats21.setText("Все продукты рынка теперь разблокирована.");
            else if (gamelang == CHINESE) congrats21.setText("所有市场产品现在解锁");
            else if (gamelang == JAPANESE) congrats21.setText("すべての市場の製品は、現在ロックされていません。");
            else if (gamelang == PORTUGUESE) congrats21.setText("Todos os produtos do mercado estão agora desbloqueado.");
            else   congrats21.setText("All market products are now unlocked.");

        }






    }

    void checkcoinshop()
    {
        final RelativeLayout instalayout = (RelativeLayout) findViewById(R.id.coinlayoutinsta);
        final Button instalayout1 = (Button) findViewById(R.id.imagedesert521);
        final Button instalayout2 = (Button) findViewById(R.id.instabutton);

        final RelativeLayout instalayout11 = (RelativeLayout) findViewById(R.id.instarel);


        final RelativeLayout twitlayout = (RelativeLayout) findViewById(R.id.coinlayouttwit);
        final Button twitlayout1 = (Button) findViewById(R.id.imagedesert5221);
        final Button twitlayout2 = (Button) findViewById(R.id.twitterbutton);

        final RelativeLayout twitlayout11 = (RelativeLayout) findViewById(R.id.twitrel);







        final RelativeLayout googlelayout = (RelativeLayout) findViewById(R.id.coinlayoutfacrel2);
        final Button googlelayout1 = (Button) findViewById(R.id.imagedesert522);
        final Button googlelayout2 = (Button) findViewById(R.id.facebutton22);

        final RelativeLayout googlelayout11 = (RelativeLayout) findViewById(R.id.facerel2);

        final RelativeLayout unlcokiqlayout = (RelativeLayout) findViewById(R.id.unlockiq);
        final Button unlcokiqimage = (Button) findViewById(R.id.imageunlockiq);
        final Button unlockiqbutton = (Button) findViewById(R.id.unlockiqbutton);
        final RelativeLayout unlockiqlayout2 = (RelativeLayout) findViewById(R.id.unlockiq2);

        final Button mult2image = (Button) findViewById(R.id.imagemult2);
        final Button mult2button = (Button) findViewById(R.id.mult2button);
        final RelativeLayout mult2layout2 = (RelativeLayout) findViewById(R.id.mult22);


        final RelativeLayout videolayout = (RelativeLayout) findViewById(R.id.coinlayoutcoinvideo);
        final Button coinvideo = (Button) findViewById(R.id.coinvideoimg);
        final Button coinvideo2 = (Button) findViewById(R.id.coinvideobutton);
        final RelativeLayout coinvideolayout = (RelativeLayout) findViewById(R.id.coinvideorel);

        final RelativeLayout facelayout = (RelativeLayout) findViewById(R.id.coinlayoutfacrel);
        final Button facelayout1 = (Button) findViewById(R.id.imagedesert52);
        final Button facelayout12 = (Button) findViewById(R.id.facebutton);

        final RelativeLayout facelayout11 = (RelativeLayout) findViewById(R.id.facerel);

        final RelativeLayout coin500 = (RelativeLayout) findViewById(R.id.coin500rel);


        final RelativeLayout coin500layout = (RelativeLayout) findViewById(R.id.coinlayoutcoin500);
        final Button coin500l1 = (Button) findViewById(R.id.coin500img);
        final Button coin500l2 = (Button) findViewById(R.id.coin500button);


        final RelativeLayout plusgame = (RelativeLayout) findViewById(R.id.plusgamerel);


        final RelativeLayout plusgamelayout = (RelativeLayout) findViewById(R.id.coinlayoutplus5game);
        final Button plusgamel1 = (Button) findViewById(R.id.plusgameimg);
        final Button plusgamel2 = (Button) findViewById(R.id.plusgamebutton);

        final boolean isAvailable = BillingProcessor.isIabServiceAvailable(this);

        final RelativeLayout coin10 = (RelativeLayout) findViewById(R.id.coin10rel);



        final RelativeLayout coin10layout = (RelativeLayout) findViewById(R.id.coinlayoutcoin10);
        final Button coin10l1 = (Button) findViewById(R.id.coin10img);
        final Button coin10l2 = (Button) findViewById(R.id.coin10button);

        final Button questionplus5game = (Button) findViewById(R.id.questionplus5);
        final Button questionunlockiq = (Button) findViewById(R.id.questionunlock );
        final Button questionnodd = (Button) findViewById(R.id.questionnoadd);
        final Button questionmult2 = (Button) findViewById(R.id.questionmult2);

        final TextView textquestion = (TextView) findViewById(R.id.textView872);




        if(adflag == false ) {


            coin10.setEnabled(true);
            coin10l1.setEnabled(true);
            coin10l2.setEnabled(true);
            coin10layout.setAlpha(1f);
            coin10l1.setAlpha(1f);
            coin10l2.setAlpha(1f);
            questionnodd.setEnabled(true);
            questionnodd.setAlpha(1f);

        }
        else {


            coin10.setEnabled(false);
            coin10l1.setEnabled(false);
            coin10l2.setEnabled(false);
            coin10layout.setAlpha(0.33f);
            coin10l1.setAlpha(0.33f);
            coin10l2.setAlpha(0.33f);
            questionnodd.setEnabled(false);
            questionnodd.setAlpha(0.33f);

        }

        if(twitcoin==false)
        {
            twitlayout1.setEnabled(true);
            twitlayout2.setEnabled(true);
            twitlayout11.setEnabled(true);
            twitlayout1.setAlpha(1f);
            twitlayout2.setAlpha(1f);
            twitlayout11.setAlpha(1f);

        }
        else   {
            twitlayout1.setEnabled(false);
            twitlayout2.setEnabled(false);
            twitlayout11.setEnabled(false);

            twitlayout1.setAlpha(0.33f);
            twitlayout2.setAlpha(0.33f);
            twitlayout11.setAlpha(0.33f);

        }

        if(instacoin==false)
        {
            instalayout1.setEnabled(true);
            instalayout2.setEnabled(true);
            instalayout11.setEnabled(true);
            instalayout1.setAlpha(1f);
            instalayout2.setAlpha(1f);
            instalayout11.setAlpha(1f);

        }
        else   {
            instalayout1.setEnabled(false);
            instalayout2.setEnabled(false);
            instalayout11.setEnabled(false);

            instalayout1.setAlpha(0.33f);
            instalayout2.setAlpha(0.33f);
            instalayout11.setAlpha(0.33f);

        }


        if(facecoin==false)
        {
            facelayout1.setEnabled(true);
            facelayout11.setEnabled(true);
            facelayout12.setEnabled(true);
            facelayout1.setAlpha(1f);
            facelayout11.setAlpha(1f);
            facelayout12.setAlpha(1f);

        }
        else   {
            facelayout1.setEnabled(false);
            facelayout11.setEnabled(false);
            facelayout12.setEnabled(false);

            facelayout1.setAlpha(0.33f);
            facelayout11.setAlpha(0.33f);
            facelayout12.setAlpha(0.33f);

        }


        if(googlecoin==false)
        {
            googlelayout1.setEnabled(true);
            googlelayout11.setEnabled(true);
            googlelayout2.setEnabled(true);
            googlelayout1.setAlpha(1f);
            googlelayout11.setAlpha(1f);
            googlelayout2.setAlpha(1f);

        }
        else
        {
            googlelayout1.setEnabled(false);
            googlelayout11.setEnabled(false);
            googlelayout2.setEnabled(false);

            googlelayout1.setAlpha(0.33f);
            googlelayout11.setAlpha(0.33f);
            googlelayout2.setAlpha(0.33f);

        }


        if(plus5gameflag==false )
        {
            plusgame.setEnabled(true);
            plusgamel1.setEnabled(true);
            plusgamel2.setEnabled(true);
            plusgame.setAlpha(1f);
            plusgamel1.setAlpha(1f);
            plusgamel2.setAlpha(1f);
            questionplus5game.setEnabled(true);
            questionplus5game.setAlpha(1f);
        }

        else
        {

            plusgame.setEnabled(false);
            plusgamel1.setEnabled(false);
            plusgamel2.setEnabled(false);
            plusgame.setAlpha(0.33f);
            plusgamel1.setAlpha(0.33f);
            plusgamel2.setAlpha(0.33f);
            questionplus5game.setEnabled(false);
            questionplus5game.setAlpha(0.33f);
        }

        if(mult2flag==false )
        {
            mult2layout2.setEnabled(true);
            mult2button.setEnabled(true);
            mult2image.setEnabled(true);
            mult2layout2.setAlpha(1f);
            mult2button.setAlpha(1f);
            mult2image.setAlpha(1f);
            questionmult2.setEnabled(true);
            questionmult2.setAlpha(1f);
        }


        else
        {
            mult2layout2.setEnabled(false);
            mult2button.setEnabled(false);
            mult2image.setEnabled(false);

            mult2layout2.setAlpha(0.33f);
            mult2button.setAlpha(0.33f);
            mult2image.setAlpha(0.33f);
            questionmult2.setEnabled(false);
            questionmult2.setAlpha(0.33f);
        }


        if(unlockiqflag==false )
        {
            unlockiqlayout2.setEnabled(true);
            unlockiqbutton.setEnabled(true);
            unlcokiqimage.setEnabled(true);
            unlockiqlayout2.setAlpha(1f);
            unlockiqbutton.setAlpha(1f);
            unlcokiqimage.setAlpha(1f);
            questionunlockiq.setEnabled(true);
            questionunlockiq.setAlpha(1f);
        }


        else
        {
            unlockiqlayout2.setEnabled(false);
            unlockiqbutton.setEnabled(false);
            unlcokiqimage.setEnabled(false);

            unlockiqlayout2.setAlpha(0.33f);
            unlockiqbutton.setAlpha(0.33f);
            unlcokiqimage.setAlpha(0.33f);
            questionunlockiq.setEnabled(false);
            questionunlockiq.setAlpha(0.33f);
        }





    }

    public static double round(double value, int places) {
        if (places < 0) throw new IllegalArgumentException();

        BigDecimal bd = new BigDecimal(value);
        bd = bd.setScale(places, RoundingMode.HALF_UP);
        return bd.doubleValue();
    }

    public boolean isGooglePlayServicesAvailable(Context context){
        GoogleApiAvailability googleApiAvailability = GoogleApiAvailability.getInstance();
        int resultCode = googleApiAvailability.isGooglePlayServicesAvailable(context);
        return resultCode == ConnectionResult.SUCCESS;
    }




    void connectioncoin()

    {
       ImageView img = (ImageView) findViewById(R.id.coinconnectionlayoutimg);
        FrameLayout frm = (FrameLayout) findViewById(R.id.coinconnectionlayout);
        frm.setVisibility(View.VISIBLE);
        img.setVisibility(View.VISIBLE);
        frm.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View view, MotionEvent motionEvent) {
                return true;
            }
        });


        AnimatorSet set;
        set = (AnimatorSet) AnimatorInflater.loadAnimator(this, R.animator.flipanimator);
        set.setTarget(img);

        //set.setDuration(1000);
        ObjectAnimator imageViewObjectAnimator = ObjectAnimator.ofFloat(img ,
                "rotationY", 0f, 180f);
        imageViewObjectAnimator.setDuration(750); // miliseconds
        imageViewObjectAnimator.setRepeatCount(ValueAnimator.INFINITE);
        imageViewObjectAnimator.start();


    }



    public void getskudetail()
    {


        int hour = Calendar.getInstance().get(Calendar.HOUR_OF_DAY);
        int minutes = Calendar.getInstance().get(Calendar.MINUTE);
        int sec = Calendar.getInstance().get(Calendar.SECOND);


        Boolean is24 = false;
        Button unlockiqtext = (Button) findViewById(R.id.unlockiqbutton);
        Button mult2text = (Button) findViewById(R.id.mult2button);
        Button plu5gametext = (Button) findViewById(R.id.plusgamebutton);
        Button noadtext = (Button) findViewById(R.id.coin10button);
        Button coin2000text = (Button) findViewById(R.id.coin100button);
        Button coin5000text = (Button) findViewById(R.id.coin500button);
        Button coin10000text = (Button) findViewById(R.id.coin1000button);

        SharedPreferences shared = getSharedPreferences("info", MODE_PRIVATE);
        Long timeservice2 = shared.getLong("time2", 0);

        long value = System.currentTimeMillis()/1000;
        Log.d("taggy",Boolean.toString(is24) );

        String x  = shared.getString("unlockiqskun", "null");


        double yesterdayaftere =  value - (hour*60*60 + minutes*60 + sec);







        if (timeservice2 <= yesterdayaftere   || timeservice2 == 0 || x == "null")
        {
            is24 = true;

        }

        final boolean isAvailable = BillingProcessor.isIabServiceAvailable(this);


        SkuDetails skunn = bp.getPurchaseListingDetails("unluckiq");
        SkuDetails skunn2 = bp.getPurchaseListingDetails("plus5game");
        SkuDetails skunn3 = bp.getPurchaseListingDetails("noadd");
        SkuDetails skunn4 = bp.getPurchaseListingDetails("coin200");
        SkuDetails skunn5 = bp.getPurchaseListingDetails("coin500");
        SkuDetails skunn6 = bp.getPurchaseListingDetails("coin1000");
        SkuDetails skunn7 = bp.getPurchaseListingDetails("mult2");
//        Double xx =  skunn.priceValue;

        Boolean cont = false;
        if (skunn == null || skunn2 == null || skunn3 == null || skunn4 == null || skunn5 == null || skunn6 == null || skunn7 == null ) cont = false;
        else
        {
            if (skunn.priceValue == null || skunn2.priceValue == null || skunn3.priceValue == null || skunn4.priceValue == null || skunn5.priceValue == null || skunn6.priceValue == null || skunn7.priceValue == null) cont = false;
            else cont = true;

        }



        if (isOnline() && isServerReachable() && is24 && cont)

        {

            if (bp.isInitialized()) {
                SkuDetails skun = bp.getPurchaseListingDetails("unluckiq");
                SkuDetails skun2 = bp.getPurchaseListingDetails("plus5game");
                SkuDetails skun3 = bp.getPurchaseListingDetails("noadd");
                SkuDetails skun4 = bp.getPurchaseListingDetails("coin200");
                SkuDetails skun5 = bp.getPurchaseListingDetails("coin500");
                SkuDetails skun6 = bp.getPurchaseListingDetails("coin1000");
                SkuDetails skun7 = bp.getPurchaseListingDetails("mult2");
                SharedPreferences pref;
                pref = getSharedPreferences("info", MODE_PRIVATE);
                final SharedPreferences.Editor editor = pref.edit();


                editor.putString("unlockiqskun", Double.toString(round(skun.priceValue, 2)) + " " + skun.currency );
                editor.putString("plus5gameskun",Double.toString(round(skun2.priceValue, 2)) + " " + skun2.currency );
                editor.putString("noaddskun",Double.toString(round(skun3.priceValue, 2)) + " " + skun3.currency );
                editor.putString("coin200skun",Double.toString(round(skun4.priceValue, 2)) + " " + skun4.currency );
                editor.putString("coin500skun",Double.toString(round(skun5.priceValue, 2)) + " " + skun5.currency);
                editor.putString("coin1000skun",Double.toString(round(skun6.priceValue, 2)) + " " + skun6.currency );
                editor.putString("mult2skun",Double.toString(round(skun7.priceValue, 2)) + " " + skun7.currency );

                editor.commit();


                unlockiqtext.setText(Double.toString(round(skun.priceValue, 2)) + " " + skun.currency);
                plu5gametext.setText(Double.toString(round(skun2.priceValue, 2)) + " " + skun2.currency);
                noadtext.setText(Double.toString(round(skun3.priceValue, 2)) + " " + skun3.currency);
                coin2000text.setText(Double.toString(round(skun4.priceValue, 2)) + " " + skun4.currency);
                coin5000text.setText(Double.toString(round(skun5.priceValue, 2)) + " " + skun5.currency);
                coin10000text.setText(Double.toString(round(skun6.priceValue, 2)) + " " + skun6.currency);
                mult2text.setText(Double.toString(round(skun7.priceValue, 2)) + " " + skun7.currency);

               /* ImageView img = (ImageView) findViewById(R.id.coinconnectionlayoutimg);
                FrameLayout frm = (FrameLayout) findViewById(R.id.coinconnectionlayout);
                frm.setVisibility(View.INVISIBLE);
                img.setVisibility(View.INVISIBLE);*/
            } else {

                String unlockiqskun = "3,99 USD";
                String plus5gameskun = "3,99 USD";
                String noaddskun = "3,49 USD";
                String coin200skun = "0,99 USD";
                String coin500skun = "1,99 USD";
                String coin1000skun = "3,49 USD";
                String mult2skun = "1,5 USD";

                unlockiqskun = shared.getString("unlockiqskun", unlockiqskun);
                plus5gameskun = shared.getString("plus5gameskun", plus5gameskun);
                noaddskun = shared.getString("noaddskun", noaddskun);
                coin200skun = shared.getString("coin200skun", coin200skun);
                coin500skun = shared.getString("coin500skun", coin500skun);
                coin1000skun = shared.getString("coin1000skun", coin1000skun);
                mult2skun = shared.getString("mult2skun", mult2skun);

                unlockiqtext.setText(unlockiqskun);
                plu5gametext.setText(plus5gameskun);
                noadtext.setText(noaddskun);
                coin2000text.setText(coin200skun);
                coin5000text.setText(coin500skun);
                coin10000text.setText(coin1000skun);
                mult2text.setText(mult2skun);
            }

        }

            else
            {

                String unlockiqskun = "3,99 USD";
                String plus5gameskun = "3,99 USD";
                String noaddskun = "3,49 USD" ;
                String coin200skun = "0.99 USD";
                String coin500skun = "1.99 USD";
                String coin1000skun = "3.49 USD";
                String mult2skun = "1.5 USD";

                unlockiqskun = shared.getString("unlockiqskun", unlockiqskun);
                plus5gameskun = shared.getString("plus5gameskun", plus5gameskun);
                noaddskun = shared.getString("noaddskun", noaddskun);
                coin200skun = shared.getString("coin200skun", coin200skun);
                coin500skun = shared.getString("coin500skun", coin500skun);
                coin1000skun = shared.getString("coin1000skun", coin1000skun);
                mult2skun = shared.getString("mult2skun", mult2skun);
                Log.d("taggy",unlockiqskun );

                unlockiqtext.setText(unlockiqskun);
                plu5gametext.setText(plus5gameskun);
                noadtext.setText(noaddskun);
                coin2000text.setText(coin200skun);
                coin5000text.setText(coin500skun);
                coin10000text.setText(coin1000skun);
                mult2text.setText(mult2skun);
            }

 ImageView img = (ImageView) findViewById(R.id.coinconnectionlayoutimg);
                FrameLayout frm = (FrameLayout) findViewById(R.id.coinconnectionlayout);
                frm.setVisibility(View.INVISIBLE);
                img.setVisibility(View.INVISIBLE);

    }

void loadads2()
{
    bannerAd2.load();
    /*final int densit = (int)Resources.getSystem().getDisplayMetrics().density;

    final RelativeLayout.LayoutParams bannerLp = new RelativeLayout.LayoutParams(320*densit, 50*densit);
    bannerLp.addRule(RelativeLayout.ALIGN_PARENT_BOTTOM);
    bannerLp.addRule(RelativeLayout.CENTER_HORIZONTAL);
    final RelativeLayout adContainer = (RelativeLayout) findViewById(R.id.market);
    adContainer.addView(bannerAd2, bannerLp);

    bannerAd2.setRefreshInterval(60);

    if(!adflag) bannerAd2.load();
*/
}


    void loadaddds()
    {

       /* final AdRequest adRequest = new AdRequest.Builder()
                .addTestDevice(AdRequest.DEVICE_ID_EMULATOR)
                .addTestDevice("353720052948557")
                .build();*/
       // mInterstitialAd.loadAd(adRequest);

       // mAdView.loadAd(adRequest);

        //interstitialnew.load();
       // AdColony.requestInterstitial( ZONE_ID, listener, ad_options);
       // AdColony.requestInterstitial( ZONE_ID2, listener2, ad_options2);
       // Chartboost.cacheInterstitial(CBLocation.LOCATION_DEFAULT);
    }
    public boolean isOnline() {
        boolean haveConnectedWifi = false;
        boolean haveConnectedMobile = false;

        ConnectivityManager cm = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);
        NetworkInfo[] netInfo = cm.getAllNetworkInfo();
        for (NetworkInfo ni : netInfo) {
            if (ni.getTypeName().equalsIgnoreCase("WIFI"))
                if (ni.isConnected())
                    haveConnectedWifi = true;
            if (ni.getTypeName().equalsIgnoreCase("MOBILE"))
                if (ni.isConnected())
                    haveConnectedMobile = true;
        }
        return haveConnectedWifi || haveConnectedMobile;
    }

}



